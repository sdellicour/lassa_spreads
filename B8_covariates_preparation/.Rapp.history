gridPoints
mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		covariates[[1]] = read.csv(paste0("Temp_",analyses[a],".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",analyses[a],".csv"), header=T)#
		covariate_names = c(paste0("Temp_",analyses[a]), paste0("Prec_",analyses[a]))#
		if (mostRecentSamplingDatum > 2018)#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		if (mostRecentSamplingDatum > 2018) gridPoints = gridPoints[2:length(gridPoints)] # to remove 01/01/2018 as grid point (because no measure for 2018)#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}#
		timePoints = matrix(nrow=length(gridPoints)+1,ncol=1+length(covariates))#
		colnames(timePoints) = c("time",covariate_names)#
		timePoints[,1] = c(1901,rev(mostRecentSamplingDatum-gridPoints))#
		for (i in 1:dim(timePoints)[1])#
			{#
				timePoint = timePoints[i,1]#
				for (j in 1:length(covariates))#
					{#
						if (timePoint%in%covariates[[j]][,1]) timePoints[i,covariate_names[j]] = covariates[[j]][which(covariates[[j]][,1]==timePoint),2]#
					}#
			}
timePoints
analyses = c("MRU_segL","MRU_segS","NI_segL_allG","NI_segS_allG")#
mostRecentSamplingDates = c(2018.184, 2018.184, 2014.353, 2013.592)#
#
for (a in 1:length(analyses))#
	{#
		mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		covariates[[1]] = read.csv(paste0("Temp_",analyses[a],".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",analyses[a],".csv"), header=T)#
		covariate_names = c(paste0("Temp_",analyses[a]), paste0("Prec_",analyses[a]))#
		if (mostRecentSamplingDatum > 2018)#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		if (mostRecentSamplingDatum > 2018) gridPoints = gridPoints[2:length(gridPoints)] # to remove 01/01/2018 as grid point (because no measure for 2018)#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}#
		timePoints = matrix(nrow=length(gridPoints)+1,ncol=1+length(covariates))#
		colnames(timePoints) = c("time",covariate_names)#
		timePoints[,1] = c(1901,rev(mostRecentSamplingDatum-gridPoints))#
		for (i in 1:dim(timePoints)[1])#
			{#
				timePoint = timePoints[i,1]#
				for (j in 1:length(covariates))#
					{#
						if (timePoint%in%covariates[[j]][,1]) timePoints[i,covariate_names[j]] = covariates[[j]][which(covariates[[j]][,1]==timePoint),2]#
					}#
			}#
		nberOfIntervals = dim(timePoints)[1]#
		txt = c()#
		txt = c(txt, paste0("\t\t<populationSizes>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.logPopSize\" dimension=\"",nberOfIntervals,"\"/>"))	#
		txt = c(txt, paste0("\t\t</populationSizes>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<lastObservedIndex>"))#
		# startingNA = rep(NA, length(covariates)); startingNA[1] = 213#
		# txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",startingNA[1]-1,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",length(gridPoints)+1,"\"/>"))#
		if (length(covariates) > 1)#
			{#
				for (i in 2:length(covariates))#
					{#
						indices = c(nberOfIntervals:1)[which(is.na(timePoints[,covariate_names[i]]))]; startingNA[i] = indices[length(indices)]#
						txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",i,"\" value=\"",startingNA[i]-1,"\"/>"))#
					}#
			}#
		txt = c(txt, paste0("\t\t</lastObservedIndex>"))#
		txt = c(txt, paste0("\t\t<covariatePrecision>"))#
		for (i in 1:length(covariates))#
			{#
				maxDiff = 0#
				for (j in 2:dim(timePoints)[1])#
					{#
						if ((!is.na(as.numeric(timePoints[j,covariate_names[i]])))&(!is.na(as.numeric(timePoints[j-1,covariate_names[i]]))))#
							{#
								if (maxDiff < abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]])))#
									{#
										maxDiff = abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]]))#
									}#
							}#
					}#
				values = as.numeric(timePoints[,covariate_names[i]]); values = values[!is.na(values)]#
				covPrec = 1/((sd(values))^2)#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.covPrec.",i,"\" value=\"",covPrec,"\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</covariatePrecision>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<gridPoints>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.gridPoints\" value=\"",gridPoints_txt,"\"/>"))#
		txt = c(txt, paste0("\t\t</gridPoints>"))#
		txt = c(txt, paste0("\t\t<precisionParameter>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.precision\" value=\"1.0\" lower=\"0.0\"/>"))#
		txt = c(txt, paste0("\t\t</precisionParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<betaParameter>"))#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.beta.",i,"\" value=\"0\" lower=\"-1000\" upper=\"1000\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</betaParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<covariates>"))#
		for (i in 1:length(covariates))#
			{#
				c = 0; lastValue = "NA"; meanValue = mean(as.numeric(timePoints[,covariate_names[i]]), na.rm=T)#
				txt = c(txt, paste0("\t\t\t<matrixParameter id=\"",covariate_names[i],"\">"))#
				for (j in dim(timePoints)[1]:1)#
					{#
						c = c+1#
						if (!is.na(timePoints[j,covariate_names[i]]))#
							{#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",timePoints[j,covariate_names[i]],"\"/>"))#
								lastValue = timePoints[j,covariate_names[i]]#
							}	else	{#
								# txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",meanValue,"\" lower=\"0\"/>"))#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=NA","\" lower=\"0\"/>"))#
							}#
					}#
				txt = c(txt,"\t\t\t</matrixParameter>")#
			}#
		txt = c(txt,"\t\t</covariates>")#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1])#
					# {#
						# txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"15\">"))#
						# txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
						# txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
					# }#
				# txt = c(txt, "")#
			# }#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"30\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")	#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<normalPrior mean=\"0.0\" stdev=\"1\" offset=\"0.0\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</normalPrior>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		for (i in 1:length(covariates)) txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.gridPoints\"/>"))#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1]) txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
			# }#
		write(txt, paste0("GLM_",analyses[a],".xml"))#
	}
analyses = c("MRU_segL","MRU_segS","NI_segL_allG","NI_segS_allG")#
mostRecentSamplingDates = c(2018.184, 2018.184, 2014.353, 2013.592)#
#
for (a in 1:length(analyses))#
	{#
		mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		covariates[[1]] = read.csv(paste0("Temp_",analyses[a],".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",analyses[a],".csv"), header=T)#
		covariate_names = c(paste0("Temp_",analyses[a]), paste0("Prec_",analyses[a]))#
		if (mostRecentSamplingDatum > 2018)#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		if (mostRecentSamplingDatum > 2018) gridPoints = gridPoints[2:length(gridPoints)] # to remove 01/01/2018 as grid point (because no measure for 2018)#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}#
		timePoints = matrix(nrow=length(gridPoints)+1,ncol=1+length(covariates))#
		colnames(timePoints) = c("time",covariate_names)#
		timePoints[,1] = c(1901,rev(mostRecentSamplingDatum-gridPoints))#
		for (i in 1:dim(timePoints)[1])#
			{#
				timePoint = timePoints[i,1]#
				for (j in 1:length(covariates))#
					{#
						if (timePoint%in%covariates[[j]][,1]) timePoints[i,covariate_names[j]] = covariates[[j]][which(covariates[[j]][,1]==timePoint),2]#
					}#
			}#
		nberOfIntervals = dim(timePoints)[1]#
		txt = c()#
		txt = c(txt, paste0("\t\t<populationSizes>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.logPopSize\" dimension=\"",nberOfIntervals,"\"/>"))	#
		txt = c(txt, paste0("\t\t</populationSizes>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<lastObservedIndex>"))#
		startingNA = rep(NA, length(covariates)); # startingNA[1] = 213#
		# txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",startingNA[1]-1,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",length(gridPoints)+1,"\"/>"))#
		if (length(covariates) > 1)#
			{#
				for (i in 2:length(covariates))#
					{#
						indices = c(nberOfIntervals:1)[which(is.na(timePoints[,covariate_names[i]]))]; startingNA[i] = indices[length(indices)]#
						txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",i,"\" value=\"",startingNA[i]-1,"\"/>"))#
					}#
			}#
		txt = c(txt, paste0("\t\t</lastObservedIndex>"))#
		txt = c(txt, paste0("\t\t<covariatePrecision>"))#
		for (i in 1:length(covariates))#
			{#
				maxDiff = 0#
				for (j in 2:dim(timePoints)[1])#
					{#
						if ((!is.na(as.numeric(timePoints[j,covariate_names[i]])))&(!is.na(as.numeric(timePoints[j-1,covariate_names[i]]))))#
							{#
								if (maxDiff < abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]])))#
									{#
										maxDiff = abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]]))#
									}#
							}#
					}#
				values = as.numeric(timePoints[,covariate_names[i]]); values = values[!is.na(values)]#
				covPrec = 1/((sd(values))^2)#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.covPrec.",i,"\" value=\"",covPrec,"\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</covariatePrecision>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<gridPoints>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.gridPoints\" value=\"",gridPoints_txt,"\"/>"))#
		txt = c(txt, paste0("\t\t</gridPoints>"))#
		txt = c(txt, paste0("\t\t<precisionParameter>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.precision\" value=\"1.0\" lower=\"0.0\"/>"))#
		txt = c(txt, paste0("\t\t</precisionParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<betaParameter>"))#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.beta.",i,"\" value=\"0\" lower=\"-1000\" upper=\"1000\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</betaParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<covariates>"))#
		for (i in 1:length(covariates))#
			{#
				c = 0; lastValue = "NA"; meanValue = mean(as.numeric(timePoints[,covariate_names[i]]), na.rm=T)#
				txt = c(txt, paste0("\t\t\t<matrixParameter id=\"",covariate_names[i],"\">"))#
				for (j in dim(timePoints)[1]:1)#
					{#
						c = c+1#
						if (!is.na(timePoints[j,covariate_names[i]]))#
							{#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",timePoints[j,covariate_names[i]],"\"/>"))#
								lastValue = timePoints[j,covariate_names[i]]#
							}	else	{#
								# txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",meanValue,"\" lower=\"0\"/>"))#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=NA","\" lower=\"0\"/>"))#
							}#
					}#
				txt = c(txt,"\t\t\t</matrixParameter>")#
			}#
		txt = c(txt,"\t\t</covariates>")#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1])#
					# {#
						# txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"15\">"))#
						# txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
						# txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
					# }#
				# txt = c(txt, "")#
			# }#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"30\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")	#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<normalPrior mean=\"0.0\" stdev=\"1\" offset=\"0.0\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</normalPrior>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		for (i in 1:length(covariates)) txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.gridPoints\"/>"))#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1]) txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
			# }#
		write(txt, paste0("GLM_",analyses[a],".xml"))#
	}
analyses = c("MRU_segL","MRU_segS","NI_segL_allG","NI_segS_allG")#
mostRecentSamplingDates = c(2018.184, 2018.184, 2014.353, 2013.592)#
#
for (a in 1:length(analyses))#
	{#
		mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		covariates[[1]] = read.csv(paste0("Temp_",analyses[a],".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",analyses[a],".csv"), header=T)#
		covariate_names = c(paste0("Temp_",analyses[a]), paste0("Prec_",analyses[a]))#
		if (mostRecentSamplingDatum > 2018)#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		if (mostRecentSamplingDatum > 2018) gridPoints = gridPoints[2:length(gridPoints)] # to remove 01/01/2018 as grid point (because no measure for 2018)#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}#
		timePoints = matrix(nrow=length(gridPoints)+1,ncol=1+length(covariates))#
		colnames(timePoints) = c("time",covariate_names)#
		timePoints[,1] = c(1901,rev(mostRecentSamplingDatum-gridPoints))#
		for (i in 1:dim(timePoints)[1])#
			{#
				timePoint = timePoints[i,1]#
				for (j in 1:length(covariates))#
					{#
						if (timePoint%in%covariates[[j]][,1]) timePoints[i,covariate_names[j]] = covariates[[j]][which(covariates[[j]][,1]==timePoint),2]#
					}#
			}#
		nberOfIntervals = dim(timePoints)[1]#
		txt = c()#
		txt = c(txt, paste0("\t\t<populationSizes>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.logPopSize\" dimension=\"",nberOfIntervals,"\"/>"))	#
		txt = c(txt, paste0("\t\t</populationSizes>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<lastObservedIndex>"))#
		# startingNA = rep(NA, length(covariates)); # startingNA[1] = 213#
		# txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",startingNA[1]-1,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",length(gridPoints)+1,"\"/>"))#
		if (length(covariates) > 1)#
			{#
				for (i in 2:length(covariates))#
					{#
						# indices = c(nberOfIntervals:1)[which(is.na(timePoints[,covariate_names[i]]))]; startingNA[i] = indices[length(indices)]#
						txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",i,"\" value=\"",length(gridPoints)+1,"\"/>"))#
					}#
			}#
		txt = c(txt, paste0("\t\t</lastObservedIndex>"))#
		txt = c(txt, paste0("\t\t<covariatePrecision>"))#
		for (i in 1:length(covariates))#
			{#
				maxDiff = 0#
				for (j in 2:dim(timePoints)[1])#
					{#
						if ((!is.na(as.numeric(timePoints[j,covariate_names[i]])))&(!is.na(as.numeric(timePoints[j-1,covariate_names[i]]))))#
							{#
								if (maxDiff < abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]])))#
									{#
										maxDiff = abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]]))#
									}#
							}#
					}#
				values = as.numeric(timePoints[,covariate_names[i]]); values = values[!is.na(values)]#
				covPrec = 1/((sd(values))^2)#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.covPrec.",i,"\" value=\"",covPrec,"\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</covariatePrecision>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<gridPoints>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.gridPoints\" value=\"",gridPoints_txt,"\"/>"))#
		txt = c(txt, paste0("\t\t</gridPoints>"))#
		txt = c(txt, paste0("\t\t<precisionParameter>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.precision\" value=\"1.0\" lower=\"0.0\"/>"))#
		txt = c(txt, paste0("\t\t</precisionParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<betaParameter>"))#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.beta.",i,"\" value=\"0\" lower=\"-1000\" upper=\"1000\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</betaParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<covariates>"))#
		for (i in 1:length(covariates))#
			{#
				c = 0; lastValue = "NA"; meanValue = mean(as.numeric(timePoints[,covariate_names[i]]), na.rm=T)#
				txt = c(txt, paste0("\t\t\t<matrixParameter id=\"",covariate_names[i],"\">"))#
				for (j in dim(timePoints)[1]:1)#
					{#
						c = c+1#
						if (!is.na(timePoints[j,covariate_names[i]]))#
							{#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",timePoints[j,covariate_names[i]],"\"/>"))#
								lastValue = timePoints[j,covariate_names[i]]#
							}	else	{#
								# txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",meanValue,"\" lower=\"0\"/>"))#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=NA","\" lower=\"0\"/>"))#
							}#
					}#
				txt = c(txt,"\t\t\t</matrixParameter>")#
			}#
		txt = c(txt,"\t\t</covariates>")#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1])#
					# {#
						# txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"15\">"))#
						# txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
						# txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
					# }#
				# txt = c(txt, "")#
			# }#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"30\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")	#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<normalPrior mean=\"0.0\" stdev=\"1\" offset=\"0.0\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</normalPrior>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		for (i in 1:length(covariates)) txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.gridPoints\"/>"))#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1]) txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
			# }#
		write(txt, paste0("GLM_",analyses[a],".xml"))#
	}
mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		covariates[[1]] = read.csv(paste0("Temp_",analyses[a],".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",analyses[a],".csv"), header=T)#
		covariate_names = c(paste0("Temp_",analyses[a]), paste0("Prec_",analyses[a]))#
		if (mostRecentSamplingDatum > 2018)#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		if (mostRecentSamplingDatum > 2018) gridPoints = gridPoints[2:length(gridPoints)] # to remove 01/01/2018 as grid point (because no measure for 2018)#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}#
		timePoints = matrix(nrow=length(gridPoints)+1,ncol=1+length(covariates))#
		colnames(timePoints) = c("time",covariate_names)#
		timePoints[,1] = c(1901,rev(mostRecentSamplingDatum-gridPoints))#
		for (i in 1:dim(timePoints)[1])#
			{#
				timePoint = timePoints[i,1]#
				for (j in 1:length(covariates))#
					{#
						if (timePoint%in%covariates[[j]][,1]) timePoints[i,covariate_names[j]] = covariates[[j]][which(covariates[[j]][,1]==timePoint),2]#
					}#
			}#
		nberOfIntervals = dim(timePoints)[1]
timePoints
gridPoints
a
mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		covariates[[1]] = read.csv(paste0("Temp_",analyses[a],".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",analyses[a],".csv"), header=T)#
		covariate_names = c(paste0("Temp_",analyses[a]), paste0("Prec_",analyses[a]))#
		if (mostRecentSamplingDatum > 2018)#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		if (mostRecentSamplingDatum > 2018) gridPoints = gridPoints[2:length(gridPoints)] # to remove 01/01/2018 as grid point (because no measure for 2018)#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}#
		timePoints = matrix(nrow=length(gridPoints)+1,ncol=1+length(covariates))
timePoints
colnames(timePoints) = c("time",covariate_names)
timePoints[,1] = c(1901,rev(mostRecentSamplingDatum-gridPoints))#
		for (i in 1:dim(timePoints)[1])#
			{#
				timePoint = timePoints[i,1]#
				for (j in 1:length(covariates))#
					{#
						if (timePoint%in%covariates[[j]][,1]) timePoints[i,covariate_names[j]] = covariates[[j]][which(covariates[[j]][,1]==timePoint),2]#
					}#
			}
timePoints
gridPoints
analyses = c("MRU_segL","MRU_segS","NI_segL_allG","NI_segS_allG")#
mostRecentSamplingDates = c(2018.184, 2018.184, 2014.353, 2013.592)#
#
for (a in 1:length(analyses))#
	{#
		mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		covariates[[1]] = read.csv(paste0("Temp_",analyses[a],".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",analyses[a],".csv"), header=T)#
		covariate_names = c(paste0("Temp_",analyses[a]), paste0("Prec_",analyses[a]))#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		if (mostRecentSamplingDatum > 2018)#
			{#
				gridPoints = gridPoints[2:length(gridPoints)]#
				# to remove 01/01/2018 as grid point (because no measure for 2018)#
			}#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}#
		timePoints = matrix(nrow=length(gridPoints)+1,ncol=1+length(covariates))#
		colnames(timePoints) = c("time",covariate_names)#
		timePoints[,1] = c(1901,rev(mostRecentSamplingDatum-gridPoints))#
		for (i in 1:dim(timePoints)[1])#
			{#
				timePoint = timePoints[i,1]#
				for (j in 1:length(covariates))#
					{#
						if (timePoint%in%covariates[[j]][,1]) timePoints[i,covariate_names[j]] = covariates[[j]][which(covariates[[j]][,1]==timePoint),2]#
					}#
			}#
		nberOfIntervals = dim(timePoints)[1]#
		txt = c()#
		txt = c(txt, paste0("\t\t<populationSizes>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.logPopSize\" dimension=\"",nberOfIntervals,"\"/>"))	#
		txt = c(txt, paste0("\t\t</populationSizes>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<lastObservedIndex>"))#
		# startingNA = rep(NA, length(covariates)); # startingNA[1] = 213#
		# txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",startingNA[1]-1,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",length(gridPoints)+1,"\"/>"))#
		if (length(covariates) > 1)#
			{#
				for (i in 2:length(covariates))#
					{#
						# indices = c(nberOfIntervals:1)[which(is.na(timePoints[,covariate_names[i]]))]; startingNA[i] = indices[length(indices)]#
						txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",i,"\" value=\"",length(gridPoints)+1,"\"/>"))#
					}#
			}#
		txt = c(txt, paste0("\t\t</lastObservedIndex>"))#
		txt = c(txt, paste0("\t\t<covariatePrecision>"))#
		for (i in 1:length(covariates))#
			{#
				maxDiff = 0#
				for (j in 2:dim(timePoints)[1])#
					{#
						if ((!is.na(as.numeric(timePoints[j,covariate_names[i]])))&(!is.na(as.numeric(timePoints[j-1,covariate_names[i]]))))#
							{#
								if (maxDiff < abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]])))#
									{#
										maxDiff = abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]]))#
									}#
							}#
					}#
				values = as.numeric(timePoints[,covariate_names[i]]); values = values[!is.na(values)]#
				covPrec = 1/((sd(values))^2)#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.covPrec.",i,"\" value=\"",covPrec,"\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</covariatePrecision>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<gridPoints>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.gridPoints\" value=\"",gridPoints_txt,"\"/>"))#
		txt = c(txt, paste0("\t\t</gridPoints>"))#
		txt = c(txt, paste0("\t\t<precisionParameter>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.precision\" value=\"1.0\" lower=\"0.0\"/>"))#
		txt = c(txt, paste0("\t\t</precisionParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<betaParameter>"))#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.beta.",i,"\" value=\"0\" lower=\"-1000\" upper=\"1000\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</betaParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<covariates>"))#
		for (i in 1:length(covariates))#
			{#
				c = 0; lastValue = "NA"; meanValue = mean(as.numeric(timePoints[,covariate_names[i]]), na.rm=T)#
				txt = c(txt, paste0("\t\t\t<matrixParameter id=\"",covariate_names[i],"\">"))#
				for (j in dim(timePoints)[1]:1)#
					{#
						c = c+1#
						if (!is.na(timePoints[j,covariate_names[i]]))#
							{#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",timePoints[j,covariate_names[i]],"\"/>"))#
								lastValue = timePoints[j,covariate_names[i]]#
							}	else	{#
								# txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",meanValue,"\" lower=\"0\"/>"))#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=NA","\" lower=\"0\"/>"))#
							}#
					}#
				txt = c(txt,"\t\t\t</matrixParameter>")#
			}#
		txt = c(txt,"\t\t</covariates>")#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1])#
					# {#
						# txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"15\">"))#
						# txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
						# txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
					# }#
				# txt = c(txt, "")#
			# }#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"30\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")	#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<normalPrior mean=\"0.0\" stdev=\"1\" offset=\"0.0\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</normalPrior>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		for (i in 1:length(covariates)) txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.gridPoints\"/>"))#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1]) txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
			# }#
		write(txt, paste0("GLM_",analyses[a],".xml"))#
	}
# Script to prepare annual temperature estimates based on data from the Climate Research Unit (CRU)#
# Source: http://www.cru.uea.ac.uk (https://crudata.uea.ac.uk/cru/data/hrg/cru_ts_4.02/cruts.1811131722.v4.02)#
#
library(ncdf4)#
library(rgdal)#
#
xMin = -16; xMax = 16; yMin = 3; yMax = 15#
variables = c("temperature","precipitation"); suffixes = c("Temp","Prec")#
yLabs = c("annual mean temperature","annual precipitation")
# Script to prepare annual temperature estimates based on data from the Climate Research Unit (CRU)#
# Source: http://www.cru.uea.ac.uk (https://crudata.uea.ac.uk/cru/data/hrg/cru_ts_4.02/cruts.1811131722.v4.02)#
#
library(ncdf4)#
library(rgdal)#
#
xMin = -16; xMax = 16; yMin = 3; yMax = 15#
variables = c("cropland","primary land","secondary land","pasture","urban land")#
suffixes = c("Crop","Prim","Scon","Past","Urbl")#
yLabs = c("annual mean temperature","annual precipitation")
xMin = -16; xMax = 16; yMin = 3; yMax = 15#
variables = c("gcrop","gothr","gsecd","gpast","gurbn")#
suffixes = c("Crop","Prim","Scon","Past","Urbl")#
variable_names = c("cropland","primary land","secondary land","pasture","urban land")
# Script to prepare annual temperature estimates based on data from the Climate Research Unit (CRU)#
# Source: http://www.cru.uea.ac.uk (https://crudata.uea.ac.uk/cru/data/hrg/cru_ts_4.02/cruts.1811131722.v4.02)#
#
library(ncdf4)#
library(rgdal)#
#
xMin = -16; xMax = 16; yMin = 3; yMax = 15#
variables = c("gcrop","gothr","gsecd","gpast","gurbn")#
suffixes = c("Crop","Prim","Scon","Past","Urbl")#
variable_names = c("cropland","primary land","secondary land","pasture","urban land")
suffixes
h=1
# Script to prepare annual temperature estimates based on data from the Climate Research Unit (CRU)#
# Source: http://www.cru.uea.ac.uk (https://crudata.uea.ac.uk/cru/data/hrg/cru_ts_4.02/cruts.1811131722.v4.02)#
#
library(ncdf4)#
library(rgdal)#
#
xMin = -16; xMax = 16; yMin = 3; yMax = 15#
variables = c("gcrop","gothr","gsecd","gpast","gurbn")#
suffixes = c("Crop","Prim","Scon","Past","Urbl")#
variable_names = c("cropland","primary land","secondary land","pasture","urban land")
nc = nc_open(paste0("Land_use_for_1500-2100/LUHa_u2t1.v1_gcrop.",variables[h],".nc4"))
nc = nc_open(paste0("Land_use_for_1500-2100/LUHa_u2t1.v1_",variables[h],".nc4"))
nc
h=2
nc = nc_open(paste0("Land_use_for_1500-2100/LUHa_u2t1.v1_",variables[h],".nc4"))
nc
h=3
nc = nc_open(paste0("Land_use_for_1500-2100/LUHa_u2t1.v1_",variables[h],".nc4"))#
		time = ncvar_get(nc,"time")#
		lon = ncvar_get(nc,"lon")#
		lat = ncvar_get(nc,"lat")
nc
h=4
nc = nc_open(paste0("Land_use_for_1500-2100/LUHa_u2t1.v1_",variables[h],".nc4"))#
		time = ncvar_get(nc,"time")#
		lon = ncvar_get(nc,"lon")#
		lat = ncvar_get(nc,"lat")#
		if (h == 1) var1 = ncvar_get(nc,"prop_crop")#
		if (h == 1) var1 = ncvar_get(nc,"prop_primary")#
		if (h == 1) var1 = ncvar_get(nc,"prop_secd")#
		if (h == 1) var1 = ncvar_get(nc,"gpast")#
		if (h == 1) var1 = ncvar_get(nc,"gurbn")
nc
xMin = -16; xMax = 16; yMin = 3; yMax = 15#
variables = c("gcrop","gothr","gsecd","gpast","gurbn")#
suffixes = c("Crop","Prim","Scon","Past","Urbl")#
variable_names = c("cropland","primary land","secondary land","pasture","urban land")
h=5
nc = nc_open(paste0("Land_use_for_1500-2100/LUHa_u2t1.v1_",variables[h],".nc4"))#
		time = ncvar_get(nc,"time")#
		lon = ncvar_get(nc,"lon")#
		lat = ncvar_get(nc,"lat")
nc
library(ncdf4)#
library(rgdal)#
#
xMin = -16; xMax = 16; yMin = 3; yMax = 15#
variables = c("gcrop","gothr","gsecd","gpast","gurbn")#
suffixes = c("Crop","Prim","Secd","Past","Urbn")#
variable_names = c("cropland","primary land","secondary land","pasture","urban land")
h=1
nc = nc_open(paste0("Land_use_for_1500-2100/LUHa_u2t1.v1_",variables[h],".nc4"))#
		time = ncvar_get(nc,"time")#
		lon = ncvar_get(nc,"lon")#
		lat = ncvar_get(nc,"lat")#
		if (h == 1) var1 = ncvar_get(nc,"prop_crop")#
		if (h == 2) var1 = ncvar_get(nc,"prop_primary")#
		if (h == 3) var1 = ncvar_get(nc,"prop_secd")#
		if (h == 4) var1 = ncvar_get(nc,"prop_pasture")#
		if (h == 5) var1 = ncvar_get(nc,"prop_urbn")
nc = nc_open(paste0("Land_use_for_1500-2100/LUHa_u2t1.v1_",variables[h],".nc4"))#
		time = ncvar_get(nc,"time")#
		lon = ncvar_get(nc,"lon")#
		lat = ncvar_get(nc,"lat")#
		if (h == 1) var1 = ncvar_get(nc,"prop_crop")#
		if (h == 2) var1 = ncvar_get(nc,"prop_primary")#
		if (h == 3) var1 = ncvar_get(nc,"prop_secd")#
		if (h == 4) var1 = ncvar_get(nc,"prop_pasture")#
		if (h == 5) var1 = ncvar_get(nc,"prop_urbn")#
		var2 = c()#
		indices1 = which((lon>xMin)&(lon<xMax))#
		indices2 = which((lat>yMin)&(lat<yMax))#
		lon = lon[indices1]; lat = lat[indices2]#
		var1 = var1[indices1,indices2,]#
		years = time; n = 0#
		for (i in 1:length(years))#
			{#
				n = n+1#
				if (n == 4)#
					{#
						n = 0#
						daysInTheYear = daysInALeapYear#
					}	else 	{#
						daysInTheYear = daysPerNormalYear#
					}#
				index = which(cumulativeNberOfDays==max(cumulativeNberOfDays[cumulativeNberOfDays<=years[i]]))#
				years[i] = 1899+index+((years[i]-cumulativeNberOfDays[index])/daysInTheYear)#
			}#
		n = 0; tot = dim(var1)[1]*dim(var1)[2]#
		for (i in 1:dim(var1)[1])#
			{#
				for (j in 1:dim(var1)[2])#
					{#
						n = n+1; # print(paste0(n,"/",tot))#
						row = cbind(lon[i],lat[j],t(var1[i,j,]))#
						var2 = rbind(var2, row)#
					}#
			}#
		colnames(var2) = c("longitude","latitude",years)
nc
nc = nc_open(paste0("Land_use_for_1500-2100/LUHa_u2t1.v1_",variables[h],".nc4"))#
		time = ncvar_get(nc,"time")#
		lon = ncvar_get(nc,"lon")#
		lat = ncvar_get(nc,"lat")#
		if (h == 1) var1 = ncvar_get(nc,"prop_crop")#
		if (h == 2) var1 = ncvar_get(nc,"prop_primary")#
		if (h == 3) var1 = ncvar_get(nc,"prop_secd")#
		if (h == 4) var1 = ncvar_get(nc,"prop_pasture")#
		if (h == 5) var1 = ncvar_get(nc,"prop_urbn")#
		var2 = c()#
		indices1 = which((lon>xMin)&(lon<xMax))#
		indices2 = which((lat>yMin)&(lat<yMax))#
		lon = lon[indices1]; lat = lat[indices2]#
		var1 = var1[indices1,indices2,]#
		years = time+1700; n = 0#
		tot = dim(var1)[1]*dim(var1)[2]#
		for (i in 1:dim(var1)[1])#
			{#
				for (j in 1:dim(var1)[2])#
					{#
						n = n+1; # print(paste0(n,"/",tot))#
						row = cbind(lon[i],lat[j],t(var1[i,j,]))#
						var2 = rbind(var2, row)#
					}#
			}#
		colnames(var2) = c("longitude","latitude",years)
var2
years
nc = nc_open(paste0("Land_use_for_1500-2100/LUHa_u2t1.v1_",variables[h],".nc4"))#
		time = ncvar_get(nc,"time")#
		lon = ncvar_get(nc,"lon")#
		lat = ncvar_get(nc,"lat")#
		if (h == 1) var1 = ncvar_get(nc,"prop_crop")#
		if (h == 2) var1 = ncvar_get(nc,"prop_primary")#
		if (h == 3) var1 = ncvar_get(nc,"prop_secd")#
		if (h == 4) var1 = ncvar_get(nc,"prop_pasture")#
		if (h == 5) var1 = ncvar_get(nc,"prop_urbn")#
		var2 = c()#
		indices1 = which((lon>xMin)&(lon<xMax))#
		indices2 = which((lat>yMin)&(lat<yMax))#
		lon = lon[indices1]; lat = lat[indices2]#
		var1 = var1[indices1,indices2,]#
		years = time+1700; n = 0#
		tot = dim(var1)[1]*dim(var1)[2]#
		for (i in 1:dim(var1)[1])#
			{#
				for (j in 1:dim(var1)[2])#
					{#
						n = n+1; # print(paste0(n,"/",tot))#
						row = cbind(lon[i],lat[j],t(var1[i,j,]))#
						var2 = rbind(var2, row)#
					}#
			}#
		colnames(var2) = c("longitude","latitude",years)		#
		# write.csv(var2, paste0("CRU_",variables[h],".csv"), row.names=F, quote=F)#
			# }	else		{#
				# var2 = read.csv(paste0("CRU_",variables[h],".csv"), header=T)#
			# }#
		analyses = c("LASV2_MRU_segL","LASV2_MRU_segS","LASV2_NI_segL_allG","LASV2_NI_segS_allG")#
		for (i in 1:length(analyses))#
			{#
				values = matrix(nrow=length(selected_years), ncol=2)#
				for (y in 1:length(years))#
					{#
						buffer = var2[,3:dim(var2)[2]]; colNames = gsub("X","",colnames(buffer))#
						selectedMeasures = cbind(var2[,1:2],buffer[,which(floor(as.numeric(colNames))==years[y])])#
						hull = readOGR(dsn="Minimum_convex_hulls2", layer=paste0(analyses[i],"_",years[y]))#
						inHull = point.in.polygon(selectedMeasures[,"longitude"],selectedMeasures[,"latitude"],#
								 		   		  hull@polygons[[1]]@Polygons[[1]]@coords[,1],#
								 		   		  hull@polygons[[1]]@Polygons[[1]]@coords[,2])#
						indices = which(inHull==1); values[y,1] = years[y]#
						values[y,2] = mean(as.matrix(selectedMeasures[indices,3:dim(selectedMeasures)[2]]), na.rm=T)#
					}#
				curves[[i]] = values; colnames(values) = c("time",variables[h])#
				write.csv(values, paste0(gsub("LASV2",suffixes[h],analyses[i]),".csv"), row.names=F)#
			}
curves = list(); selected_years = c(1801:2005)#
xMin = -16; xMax = 16; yMin = 3; yMax = 15#
variables = c("gcrop","gothr","gsecd","gpast","gurbn")#
suffixes = c("Crop","Prim","Secd","Past","Urbn")#
variable_names = c("cropland","primary land","secondary land","pasture","urban land")
nc = nc_open(paste0("Land_use_for_1500-2100/LUHa_u2t1.v1_",variables[h],".nc4"))#
		time = ncvar_get(nc,"time")#
		lon = ncvar_get(nc,"lon")#
		lat = ncvar_get(nc,"lat")#
		if (h == 1) var1 = ncvar_get(nc,"prop_crop")#
		if (h == 2) var1 = ncvar_get(nc,"prop_primary")#
		if (h == 3) var1 = ncvar_get(nc,"prop_secd")#
		if (h == 4) var1 = ncvar_get(nc,"prop_pasture")#
		if (h == 5) var1 = ncvar_get(nc,"prop_urbn")#
		var2 = c()#
		indices1 = which((lon>xMin)&(lon<xMax))#
		indices2 = which((lat>yMin)&(lat<yMax))#
		lon = lon[indices1]; lat = lat[indices2]#
		var1 = var1[indices1,indices2,]#
		years = time+1700; n = 0#
		tot = dim(var1)[1]*dim(var1)[2]#
		for (i in 1:dim(var1)[1])#
			{#
				for (j in 1:dim(var1)[2])#
					{#
						n = n+1; # print(paste0(n,"/",tot))#
						row = cbind(lon[i],lat[j],t(var1[i,j,]))#
						var2 = rbind(var2, row)#
					}#
			}#
		colnames(var2) = c("longitude","latitude",years)		#
		# write.csv(var2, paste0("CRU_",variables[h],".csv"), row.names=F, quote=F)#
			# }	else		{#
				# var2 = read.csv(paste0("CRU_",variables[h],".csv"), header=T)#
			# }#
		analyses = c("LASV2_MRU_segL","LASV2_MRU_segS","LASV2_NI_segL_allG","LASV2_NI_segS_allG")#
		for (i in 1:length(analyses))#
			{#
				values = matrix(nrow=length(selected_years), ncol=2)#
				for (y in 1:length(years))#
					{#
						buffer = var2[,3:dim(var2)[2]]; colNames = gsub("X","",colnames(buffer))#
						selectedMeasures = cbind(var2[,1:2],buffer[,which(floor(as.numeric(colNames))==years[y])])#
						hull = readOGR(dsn="Minimum_convex_hulls2", layer=paste0(analyses[i],"_",years[y]))#
						inHull = point.in.polygon(selectedMeasures[,"longitude"],selectedMeasures[,"latitude"],#
								 		   		  hull@polygons[[1]]@Polygons[[1]]@coords[,1],#
								 		   		  hull@polygons[[1]]@Polygons[[1]]@coords[,2])#
						indices = which(inHull==1); values[y,1] = years[y]#
						values[y,2] = mean(as.matrix(selectedMeasures[indices,3:dim(selectedMeasures)[2]]), na.rm=T)#
					}#
				curves[[i]] = values; colnames(values) = c("time",variables[h])#
				write.csv(values, paste0(gsub("LASV2",suffixes[h],analyses[i]),".csv"), row.names=F)#
			}
values = matrix(nrow=length(selected_years), ncol=2)
y
buffer = var2[,3:dim(var2)[2]]; colNames = gsub("X","",colnames(buffer))
selectedMeasures = cbind(var2[,1:2],buffer[,which(floor(as.numeric(colNames))==years[y])])
hull = readOGR(dsn="Minimum_convex_hulls2", layer=paste0(analyses[i],"_",years[y]))
analyses[i]
nc = nc_open(paste0("Land_use_for_1500-2100/LUHa_u2t1.v1_",variables[h],".nc4"))#
		time = ncvar_get(nc,"time")#
		lon = ncvar_get(nc,"lon")#
		lat = ncvar_get(nc,"lat")#
		if (h == 1) var1 = ncvar_get(nc,"prop_crop")#
		if (h == 2) var1 = ncvar_get(nc,"prop_primary")#
		if (h == 3) var1 = ncvar_get(nc,"prop_secd")#
		if (h == 4) var1 = ncvar_get(nc,"prop_pasture")#
		if (h == 5) var1 = ncvar_get(nc,"prop_urbn")#
		var2 = c()#
		indices1 = which((lon>xMin)&(lon<xMax))#
		indices2 = which((lat>yMin)&(lat<yMax))#
		lon = lon[indices1]; lat = lat[indices2]#
		var1 = var1[indices1,indices2,]#
		years = time+1700; n = 0#
		tot = dim(var1)[1]*dim(var1)[2]#
		for (i in 1:dim(var1)[1])#
			{#
				for (j in 1:dim(var1)[2])#
					{#
						n = n+1; # print(paste0(n,"/",tot))#
						row = cbind(lon[i],lat[j],t(var1[i,j,]))#
						var2 = rbind(var2, row)#
					}#
			}#
		colnames(var2) = c("longitude","latitude",years)		#
		# write.csv(var2, paste0("CRU_",variables[h],".csv"), row.names=F, quote=F)#
			# }	else		{#
				# var2 = read.csv(paste0("CRU_",variables[h],".csv"), header=T)#
			# }#
		analyses = c("LASV2_MRU_segL","LASV2_MRU_segS","LASV2_NI_segL_allG","LASV2_NI_segS_allG")#
		for (i in 1:length(analyses))#
			{#
				values = matrix(nrow=length(selected_years), ncol=2)#
				for (y in 1:length(selected_years))#
					{#
						buffer = var2[,3:dim(var2)[2]]; colNames = gsub("X","",colnames(buffer))#
						selectedMeasures = cbind(var2[,1:2],buffer[,which(floor(as.numeric(colNames))==selected_years[y])])#
						hull = readOGR(dsn="Minimum_convex_hulls2", layer=paste0(analyses[i],"_",selected_years[y]))#
						inHull = point.in.polygon(selectedMeasures[,"longitude"],selectedMeasures[,"latitude"],#
								 		   		  hull@polygons[[1]]@Polygons[[1]]@coords[,1],#
								 		   		  hull@polygons[[1]]@Polygons[[1]]@coords[,2])#
						indices = which(inHull==1); values[y,1] = selected_years[y]#
						values[y,2] = mean(as.matrix(selectedMeasures[indices,3:dim(selectedMeasures)[2]]), na.rm=T)#
					}#
				curves[[i]] = values; colnames(values) = c("time",variables[h])#
				write.csv(values, paste0(gsub("LASV2",suffixes[h],analyses[i]),".csv"), row.names=F)#
			}
selected_years[y]
analyses[i]
curves = list(); selected_years = c(1901:2005)#
xMin = -16; xMax = 16; yMin = 3; yMax = 15#
variables = c("gcrop","gothr","gsecd","gpast","gurbn")#
suffixes = c("Crop","Prim","Secd","Past","Urbn")#
variable_names = c("cropland","primary land","secondary land","pasture","urban land")
nc = nc_open(paste0("Land_use_for_1500-2100/LUHa_u2t1.v1_",variables[h],".nc4"))#
		time = ncvar_get(nc,"time")#
		lon = ncvar_get(nc,"lon")#
		lat = ncvar_get(nc,"lat")#
		if (h == 1) var1 = ncvar_get(nc,"prop_crop")#
		if (h == 2) var1 = ncvar_get(nc,"prop_primary")#
		if (h == 3) var1 = ncvar_get(nc,"prop_secd")#
		if (h == 4) var1 = ncvar_get(nc,"prop_pasture")#
		if (h == 5) var1 = ncvar_get(nc,"prop_urbn")#
		var2 = c()#
		indices1 = which((lon>xMin)&(lon<xMax))#
		indices2 = which((lat>yMin)&(lat<yMax))#
		lon = lon[indices1]; lat = lat[indices2]#
		var1 = var1[indices1,indices2,]#
		years = time+1700; n = 0#
		tot = dim(var1)[1]*dim(var1)[2]#
		for (i in 1:dim(var1)[1])#
			{#
				for (j in 1:dim(var1)[2])#
					{#
						n = n+1; # print(paste0(n,"/",tot))#
						row = cbind(lon[i],lat[j],t(var1[i,j,]))#
						var2 = rbind(var2, row)#
					}#
			}#
		colnames(var2) = c("longitude","latitude",years)		#
		# write.csv(var2, paste0("CRU_",variables[h],".csv"), row.names=F, quote=F)#
			# }	else		{#
				# var2 = read.csv(paste0("CRU_",variables[h],".csv"), header=T)#
			# }#
		analyses = c("LASV2_MRU_segL","LASV2_MRU_segS","LASV2_NI_segL_allG","LASV2_NI_segS_allG")#
		for (i in 1:length(analyses))#
			{#
				values = matrix(nrow=length(selected_years), ncol=2)#
				for (y in 1:length(selected_years))#
					{#
						buffer = var2[,3:dim(var2)[2]]; colNames = gsub("X","",colnames(buffer))#
						selectedMeasures = cbind(var2[,1:2],buffer[,which(floor(as.numeric(colNames))==selected_years[y])])#
						hull = readOGR(dsn="Minimum_convex_hulls2", layer=paste0(analyses[i],"_",selected_years[y]))#
						inHull = point.in.polygon(selectedMeasures[,"longitude"],selectedMeasures[,"latitude"],#
								 		   		  hull@polygons[[1]]@Polygons[[1]]@coords[,1],#
								 		   		  hull@polygons[[1]]@Polygons[[1]]@coords[,2])#
						indices = which(inHull==1); values[y,1] = selected_years[y]#
						values[y,2] = mean(as.matrix(selectedMeasures[indices,3:dim(selectedMeasures)[2]]), na.rm=T)#
					}#
				curves[[i]] = values; colnames(values) = c("time",variables[h])#
				write.csv(values, paste0(gsub("LASV2",suffixes[h],analyses[i]),".csv"), row.names=F)#
			}
# Script to prepare past land use estimates based on data from the Harmonized Global Land Use for Years 1500-2100 (V1)#
# Source: https://daac.ornl.gov/VEGETATION/guides/Land_Use_Harmonization_V1.html#
# "We obtained scenarios of 21st century land-use from the Land-Use Harmonization project (i.e. LUHa_u2t1.v1; http://luh.umd.edu; #
# Hurtt et al. (2011) Harmonization of land-use scenarios for the period 1500–2100: 600 years of global gridded annual land-use #
# transitions, wood harvest, and resulting secondary land. Climatic Change 109: 117–161)"#
#
library(ncdf4)#
library(rgdal)#
#
curves = list(); selected_years = c(1901:2005)#
xMin = -16; xMax = 16; yMin = 3; yMax = 15#
variables = c("gcrop","gothr","gsecd","gpast","gurbn")#
suffixes = c("Crop","Prim","Secd","Past","Urbn")#
variable_names = c("cropland","primary land","secondary land","pasture","urban land")#
for (h in 1:length(variables))#
	{#
		nc = nc_open(paste0("Land_use_for_1500-2100/LUHa_u2t1.v1_",variables[h],".nc4"))#
		time = ncvar_get(nc,"time")#
		lon = ncvar_get(nc,"lon")#
		lat = ncvar_get(nc,"lat")#
		if (h == 1) var1 = ncvar_get(nc,"prop_crop")#
		if (h == 2) var1 = ncvar_get(nc,"prop_primary")#
		if (h == 3) var1 = ncvar_get(nc,"prop_secd")#
		if (h == 4) var1 = ncvar_get(nc,"prop_pasture")#
		if (h == 5) var1 = ncvar_get(nc,"prop_urbn")#
		var2 = c()#
		indices1 = which((lon>xMin)&(lon<xMax))#
		indices2 = which((lat>yMin)&(lat<yMax))#
		lon = lon[indices1]; lat = lat[indices2]#
		var1 = var1[indices1,indices2,]#
		years = time+1700; n = 0#
		tot = dim(var1)[1]*dim(var1)[2]#
		for (i in 1:dim(var1)[1])#
			{#
				for (j in 1:dim(var1)[2])#
					{#
						n = n+1; # print(paste0(n,"/",tot))#
						row = cbind(lon[i],lat[j],t(var1[i,j,]))#
						var2 = rbind(var2, row)#
					}#
			}#
		colnames(var2) = c("longitude","latitude",years)		#
		# write.csv(var2, paste0("CRU_",variables[h],".csv"), row.names=F, quote=F)#
			# }	else		{#
				# var2 = read.csv(paste0("CRU_",variables[h],".csv"), header=T)#
			# }#
		analyses = c("LASV2_MRU_segL","LASV2_MRU_segS","LASV2_NI_segL_allG","LASV2_NI_segS_allG")#
		for (i in 1:length(analyses))#
			{#
				values = matrix(nrow=length(selected_years), ncol=2)#
				for (y in 1:length(selected_years))#
					{#
						buffer = var2[,3:dim(var2)[2]]; colNames = gsub("X","",colnames(buffer))#
						selectedMeasures = cbind(var2[,1:2],buffer[,which(floor(as.numeric(colNames))==selected_years[y])])#
						hull = readOGR(dsn="Minimum_convex_hulls2", layer=paste0(analyses[i],"_",selected_years[y]))#
						inHull = point.in.polygon(selectedMeasures[,"longitude"],selectedMeasures[,"latitude"],#
								 		   		  hull@polygons[[1]]@Polygons[[1]]@coords[,1],#
								 		   		  hull@polygons[[1]]@Polygons[[1]]@coords[,2])#
						indices = which(inHull==1); values[y,1] = selected_years[y]#
						values[y,2] = mean(as.matrix(selectedMeasures[indices,3:dim(selectedMeasures)[2]]), na.rm=T)#
					}#
				curves[[i]] = values; colnames(values) = c("time",variables[h])#
				write.csv(values, paste0(gsub("LASV2",suffixes[h],analyses[i]),".csv"), row.names=F)#
			}#
	}
cols = c("olivedrab3","mediumseagreen","steelblue3","orange1","tan3")#
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(curves[[1]][,1], curves[[1]][,2], col=cols[1], lwd=0.5, type="l", axes=F, ann=F)#
for (i in 2:length(curves)) lines(curves[[i]][,1], curves[[i]][,2], col=cols[i], lwd=0.5)
curves
cols = c("olivedrab3","mediumseagreen","steelblue3","orange1","tan3")#
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(curves[[1]][,1], curves[[1]][,2], col=cols[1], lwd=0.5, type="l", axes=F, ann=F)#
for (i in 2:length(curves)) lines(curves[[i]][,1], curves[[i]][,2], col=cols[i], lwd=0.5)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30")#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1972, 24.95, legend=c("sliding window of 5 years"), lwd=1, cex=0.6, col=c("red"), text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
plot(curves1[[3]][,1], curves1[[3]][,2], lwd=0.5, type="l", axes=F, ann=F)#
lines(curves2[[3]][,1], curves2[[3]][,2], lwd=1.0, col="red")#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30")#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use proportion", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
dev.copy2pdf(file=paste0("CRU_",variables[h],"_NEW.pdf"))
for (h in 1:length(variables))#
	{#
		curves = list()#
		analyses = c("LASV2_MRU_segL","LASV2_MRU_segS","LASV2_NI_segL_allG","LASV2_NI_segS_allG")#
		for (i in 1:length(analyses))#
			{#
				curves[[i]] = read.csv(paste0(gsub("LASV2",suffixes[h],analyses[i]),".csv"), header=T)#
			}#
		curves_list[[h]] = curves#
	}
# Script to prepare past land use estimates based on data from the Harmonized Global Land Use for Years 1500-2100 (V1)#
# Source: https://daac.ornl.gov/VEGETATION/guides/Land_Use_Harmonization_V1.html#
# "We obtained scenarios of 21st century land-use from the Land-Use Harmonization project (i.e. LUHa_u2t1.v1; http://luh.umd.edu; #
# Hurtt et al. (2011) Harmonization of land-use scenarios for the period 1500–2100: 600 years of global gridded annual land-use #
# transitions, wood harvest, and resulting secondary land. Climatic Change 109: 117–161)"#
#
library(ncdf4)#
library(rgdal)#
#
selected_years = c(1901:2005); curves_list = list()#
xMin = -16; xMax = 16; yMin = 3; yMax = 15#
variables = c("gcrop","gothr","gsecd","gpast","gurbn")#
suffixes = c("Crop","Prim","Secd","Past","Urbn")#
variable_names = c("cropland","primary land","secondary land","pasture","urban land")
for (h in 1:length(variables))#
	{#
		curves = list()#
		analyses = c("LASV2_MRU_segL","LASV2_MRU_segS","LASV2_NI_segL_allG","LASV2_NI_segS_allG")#
		for (i in 1:length(analyses))#
			{#
				curves[[i]] = read.csv(paste0(gsub("LASV2",suffixes[h],analyses[i]),".csv"), header=T)#
			}#
		curves_list[[h]] = curves#
	}#
#
cols = c("olivedrab3","mediumseagreen","steelblue3","orange1","tan3")#
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(curves_list[[1]][[1]][,1], curves_list[[1]][[1]][,2], col=cols[1], lwd=0.5, type="l", axes=F, ann=F)#
for (i in 2:5) lines(curves_list[[i]][[1]][,1], curves_list[[i]][[1]][,2], col=cols[i], lwd=0.5)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30")#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1972, 24.95, legend=c("sliding window of 5 years"), lwd=1, cex=0.6, col=c("red"), text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
plot(curves_list[[1]][[3]][,1], curves_list[[1]][[3]][,2], col=cols[1], lwd=0.5, type="l", axes=F, ann=F)#
for (i in 2:5) lines(curves_list[[i]][[3]][,1], curves_list[[i]][[3]][,2], col=cols[i], lwd=0.5)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30")#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use proportion", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
dev.copy2pdf(file=paste0("Land_use_1901-2005.pdf"))
cols = c("olivedrab3","mediumseagreen","steelblue3","orange1","tan3")#
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(curves_list[[1]][[1]][,1], curves_list[[1]][[1]][,2], col=cols[1], lwd=0.5, type="l", axes=F, ann=F, ylim=c(0,1))#
for (i in 2:5) lines(curves_list[[i]][[1]][,1], curves_list[[i]][[1]][,2], col=cols[i], lwd=0.5)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30")#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1972, 24.95, legend=c("sliding window of 5 years"), lwd=1, cex=0.6, col=c("red"), text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
plot(curves_list[[1]][[3]][,1], curves_list[[1]][[3]][,2], col=cols[1], lwd=0.5, type="l", axes=F, ann=F, ylim=c(0,1))#
for (i in 2:5) lines(curves_list[[i]][[3]][,1], curves_list[[i]][[3]][,2], col=cols[i], lwd=0.5)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30")#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use proportion", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
dev.copy2pdf(file=paste0("Land_use_1901-2005.pdf"))
cols = c("olivedrab3","mediumseagreen","steelblue3","orange1","tan3")#
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(curves_list[[1]][[1]][,1], curves_list[[1]][[1]][,2], col=cols[1], lwd=1, type="l", axes=F, ann=F, ylim=c(0,0.75))#
for (i in 2:5) lines(curves_list[[i]][[1]][,1], curves_list[[i]][[1]][,2], col=cols[i], lwd=1)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.6,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(curves_list[[1]][[3]][,1], curves_list[[1]][[3]][,2], col=cols[1], lwd=1, type="l", axes=F, ann=F, ylim=c(0,0.75))#
for (i in 2:5) lines(curves_list[[i]][[3]][,1], curves_list[[i]][[3]][,2], col=cols[i], lwd=1)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.6,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use proportion", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1972, 0.2, legend=variables, lwd=1, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
dev.copy2pdf(file=paste0("Land_use_1901-2005.pdf"))
cols = c("olivedrab3","mediumseagreen","steelblue3","orange1","tan3")#
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(curves_list[[1]][[1]][,1], curves_list[[1]][[1]][,2], col=cols[1], lwd=1, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[1]][,1], curves_list[[i]][[1]][,2], col=cols[i], lwd=1)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.0,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(curves_list[[1]][[3]][,1], curves_list[[1]][[3]][,2], col=cols[1], lwd=1, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[3]][,1], curves_list[[i]][[3]][,2], col=cols[i], lwd=1)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use proportion", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1970, 0.8, legend=variable_names, lwd=1, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
dev.copy2pdf(file=paste0("Land_use_1901-2005.pdf"))
cols = c("olivedrab3","mediumseagreen","steelblue3","orange1","tan3")#
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(curves_list[[1]][[1]][,1], curves_list[[1]][[1]][,2], col=cols[1], lwd=1, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[1]][,1], curves_list[[i]][[1]][,2], col=cols[i], lwd=1)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.8,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(curves_list[[1]][[3]][,1], curves_list[[1]][[3]][,2], col=cols[1], lwd=1, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[3]][,1], curves_list[[i]][[3]][,2], col=cols[i], lwd=1)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use proportion", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1990, 0.8, legend=variable_names, lwd=1, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
dev.copy2pdf(file=paste0("Land_use_1901-2005.pdf"))
legend(1985, 0.8, legend=variable_names, lwd=1, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")
legend(1980, 0.8, legend=variable_names, lwd=1, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")
cols = c("olivedrab3","mediumseagreen","steelblue3","orange1","tan3")#
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(curves_list[[1]][[1]][,1], curves_list[[1]][[1]][,2], col=cols[1], lwd=1, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[1]][,1], curves_list[[i]][[1]][,2], col=cols[i], lwd=1)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.8,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(curves_list[[1]][[3]][,1], curves_list[[1]][[3]][,2], col=cols[1], lwd=1, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[3]][,1], curves_list[[i]][[3]][,2], col=cols[i], lwd=1)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use proportion", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1980, 0.9, legend=variable_names, lwd=1, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
dev.copy2pdf(file=paste0("Land_use_1901-2005.pdf"))
legend(1975, 1.0, legend=variable_names, lwd=1, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")
legend(1975, 0.98, legend=variable_names, lwd=1, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")
cols = c("olivedrab3","mediumseagreen","steelblue3","orange1","tan3")#
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(curves_list[[1]][[1]][,1], curves_list[[1]][[1]][,2], col=cols[1], lwd=1, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[1]][,1], curves_list[[i]][[1]][,2], col=cols[i], lwd=1)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.8,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(curves_list[[1]][[3]][,1], curves_list[[1]][[3]][,2], col=cols[1], lwd=1, type="l", axes=F, ann=F, ylim=c(0,0.9))
for (i in 2:5) lines(curves_list[[i]][[3]][,1], curves_list[[i]][[3]][,2], col=cols[i], lwd=1)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use proportion", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1975, 0.97, legend=variable_names, lwd=1, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
dev.copy2pdf(file=paste0("Land_use_1901-2005.pdf"))
cols = c("olivedrab3","mediumseagreen","steelblue3","orange1","tan3")#
cols = c("orange1","olivedrab3","tan3","gray30","steelblue3")#
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(curves_list[[1]][[1]][,1], curves_list[[1]][[1]][,2], col=cols[1], lwd=1.5, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[1]][,1], curves_list[[i]][[1]][,2], col=cols[i], lwd=1.5)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.8,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(curves_list[[1]][[3]][,1], curves_list[[1]][[3]][,2], col=cols[1], lwd=1.5, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[3]][,1], curves_list[[i]][[3]][,2], col=cols[i], lwd=1.5)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use proportion", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1975, 0.97, legend=variable_names, lwd=1, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
dev.copy2pdf(file=paste0("Land_use_1901-2005.pdf"))
cols = c("olivedrab3","mediumseagreen","steelblue3","orange1","tan3")#
cols = c("orange1","olivedrab3","green3","gray60","steelblue3")#
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(curves_list[[1]][[1]][,1], curves_list[[1]][[1]][,2], col=cols[1], lwd=1.2, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[1]][,1], curves_list[[i]][[1]][,2], col=cols[i], lwd=1.2)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(curves_list[[1]][[3]][,1], curves_list[[1]][[3]][,2], col=cols[1], lwd=1.2, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[3]][,1], curves_list[[i]][[3]][,2], col=cols[i], lwd=1.2)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use proportion", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1975, 0.97, legend=variable_names, lwd=1.2, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
dev.copy2pdf(file=paste0("Land_use_1901-2005.pdf"))
cols = c("olivedrab3","mediumseagreen","steelblue3","orange1","tan3")#
cols = c("orange1","olivedrab3","mediumseagreen","gray60","steelblue3")#
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(curves_list[[1]][[1]][,1], curves_list[[1]][[1]][,2], col=cols[1], lwd=1.2, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[1]][,1], curves_list[[i]][[1]][,2], col=cols[i], lwd=1.2)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(curves_list[[1]][[3]][,1], curves_list[[1]][[3]][,2], col=cols[1], lwd=1.2, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[3]][,1], curves_list[[i]][[3]][,2], col=cols[i], lwd=1.2)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use proportion", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1975, 0.97, legend=variable_names, lwd=1.2, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
dev.copy2pdf(file=paste0("Land_use_1901-2005.pdf"))
cols = c("olivedrab3","mediumseagreen","steelblue3","orange1","tan3")#
cols = c("orange1","olivedrab3","mediumseagreen","gray60","steelblue3")#
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(curves_list[[1]][[1]][,1], curves_list[[1]][[1]][,2], col=cols[1], lwd=1.5, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[1]][,1], curves_list[[i]][[1]][,2], col=cols[i], lwd=1.5)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(curves_list[[1]][[3]][,1], curves_list[[1]][[3]][,2], col=cols[1], lwd=1.5, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[3]][,1], curves_list[[i]][[3]][,2], col=cols[i], lwd=1.5)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use proportion", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1975, 0.97, legend=variable_names, lwd=2, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
dev.copy2pdf(file=paste0("Land_use_1901-2005.pdf"))
analyses = c("MRU_segL","MRU_segS","NI_segL_allG","NI_segS_allG")#
mostRecentSamplingDates = c(2018.184, 2018.184, 2014.353, 2013.592)#
#
for (a in 1:length(analyses))#
	{#
		mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		covariates[[1]] = read.csv(paste0("Temp_",analyses[a],".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",analyses[a],".csv"), header=T)#
		covariates[[3]] = read.csv(paste0("Crop_",analyses[a],".csv"), header=T)#
		covariates[[4]] = read.csv(paste0("Prim_",analyses[a],".csv"), header=T)#
		covariates[[5]] = read.csv(paste0("Secd_",analyses[a],".csv"), header=T)#
		covariates[[6]] = read.csv(paste0("Past_",analyses[a],".csv"), header=T)#
		covariate_names = c(paste0("Temp_",analyses[a]), paste0("Prec_",analyses[a]))#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		if (mostRecentSamplingDatum > 2018)#
			{#
				gridPoints = gridPoints[2:length(gridPoints)]#
				# to remove 01/01/2018 as grid point (because no measure for 2018)#
			}#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}#
		timePoints = matrix(nrow=length(gridPoints)+1,ncol=1+length(covariates))#
		colnames(timePoints) = c("time",covariate_names)#
		timePoints[,1] = c(1901,rev(mostRecentSamplingDatum-gridPoints))#
		for (i in 1:dim(timePoints)[1])#
			{#
				timePoint = timePoints[i,1]#
				for (j in 1:length(covariates))#
					{#
						if (timePoint%in%covariates[[j]][,1]) timePoints[i,covariate_names[j]] = covariates[[j]][which(covariates[[j]][,1]==timePoint),2]#
					}#
			}#
		nberOfIntervals = dim(timePoints)[1]#
		txt = c()#
		txt = c(txt, paste0("\t\t<populationSizes>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.logPopSize\" dimension=\"",nberOfIntervals,"\"/>"))	#
		txt = c(txt, paste0("\t\t</populationSizes>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<lastObservedIndex>"))#
		# startingNA = rep(NA, length(covariates)); # startingNA[1] = 213#
		# txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",startingNA[1]-1,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",length(gridPoints)+1,"\"/>"))#
		if (length(covariates) > 1)#
			{#
				for (i in 2:length(covariates))#
					{#
						# indices = c(nberOfIntervals:1)[which(is.na(timePoints[,covariate_names[i]]))]; startingNA[i] = indices[length(indices)]#
						txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",i,"\" value=\"",length(gridPoints)+1,"\"/>"))#
					}#
			}#
		txt = c(txt, paste0("\t\t</lastObservedIndex>"))#
		txt = c(txt, paste0("\t\t<covariatePrecision>"))#
		for (i in 1:length(covariates))#
			{#
				maxDiff = 0#
				for (j in 2:dim(timePoints)[1])#
					{#
						if ((!is.na(as.numeric(timePoints[j,covariate_names[i]])))&(!is.na(as.numeric(timePoints[j-1,covariate_names[i]]))))#
							{#
								if (maxDiff < abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]])))#
									{#
										maxDiff = abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]]))#
									}#
							}#
					}#
				values = as.numeric(timePoints[,covariate_names[i]]); values = values[!is.na(values)]#
				covPrec = 1/((sd(values))^2)#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.covPrec.",i,"\" value=\"",covPrec,"\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</covariatePrecision>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<gridPoints>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.gridPoints\" value=\"",gridPoints_txt,"\"/>"))#
		txt = c(txt, paste0("\t\t</gridPoints>"))#
		txt = c(txt, paste0("\t\t<precisionParameter>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.precision\" value=\"1.0\" lower=\"0.0\"/>"))#
		txt = c(txt, paste0("\t\t</precisionParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<betaParameter>"))#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.beta.",i,"\" value=\"0\" lower=\"-1000\" upper=\"1000\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</betaParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<covariates>"))#
		for (i in 1:length(covariates))#
			{#
				c = 0; lastValue = "NA"; meanValue = mean(as.numeric(timePoints[,covariate_names[i]]), na.rm=T)#
				txt = c(txt, paste0("\t\t\t<matrixParameter id=\"",covariate_names[i],"\">"))#
				for (j in dim(timePoints)[1]:1)#
					{#
						c = c+1#
						if (!is.na(timePoints[j,covariate_names[i]]))#
							{#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",timePoints[j,covariate_names[i]],"\"/>"))#
								lastValue = timePoints[j,covariate_names[i]]#
							}	else	{#
								# txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",meanValue,"\" lower=\"0\"/>"))#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=NA","\" lower=\"0\"/>"))#
							}#
					}#
				txt = c(txt,"\t\t\t</matrixParameter>")#
			}#
		txt = c(txt,"\t\t</covariates>")#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1])#
					# {#
						# txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"15\">"))#
						# txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
						# txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
					# }#
				# txt = c(txt, "")#
			# }#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"30\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")	#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<normalPrior mean=\"0.0\" stdev=\"1\" offset=\"0.0\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</normalPrior>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		for (i in 1:length(covariates)) txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.gridPoints\"/>"))#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1]) txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
			# }#
		write(txt, paste0("GLM_",analyses[a],".xml"))#
	}
analyses = c("MRU_segL","MRU_segS","NI_segL_allG","NI_segS_allG")#
mostRecentSamplingDates = c(2018.184, 2018.184, 2014.353, 2013.592)#
#
for (a in 1:length(analyses))#
	{#
		mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		covariates[[1]] = read.csv(paste0("Temp_",analyses[a],".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",analyses[a],".csv"), header=T)#
		covariates[[3]] = read.csv(paste0("Crop_",analyses[a],".csv"), header=T)#
		covariates[[4]] = read.csv(paste0("Prim_",analyses[a],".csv"), header=T)#
		covariates[[5]] = read.csv(paste0("Secd_",analyses[a],".csv"), header=T)#
		covariates[[6]] = read.csv(paste0("Past_",analyses[a],".csv"), header=T)#
		covariate_names = c(paste0("Temp_",analyses[a]), paste0("Prec_",analyses[a]),#
							paste0("Crop_",analyses[a]), paste0("Prim_",analyses[a]),#
							paste0("Secd_",analyses[a]), paste0("Past_",analyses[a]))#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		if (mostRecentSamplingDatum > 2018)#
			{#
				gridPoints = gridPoints[2:length(gridPoints)]#
				# to remove 01/01/2018 as grid point (because no measure for 2018)#
			}#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}#
		timePoints = matrix(nrow=length(gridPoints)+1,ncol=1+length(covariates))#
		colnames(timePoints) = c("time",covariate_names)#
		timePoints[,1] = c(1901,rev(mostRecentSamplingDatum-gridPoints))#
		for (i in 1:dim(timePoints)[1])#
			{#
				timePoint = timePoints[i,1]#
				for (j in 1:length(covariates))#
					{#
						if (timePoint%in%covariates[[j]][,1]) timePoints[i,covariate_names[j]] = covariates[[j]][which(covariates[[j]][,1]==timePoint),2]#
					}#
			}#
		nberOfIntervals = dim(timePoints)[1]#
		txt = c()#
		txt = c(txt, paste0("\t\t<populationSizes>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.logPopSize\" dimension=\"",nberOfIntervals,"\"/>"))	#
		txt = c(txt, paste0("\t\t</populationSizes>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<lastObservedIndex>"))#
		# startingNA = rep(NA, length(covariates)); # startingNA[1] = 213#
		# txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",startingNA[1]-1,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",length(gridPoints)+1,"\"/>"))#
		if (length(covariates) > 1)#
			{#
				for (i in 2:length(covariates))#
					{#
						# indices = c(nberOfIntervals:1)[which(is.na(timePoints[,covariate_names[i]]))]; startingNA[i] = indices[length(indices)]#
						txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",i,"\" value=\"",length(gridPoints)+1,"\"/>"))#
					}#
			}#
		txt = c(txt, paste0("\t\t</lastObservedIndex>"))#
		txt = c(txt, paste0("\t\t<covariatePrecision>"))#
		for (i in 1:length(covariates))#
			{#
				maxDiff = 0#
				for (j in 2:dim(timePoints)[1])#
					{#
						if ((!is.na(as.numeric(timePoints[j,covariate_names[i]])))&(!is.na(as.numeric(timePoints[j-1,covariate_names[i]]))))#
							{#
								if (maxDiff < abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]])))#
									{#
										maxDiff = abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]]))#
									}#
							}#
					}#
				values = as.numeric(timePoints[,covariate_names[i]]); values = values[!is.na(values)]#
				covPrec = 1/((sd(values))^2)#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.covPrec.",i,"\" value=\"",covPrec,"\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</covariatePrecision>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<gridPoints>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.gridPoints\" value=\"",gridPoints_txt,"\"/>"))#
		txt = c(txt, paste0("\t\t</gridPoints>"))#
		txt = c(txt, paste0("\t\t<precisionParameter>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.precision\" value=\"1.0\" lower=\"0.0\"/>"))#
		txt = c(txt, paste0("\t\t</precisionParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<betaParameter>"))#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.beta.",i,"\" value=\"0\" lower=\"-1000\" upper=\"1000\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</betaParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<covariates>"))#
		for (i in 1:length(covariates))#
			{#
				c = 0; lastValue = "NA"; meanValue = mean(as.numeric(timePoints[,covariate_names[i]]), na.rm=T)#
				txt = c(txt, paste0("\t\t\t<matrixParameter id=\"",covariate_names[i],"\">"))#
				for (j in dim(timePoints)[1]:1)#
					{#
						c = c+1#
						if (!is.na(timePoints[j,covariate_names[i]]))#
							{#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",timePoints[j,covariate_names[i]],"\"/>"))#
								lastValue = timePoints[j,covariate_names[i]]#
							}	else	{#
								# txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",meanValue,"\" lower=\"0\"/>"))#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=NA","\" lower=\"0\"/>"))#
							}#
					}#
				txt = c(txt,"\t\t\t</matrixParameter>")#
			}#
		txt = c(txt,"\t\t</covariates>")#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1])#
					# {#
						# txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"15\">"))#
						# txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
						# txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
					# }#
				# txt = c(txt, "")#
			# }#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"30\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")	#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<normalPrior mean=\"0.0\" stdev=\"1\" offset=\"0.0\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</normalPrior>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		for (i in 1:length(covariates)) txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.gridPoints\"/>"))#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1]) txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
			# }#
		write(txt, paste0("GLM_",analyses[a],".xml"))#
	}
analyses = c("MRU_segL","MRU_segS","NI_segL_allG","NI_segS_allG")#
mostRecentSamplingDates = c(2018.184, 2018.184, 2014.353, 2013.592)#
#
for (a in 1:length(analyses))#
	{#
		mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		covariates[[1]] = read.csv(paste0("Temp_",analyses[a],".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",analyses[a],".csv"), header=T)#
		covariates[[3]] = read.csv(paste0("Crop_",analyses[a],".csv"), header=T)#
		covariates[[4]] = read.csv(paste0("Prim_",analyses[a],".csv"), header=T)#
		covariates[[5]] = read.csv(paste0("Secd_",analyses[a],".csv"), header=T)#
		covariates[[6]] = read.csv(paste0("Past_",analyses[a],".csv"), header=T)#
		covariate_names = c(paste0("Temp_",analyses[a]), paste0("Prec_",analyses[a]),#
							paste0("Crop_",analyses[a]), paste0("Prim_",analyses[a]),#
							paste0("Secd_",analyses[a]), paste0("Past_",analyses[a]))#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		if (mostRecentSamplingDatum > 2018)#
			{#
				gridPoints = gridPoints[2:length(gridPoints)]#
				# to remove 01/01/2018 as grid point (because no measure for 2018)#
			}#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}#
		timePoints = matrix(nrow=length(gridPoints)+1,ncol=1+length(covariates))#
		colnames(timePoints) = c("time",covariate_names)#
		timePoints[,1] = c(1901,rev(mostRecentSamplingDatum-gridPoints))#
		for (i in 1:dim(timePoints)[1])#
			{#
				timePoint = timePoints[i,1]#
				for (j in 1:length(covariates))#
					{#
						if (timePoint%in%covariates[[j]][,1]) timePoints[i,covariate_names[j]] = covariates[[j]][which(covariates[[j]][,1]==timePoint),2]#
					}#
			}#
		nberOfIntervals = dim(timePoints)[1]#
		txt = c()#
		txt = c(txt, paste0("\t\t<populationSizes>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.logPopSize\" dimension=\"",nberOfIntervals,"\"/>"))	#
		txt = c(txt, paste0("\t\t</populationSizes>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<lastObservedIndex>"))#
		# startingNA = rep(NA, length(covariates)); # startingNA[1] = 213#
		# txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",startingNA[1]-1,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",length(gridPoints)+1,"\"/>"))#
		if (length(covariates) > 1)#
			{#
				for (i in 2:length(covariates))#
					{#
						# indices = c(nberOfIntervals:1)[which(is.na(timePoints[,covariate_names[i]]))]; startingNA[i] = indices[length(indices)]#
						txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",i,"\" value=\"",length(gridPoints)+1,"\"/>"))#
					}#
			}#
		txt = c(txt, paste0("\t\t</lastObservedIndex>"))#
		txt = c(txt, paste0("\t\t<covariatePrecision>"))#
		for (i in 1:length(covariates))#
			{#
				maxDiff = 0#
				for (j in 2:dim(timePoints)[1])#
					{#
						if ((!is.na(as.numeric(timePoints[j,covariate_names[i]])))&(!is.na(as.numeric(timePoints[j-1,covariate_names[i]]))))#
							{#
								if (maxDiff < abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]])))#
									{#
										maxDiff = abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]]))#
									}#
							}#
					}#
				values = as.numeric(timePoints[,covariate_names[i]]); values = values[!is.na(values)]#
				covPrec = 1/((sd(values))^2)#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.covPrec.",i,"\" value=\"",covPrec,"\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</covariatePrecision>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<gridPoints>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.gridPoints\" value=\"",gridPoints_txt,"\"/>"))#
		txt = c(txt, paste0("\t\t</gridPoints>"))#
		txt = c(txt, paste0("\t\t<precisionParameter>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.precision\" value=\"1.0\" lower=\"0.0\"/>"))#
		txt = c(txt, paste0("\t\t</precisionParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<betaParameter>"))#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.beta.",i,"\" value=\"0\" lower=\"-1000\" upper=\"1000\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</betaParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<covariates>"))#
		for (i in 1:length(covariates))#
			{#
				c = 0; lastValue = "NA"; meanValue = mean(as.numeric(timePoints[,covariate_names[i]]), na.rm=T)#
				txt = c(txt, paste0("\t\t\t<matrixParameter id=\"",covariate_names[i],"\">"))#
				for (j in dim(timePoints)[1]:1)#
					{#
						c = c+1#
						if (!is.na(timePoints[j,covariate_names[i]]))#
							{#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",timePoints[j,covariate_names[i]],"\"/>"))#
								lastValue = timePoints[j,covariate_names[i]]#
							}	else	{#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",meanValue,"\" lower=\"0\"/>"))#
								# txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=NA","\" lower=\"0\"/>"))#
							}#
					}#
				txt = c(txt,"\t\t\t</matrixParameter>")#
			}#
		txt = c(txt,"\t\t</covariates>")#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1])#
					# {#
						# txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"15\">"))#
						# txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
						# txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
					# }#
				# txt = c(txt, "")#
			# }#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"30\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")	#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<normalPrior mean=\"0.0\" stdev=\"1\" offset=\"0.0\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</normalPrior>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		for (i in 1:length(covariates)) txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.gridPoints\"/>"))#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1]) txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
			# }#
		write(txt, paste0("GLM_",analyses[a],".xml"))#
	}
timePoints
analyses = c("MRU_segL","MRU_segS","NI_segL_allG","NI_segS_allG")#
mostRecentSamplingDates = c(2018.184, 2018.184, 2014.353, 2013.592)#
#
for (a in 1:length(analyses))#
	{#
		mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		covariates[[1]] = read.csv(paste0("Temp_",analyses[a],".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",analyses[a],".csv"), header=T)#
		covariates[[3]] = read.csv(paste0("Crop_",analyses[a],".csv"), header=T)#
		covariates[[4]] = read.csv(paste0("Prim_",analyses[a],".csv"), header=T)#
		covariates[[5]] = read.csv(paste0("Secd_",analyses[a],".csv"), header=T)#
		covariates[[6]] = read.csv(paste0("Past_",analyses[a],".csv"), header=T)#
		covariate_names = c(paste0("Temp_",analyses[a]), paste0("Prec_",analyses[a]),#
							paste0("Crop_",analyses[a]), paste0("Prim_",analyses[a]),#
							paste0("Secd_",analyses[a]), paste0("Past_",analyses[a]))#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		if (mostRecentSamplingDatum > 2018)#
			{#
				gridPoints = gridPoints[2:length(gridPoints)]#
				# to remove 01/01/2018 as grid point (because no measure for 2018)#
			}#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}#
		timePoints = matrix(nrow=length(gridPoints)+1,ncol=1+length(covariates))#
		colnames(timePoints) = c("time",covariate_names)#
		timePoints[,1] = c(1901,rev(mostRecentSamplingDatum-gridPoints))#
		for (i in 1:dim(timePoints)[1])#
			{#
				timePoint = timePoints[i,1]#
				for (j in 1:length(covariates))#
					{#
						if (timePoint%in%covariates[[j]][,1]) timePoints[i,covariate_names[j]] = covariates[[j]][which(covariates[[j]][,1]==timePoint),2]#
					}#
			}#
		nberOfIntervals = dim(timePoints)[1]#
		txt = c()#
		txt = c(txt, paste0("\t\t<populationSizes>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.logPopSize\" dimension=\"",nberOfIntervals,"\"/>"))	#
		txt = c(txt, paste0("\t\t</populationSizes>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<lastObservedIndex>"))#
		# startingNA = rep(NA, length(covariates)); # startingNA[1] = 213#
		# txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",startingNA[1]-1,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",length(gridPoints)+1,"\"/>"))#
		if (length(covariates) > 1)#
			{#
				for (i in 2:length(covariates))#
					{#
						# indices = c(nberOfIntervals:1)[which(is.na(timePoints[,covariate_names[i]]))]; startingNA[i] = indices[length(indices)]#
						txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",i,"\" value=\"",length(gridPoints)+1,"\"/>"))#
					}#
			}#
		txt = c(txt, paste0("\t\t</lastObservedIndex>"))#
		txt = c(txt, paste0("\t\t<covariatePrecision>"))#
		for (i in 1:length(covariates))#
			{#
				maxDiff = 0#
				for (j in 2:dim(timePoints)[1])#
					{#
						if ((!is.na(as.numeric(timePoints[j,covariate_names[i]])))&(!is.na(as.numeric(timePoints[j-1,covariate_names[i]]))))#
							{#
								if (maxDiff < abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]])))#
									{#
										maxDiff = abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]]))#
									}#
							}#
					}#
				values = as.numeric(timePoints[,covariate_names[i]]); values = values[!is.na(values)]#
				covPrec = 1/((sd(values))^2)#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.covPrec.",i,"\" value=\"",covPrec,"\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</covariatePrecision>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<gridPoints>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.gridPoints\" value=\"",gridPoints_txt,"\"/>"))#
		txt = c(txt, paste0("\t\t</gridPoints>"))#
		txt = c(txt, paste0("\t\t<precisionParameter>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.precision\" value=\"1.0\" lower=\"0.0\"/>"))#
		txt = c(txt, paste0("\t\t</precisionParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<betaParameter>"))#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.beta.",i,"\" value=\"0\" lower=\"-1000\" upper=\"1000\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</betaParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<covariates>"))#
		for (i in 1:length(covariates))#
			{#
				c = 0; lastValue = "NA"; meanValue = mean(as.numeric(timePoints[,covariate_names[i]]), na.rm=T)#
				txt = c(txt, paste0("\t\t\t<matrixParameter id=\"",covariate_names[i],"\">"))#
				for (j in dim(timePoints)[1]:1)#
					{#
						c = c+1#
						if (!is.na(timePoints[j,covariate_names[i]]))#
							{#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",timePoints[j,covariate_names[i]],"\"/>"))#
								lastValue = timePoints[j,covariate_names[i]]#
							}	else	{#
								startValue = timePoints[max(which(!is.na(timePoints[,covariate_names[i]]))),covariate_names[i]]#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",startValue,"\" lower=\"0\"/>"))#
								# txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=NA","\" lower=\"0\"/>"))#
							}#
					}#
				txt = c(txt,"\t\t\t</matrixParameter>")#
			}#
		txt = c(txt,"\t\t</covariates>")#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1])#
					# {#
						# txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"15\">"))#
						# txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
						# txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
					# }#
				# txt = c(txt, "")#
			# }#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"30\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")	#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<normalPrior mean=\"0.0\" stdev=\"1\" offset=\"0.0\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</normalPrior>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		for (i in 1:length(covariates)) txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.gridPoints\"/>"))#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1]) txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
			# }#
		write(txt, paste0("GLM_",analyses[a],".xml"))#
	}
# Script to prepare past land use estimates based on data from the Harmonized Global Land Use for Years 1500-2100 (V1)#
# Source: https://daac.ornl.gov/VEGETATION/guides/Land_Use_Harmonization_V1.html#
# "We obtained scenarios of 21st century land-use from the Land-Use Harmonization project (i.e. LUHa_u2t1.v1; http://luh.umd.edu; #
# Hurtt et al. (2011) Harmonization of land-use scenarios for the period 1500–2100: 600 years of global gridded annual land-use #
# transitions, wood harvest, and resulting secondary land. Climatic Change 109: 117–161)"#
#
library(ncdf4)#
library(rgdal)#
#
selected_years = c(1901:2005); curves_list = list()#
xMin = -16; xMax = 16; yMin = 3; yMax = 15#
variables = c("gcrop","gothr","gsecd","gpast","gurbn")#
suffixes = c("Crop","Prim","Secd","Past","Urbn")#
variable_names = c("cropland","primary land","secondary land","pasture","urban land")#
for (h in 1:length(variables))#
	{#
		nc = nc_open(paste0("Land_use_for_1500-2100/LUHa_u2t1.v1_",variables[h],".nc4"))#
		time = ncvar_get(nc,"time")#
		lon = ncvar_get(nc,"lon")#
		lat = ncvar_get(nc,"lat")#
		if (h == 1) var1 = ncvar_get(nc,"prop_crop")#
		if (h == 2) var1 = ncvar_get(nc,"prop_primary")#
		if (h == 3) var1 = ncvar_get(nc,"prop_secd")#
		if (h == 4) var1 = ncvar_get(nc,"prop_pasture")#
		if (h == 5) var1 = ncvar_get(nc,"prop_urbn")#
		var2 = c()#
		indices1 = which((lon>xMin)&(lon<xMax))#
		indices2 = which((lat>yMin)&(lat<yMax))#
		lon = lon[indices1]; lat = lat[indices2]#
		var1 = var1[indices1,indices2,]#
		years = time+1700; n = 0#
		tot = dim(var1)[1]*dim(var1)[2]#
		for (i in 1:dim(var1)[1])#
			{#
				for (j in 1:dim(var1)[2])#
					{#
						n = n+1; # print(paste0(n,"/",tot))#
						row = cbind(lon[i],lat[j],t(var1[i,j,]))#
						var2 = rbind(var2, row)#
					}#
			}#
		colnames(var2) = c("longitude","latitude",years); curves = list()#
		# write.csv(var2, paste0("CRU_",variables[h],".csv"), row.names=F, quote=F)#
			# }	else		{#
				# var2 = read.csv(paste0("CRU_",variables[h],".csv"), header=T)#
			# }#
		analyses = c("LASV2_MRU_segL","LASV2_MRU_segS","LASV2_NI_segL_allG","LASV2_NI_segS_allG")#
		for (i in 1:length(analyses))#
			{#
				values = matrix(nrow=length(selected_years), ncol=2)#
				for (y in 1:length(selected_years))#
					{#
						buffer = var2[,3:dim(var2)[2]]; colNames = gsub("X","",colnames(buffer))#
						selectedMeasures = cbind(var2[,1:2],buffer[,which(floor(as.numeric(colNames))==selected_years[y])])#
						hull = readOGR(dsn="Minimum_convex_hulls2", layer=paste0(analyses[i],"_",selected_years[y]))#
						inHull = point.in.polygon(selectedMeasures[,"longitude"],selectedMeasures[,"latitude"],#
								 		   		  hull@polygons[[1]]@Polygons[[1]]@coords[,1],#
								 		   		  hull@polygons[[1]]@Polygons[[1]]@coords[,2])#
						indices = which(inHull==1); values[y,1] = selected_years[y]#
						values[y,2] = mean(as.matrix(selectedMeasures[indices,3:dim(selectedMeasures)[2]]), na.rm=T)#
					}#
				curves[[i]] = values; colnames(values) = c("time",variables[h])#
				write.csv(values, paste0(gsub("LASV2",suffixes[h],analyses[i]),".csv"), row.names=F)#
			}#
		curves_list[[h]] = curves#
	}#
#
for (h in 1:length(variables))#
	{#
		curves = list()#
		analyses = c("LASV2_MRU_segL","LASV2_MRU_segS","LASV2_NI_segL_allG","LASV2_NI_segS_allG")#
		for (i in 1:length(analyses))#
			{#
				curves[[i]] = read.csv(paste0(gsub("LASV2",suffixes[h],analyses[i]),".csv"), header=T)#
			}#
		curves_list[[h]] = curves#
	}
curves_list[[h]]
analyses = c("LASV2_MRU_segL","LASV2_MRU_segS","LASV2_NI_segL_allG","LASV2_NI_segS_allG")#
for (h in 1:length(variables))#
	{#
		curves = list()#
		for (i in 1:length(analyses))#
			{#
				curves[[i]] = read.csv(paste0(gsub("LASV2",suffixes[h],analyses[i]),".csv"), header=T)#
			}#
		curves_list[[h]] = curves#
	}#
entropies = list()
curves = list()#
		for (h in 1:length(variables))#
			{#
				curves[[h]] = curves_list[[h]][[i]]#
			}
curves
proportions = matrix(norw=dim(curves_list[[h]][[1]])[1], ncol=5)#
		proportions[,1] = curves_list[[h]][[1]][,1]#
		for (h in 1:length(variables))#
			{#
				proportions[,h+1] = curves_list[[h]][[i]][,2]#
			}
i=1
entropies = list()
proportions = matrix(norw=dim(curves_list[[1]][[i]])[1], ncol=5)#
		proportions[,1] = curves_list[[1]][[i]][,1]
i=1
proportions = matrix(norw=dim(curves_list[[1]][[i]])[1], ncol=5)
dim(curves_list[[1]][[i]])[1]
proportions = matrix(nrow=dim(curves_list[[1]][[i]])[1], ncol=5)
proportions[,1] = curves_list[[1]][[i]][,1]
for (h in 1:length(variables))#
			{#
				proportions[,h+1] = curves_list[[h]][[i]][,2]#
			}
proportions[,h+1]
proportions = matrix(nrow=dim(curves_list[[1]][[i]])[1], ncol=length(variables)+1)
proportions[,1] = curves_list[[1]][[i]][,1]
for (h in 1:length(variables))#
			{#
				proportions[,h+1] = curves_list[[h]][[i]][,2]#
			}
curves_list[[h]] = curves
proportions = matrix(nrow=dim(curves_list[[1]][[i]])[1], ncol=length(variables)+1)#
		proportions[,1] = curves_list[[1]][[i]][,1]#
		for (h in 1:length(variables))#
			{#
				proportions[,h+1] = curves_list[[h]][[i]][,2]#
			}#
		entropy = matrix(nrow=dim(proportions)[1], ncol=2); entropy[,1] = proportions[,1]#
		for (j in 1:dim(proportions)[1])#
			{#
				p = 0#
				for (k in 2:dim(proportions)[2])#
					{#
						p_i = proportions[j,k]#
						p = p - ((p_i)*(log(p_i)))#
					}#
				entropy[j,2] = p#
			}#
		entropies[[i]] = entropy
entropy
entropies = list()#
for (i in 1:length(analyses))#
	{#
		proportions = matrix(nrow=dim(curves_list[[1]][[i]])[1], ncol=length(variables)+1)#
		proportions[,1] = curves_list[[1]][[i]][,1]#
		for (h in 1:length(variables))#
			{#
				proportions[,h+1] = curves_list[[h]][[i]][,2]#
			}#
		entropy = matrix(nrow=dim(proportions)[1], ncol=2); entropy[,1] = proportions[,1]#
		for (j in 1:dim(proportions)[1])#
			{#
				p = 0#
				for (k in 2:dim(proportions)[2])#
					{#
						p_i = proportions[j,k]#
						p = p - ((p_i)*(log(p_i)))#
					}#
				entropy[j,2] = p#
			}#
		entropies[[i]] = entropy; colnames(values) = c("time","entropy")#
		write.csv(values, paste0(gsub("LASV2","Enty",analyses[i]),".csv"), row.names=F)#
	}#
cols = c("olivedrab3","mediumseagreen","steelblue3","orange1","tan3")#
cols = c("orange1","olivedrab3","mediumseagreen","gray60","steelblue3")#
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(curves_list[[1]][[1]][,1], curves_list[[1]][[1]][,2], col=cols[1], lwd=1.5, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[1]][,1], curves_list[[i]][[1]][,2], col=cols[i], lwd=1.5)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(curves_list[[1]][[3]][,1], curves_list[[1]][[3]][,2], col=cols[1], lwd=1.5, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[3]][,1], curves_list[[i]][[3]][,2], col=cols[i], lwd=1.5)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use proportion", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1975, 0.97, legend=variable_names, lwd=2, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
dev.copy2pdf(file=paste0("Land_use_1901-2005.pdf"))#
#
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(entropies[[1]][,1], entropies[[1]][,2], col="red", lwd=1.5, type="l", axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30")#, at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(entropies[[3]][,1], entropies[[3]][,2], col="red", lwd=1.5, type="l", axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30")#, at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use proportion", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1975, 0.97, legend=variable_names, lwd=2, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
dev.copy2pdf(file=paste0("Entropy_1901-2005.pdf"))
cols = c("olivedrab3","mediumseagreen","steelblue3","orange1","tan3")#
cols = c("orange1","olivedrab3","mediumseagreen","gray60","steelblue3")#
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(curves_list[[1]][[1]][,1], curves_list[[1]][[1]][,2], col=cols[1], lwd=1.5, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[1]][,1], curves_list[[i]][[1]][,2], col=cols[i], lwd=1.5)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use proportion", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(curves_list[[1]][[3]][,1], curves_list[[1]][[3]][,2], col=cols[1], lwd=1.5, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[3]][,1], curves_list[[i]][[3]][,2], col=cols[i], lwd=1.5)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use proportion", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1975, 0.97, legend=variable_names, lwd=2, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
dev.copy2pdf(file=paste0("Land_use_1901-2005.pdf"))#
#
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(entropies[[1]][,1], entropies[[1]][,2], col="red", lwd=1.5, type="l", axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30")#, at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use entropy", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(entropies[[3]][,1], entropies[[3]][,2], col="red", lwd=1.5, type="l", axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30")#, at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use entropy", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1975, 0.97, legend=variable_names, lwd=2, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
dev.copy2pdf(file=paste0("Entropy_1901-2005.pdf"))
entropies[[3]]
i=3
proportions = matrix(nrow=dim(curves_list[[1]][[i]])[1], ncol=length(variables)+1)#
		proportions[,1] = curves_list[[1]][[i]][,1]#
		for (h in 1:length(variables))#
			{#
				proportions[,h+1] = curves_list[[h]][[i]][,2]#
			}
proportions
entropies = list()#
for (i in 1:length(analyses))#
	{#
		proportions = matrix(nrow=dim(curves_list[[1]][[i]])[1], ncol=length(variables)+1)#
		proportions[,1] = curves_list[[1]][[i]][,1]#
		for (h in 1:length(variables))#
			{#
				proportions[,h+1] = curves_list[[h]][[i]][,2]#
			}#
		entropy = matrix(nrow=dim(proportions)[1], ncol=2); entropy[,1] = proportions[,1]#
		for (j in 1:dim(proportions)[1])#
			{#
				p = 0#
				for (k in 2:dim(proportions)[2])#
					{#
						if (proportions[i] != 0)#
							{#
								p_i = proportions[j,k]#
								p = p - ((p_i)*(log(p_i)))#
							}#
					}#
				entropy[j,2] = p#
			}#
		entropies[[i]] = entropy; colnames(values) = c("time","entropy")#
		write.csv(values, paste0(gsub("LASV2","Enty",analyses[i]),".csv"), row.names=F)#
	}#
#
cols = c("olivedrab3","mediumseagreen","steelblue3","orange1","tan3")#
cols = c("orange1","olivedrab3","mediumseagreen","gray60","steelblue3")#
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(curves_list[[1]][[1]][,1], curves_list[[1]][[1]][,2], col=cols[1], lwd=1.5, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[1]][,1], curves_list[[i]][[1]][,2], col=cols[i], lwd=1.5)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use proportion", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(curves_list[[1]][[3]][,1], curves_list[[1]][[3]][,2], col=cols[1], lwd=1.5, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[3]][,1], curves_list[[i]][[3]][,2], col=cols[i], lwd=1.5)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use proportion", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1975, 0.97, legend=variable_names, lwd=2, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
dev.copy2pdf(file=paste0("Land_use_1901-2005.pdf"))#
#
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(entropies[[1]][,1], entropies[[1]][,2], col="red", lwd=1.5, type="l", axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30")#, at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use entropy", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(entropies[[3]][,1], entropies[[3]][,2], col="red", lwd=1.5, type="l", axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30")#, at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use entropy", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1975, 0.97, legend=variable_names, lwd=2, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
dev.copy2pdf(file=paste0("Entropy_1901-2005.pdf"))
i
length(analyses)
i=4
analyses = c("LASV2_MRU_segL","LASV2_MRU_segS","LASV2_NI_segL_allG","LASV2_NI_segS_allG")#
for (h in 1:length(variables))#
	{#
		curves = list()#
		for (i in 1:length(analyses))#
			{#
				curves[[i]] = read.csv(paste0(gsub("LASV2",suffixes[h],analyses[i]),".csv"), header=T)#
			}#
		curves_list[[h]] = curves#
	}#
entropies = list()#
for (i in 1:length(analyses))#
	{#
		proportions = matrix(nrow=dim(curves_list[[1]][[i]])[1], ncol=length(variables)+1)#
		proportions[,1] = curves_list[[1]][[i]][,1]#
		for (h in 1:length(variables))#
			{#
				proportions[,h+1] = curves_list[[h]][[i]][,2]#
			}#
		entropy = matrix(nrow=dim(proportions)[1], ncol=2); entropy[,1] = proportions[,1]#
		for (j in 1:dim(proportions)[1])#
			{#
				p = 0#
				for (k in 2:dim(proportions)[2])#
					{#
						if (proportions[j,k] != 0)#
							{#
								p_i = proportions[j,k]#
								p = p - ((p_i)*(log(p_i)))#
							}#
					}#
				entropy[j,2] = p#
			}#
		entropies[[i]] = entropy; colnames(values) = c("time","entropy")#
		write.csv(values, paste0(gsub("LASV2","Enty",analyses[i]),".csv"), row.names=F)#
	}#
#
cols = c("olivedrab3","mediumseagreen","steelblue3","orange1","tan3")#
cols = c("orange1","olivedrab3","mediumseagreen","gray60","steelblue3")#
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(curves_list[[1]][[1]][,1], curves_list[[1]][[1]][,2], col=cols[1], lwd=1.5, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[1]][,1], curves_list[[i]][[1]][,2], col=cols[i], lwd=1.5)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use proportion", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(curves_list[[1]][[3]][,1], curves_list[[1]][[3]][,2], col=cols[1], lwd=1.5, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[3]][,1], curves_list[[i]][[3]][,2], col=cols[i], lwd=1.5)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use proportion", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1975, 0.97, legend=variable_names, lwd=2, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
dev.copy2pdf(file=paste0("Land_use_1901-2005.pdf"))#
#
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(entropies[[1]][,1], entropies[[1]][,2], col="red", lwd=1.5, type="l", axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30")#, at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use entropy", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(entropies[[3]][,1], entropies[[3]][,2], col="red", lwd=1.5, type="l", axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30")#, at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use entropy", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1975, 0.97, legend=variable_names, lwd=2, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
dev.copy2pdf(file=paste0("Entropy_1901-2005.pdf"))
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(entropies[[1]][,1], entropies[[1]][,2], col="red", lwd=1.5, type="l", axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1.05,1.20,0.05))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use entropy", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(entropies[[3]][,1], entropies[[3]][,2], col="red", lwd=1.5, type="l", axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use entropy", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1975, 0.97, legend=variable_names, lwd=2, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
dev.copy2pdf(file=paste0("Entropy_1901-2005.pdf"))
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(entropies[[1]][,1], entropies[[1]][,2], col="red", lwd=1.5, type="l", axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0.80,1.10,0.05))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use entropy", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(entropies[[3]][,1], entropies[[3]][,2], col="red", lwd=1.5, type="l", axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1.05,1.12,0.01))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use entropy", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1975, 0.97, legend=variable_names, lwd=2, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
dev.copy2pdf(file=paste0("Entropy_1901-2005.pdf"))
cols = c("olivedrab3","mediumseagreen","steelblue3","orange1","tan3")#
cols = c("orange1","olivedrab3","mediumseagreen","gray60","steelblue3")#
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(curves_list[[1]][[1]][,1], curves_list[[1]][[1]][,2], col=cols[1], lwd=1.5, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[1]][,1], curves_list[[i]][[1]][,2], col=cols[i], lwd=1.5)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use proportion", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(curves_list[[1]][[3]][,1], curves_list[[1]][[3]][,2], col=cols[1], lwd=1.5, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[3]][,1], curves_list[[i]][[3]][,2], col=cols[i], lwd=1.5)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use proportion", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1975, 0.97, legend=variable_names, lwd=2, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
dev.copy2pdf(file=paste0("Land_use_1901-2005.pdf"))
analyses = c("MRU_segL","MRU_segS","NI_segL_allG","NI_segS_allG")#
mostRecentSamplingDates = c(2018.184, 2018.184, 2014.353, 2013.592)
analyses = c("MRU_segL","MRU_segS","NI_segL_allG","NI_segS_allG")#
mostRecentSamplingDates = c(2018.184, 2018.184, 2014.353, 2013.592)#
#
for (a in 1:length(analyses))#
	{#
		mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		covariates[[1]] = read.csv(paste0("Temp_",analyses[a],".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",analyses[a],".csv"), header=T)#
		covariates[[3]] = read.csv(paste0("Enty_",analyses[a],".csv"), header=T)#
		# covariates[[3]] = read.csv(paste0("Crop_",analyses[a],".csv"), header=T)#
		# covariates[[4]] = read.csv(paste0("Prim_",analyses[a],".csv"), header=T)#
		# covariates[[5]] = read.csv(paste0("Secd_",analyses[a],".csv"), header=T)#
		# covariates[[6]] = read.csv(paste0("Past_",analyses[a],".csv"), header=T)#
		covariate_names = c(paste0("Temp_",analyses[a]), paste0("Prec_",analyses[a]), paste0("Enty_",analyses[a]))#
							# paste0("Crop_",analyses[a]), paste0("Prim_",analyses[a]),#
							# paste0("Secd_",analyses[a]), paste0("Past_",analyses[a]))#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		if (mostRecentSamplingDatum > 2018)#
			{#
				gridPoints = gridPoints[2:length(gridPoints)]#
				# to remove 01/01/2018 as grid point (because no measure for 2018)#
			}#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}#
		timePoints = matrix(nrow=length(gridPoints)+1,ncol=1+length(covariates))#
		colnames(timePoints) = c("time",covariate_names)#
		timePoints[,1] = c(1901,rev(mostRecentSamplingDatum-gridPoints))#
		for (i in 1:dim(timePoints)[1])#
			{#
				timePoint = timePoints[i,1]#
				for (j in 1:length(covariates))#
					{#
						if (timePoint%in%covariates[[j]][,1]) timePoints[i,covariate_names[j]] = covariates[[j]][which(covariates[[j]][,1]==timePoint),2]#
					}#
			}#
		nberOfIntervals = dim(timePoints)[1]#
		txt = c()#
		txt = c(txt, paste0("\t\t<populationSizes>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.logPopSize\" dimension=\"",nberOfIntervals,"\"/>"))	#
		txt = c(txt, paste0("\t\t</populationSizes>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<lastObservedIndex>"))#
		# startingNA = rep(NA, length(covariates)); # startingNA[1] = 213#
		# txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",startingNA[1]-1,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",length(gridPoints)+1,"\"/>"))#
		if (length(covariates) > 1)#
			{#
				for (i in 2:length(covariates))#
					{#
						# indices = c(nberOfIntervals:1)[which(is.na(timePoints[,covariate_names[i]]))]; startingNA[i] = indices[length(indices)]#
						txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",i,"\" value=\"",length(gridPoints)+1,"\"/>"))#
					}#
			}#
		txt = c(txt, paste0("\t\t</lastObservedIndex>"))#
		txt = c(txt, paste0("\t\t<covariatePrecision>"))#
		for (i in 1:length(covariates))#
			{#
				maxDiff = 0#
				for (j in 2:dim(timePoints)[1])#
					{#
						if ((!is.na(as.numeric(timePoints[j,covariate_names[i]])))&(!is.na(as.numeric(timePoints[j-1,covariate_names[i]]))))#
							{#
								if (maxDiff < abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]])))#
									{#
										maxDiff = abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]]))#
									}#
							}#
					}#
				values = as.numeric(timePoints[,covariate_names[i]]); values = values[!is.na(values)]#
				covPrec = 1/((sd(values))^2)#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.covPrec.",i,"\" value=\"",covPrec,"\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</covariatePrecision>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<gridPoints>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.gridPoints\" value=\"",gridPoints_txt,"\"/>"))#
		txt = c(txt, paste0("\t\t</gridPoints>"))#
		txt = c(txt, paste0("\t\t<precisionParameter>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.precision\" value=\"1.0\" lower=\"0.0\"/>"))#
		txt = c(txt, paste0("\t\t</precisionParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<betaParameter>"))#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.beta.",i,"\" value=\"0\" lower=\"-1000\" upper=\"1000\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</betaParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<covariates>"))#
		for (i in 1:length(covariates))#
			{#
				c = 0; lastValue = "NA"; meanValue = mean(as.numeric(timePoints[,covariate_names[i]]), na.rm=T)#
				txt = c(txt, paste0("\t\t\t<matrixParameter id=\"",covariate_names[i],"\">"))#
				for (j in dim(timePoints)[1]:1)#
					{#
						c = c+1#
						if (!is.na(timePoints[j,covariate_names[i]]))#
							{#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",timePoints[j,covariate_names[i]],"\"/>"))#
								lastValue = timePoints[j,covariate_names[i]]#
							}	else	{#
								startValue = timePoints[max(which(!is.na(timePoints[,covariate_names[i]]))),covariate_names[i]]#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",startValue,"\" lower=\"0\"/>"))#
								# txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=NA","\" lower=\"0\"/>"))#
							}#
					}#
				txt = c(txt,"\t\t\t</matrixParameter>")#
			}#
		txt = c(txt,"\t\t</covariates>")#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1])#
					# {#
						# txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"15\">"))#
						# txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
						# txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
					# }#
				# txt = c(txt, "")#
			# }#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"30\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")	#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<normalPrior mean=\"0.0\" stdev=\"1\" offset=\"0.0\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</normalPrior>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		for (i in 1:length(covariates)) txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.gridPoints\"/>"))#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1]) txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
			# }#
		write(txt, paste0("GLM_",analyses[a],".xml"))#
	}
library(ncdf4)#
library(rgdal)#
#
xMin = -16; xMax = 16; yMin = 3; yMax = 15#
#
daysPerNormalYear = 365#
daysInALeapYear = 366#
cumulativeNberOfDays = c(0)#
nberOfDays = 0; n = 0#
for (i in 1:117)#
	{#
		n = n+1#
		if (n == 4)#
			{#
				n = 0#
				daysInTheYear = daysInALeapYear#
			}	else 	{#
				daysInTheYear = daysPerNormalYear#
			}#
		nberOfDays = nberOfDays+daysInTheYear#
		cumulativeNberOfDays = c(cumulativeNberOfDays, nberOfDays)#
	}
install.packages("ncdf4")
library(ncdf4)#
library(rgdal)#
#
xMin = -16; xMax = 16; yMin = 3; yMax = 15#
#
daysPerNormalYear = 365#
daysInALeapYear = 366#
cumulativeNberOfDays = c(0)#
nberOfDays = 0; n = 0#
for (i in 1:117)#
	{#
		n = n+1#
		if (n == 4)#
			{#
				n = 0#
				daysInTheYear = daysInALeapYear#
			}	else 	{#
				daysInTheYear = daysPerNormalYear#
			}#
		nberOfDays = nberOfDays+daysInTheYear#
		cumulativeNberOfDays = c(cumulativeNberOfDays, nberOfDays)#
	}
analyses = c("L_2_MRU","S_2_MRU","L_2_NIG","S_2_NGA")#
mostRecentSamplingDates = c(-9999, -9999, 2018.1671232876713, 2019.1780821917807)
a = 3
mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		covariates[[1]] = read.csv(paste0("Temp_",analyses[a],".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",analyses[a],".csv"), header=T)#
		covariates[[3]] = read.csv(paste0("Enty_",analyses[a],".csv"), header=T)#
		# covariates[[3]] = read.csv(paste0("Crop_",analyses[a],".csv"), header=T)#
		# covariates[[4]] = read.csv(paste0("Prim_",analyses[a],".csv"), header=T)#
		# covariates[[5]] = read.csv(paste0("Secd_",analyses[a],".csv"), header=T)#
		# covariates[[6]] = read.csv(paste0("Past_",analyses[a],".csv"), header=T)#
		covariate_names = c(paste0("Temp_",analyses[a]), paste0("Prec_",analyses[a]), paste0("Enty_",analyses[a]))#
							# paste0("Crop_",analyses[a]), paste0("Prim_",analyses[a]),#
							# paste0("Secd_",analyses[a]), paste0("Past_",analyses[a]))#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)
gridPoints
rev(1902:floor(mostRecentSamplingDatum)),4)
rev(1902:floor(mostRecentSamplingDatum))
studyArea = unlist(strsplit(analyses[i],"_"))[length(unlist(strsplit(analyses[i],"_")))]
studyArea = unlist(strsplit(analyses[a],"_"))[length(unlist(strsplit(analyses[a],"_")))]
studyArea
analyses = c("L_2_MRU","S_2_MRU","L_2_NGA","S_2_NGA")
mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		studyArea = unlist(strsplit(analyses[a],"_"))[length(unlist(strsplit(analyses[a],"_")))]
mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		studyArea = unlist(strsplit(analyses[a],"_"))[length(unlist(strsplit(analyses[a],"_")))]#
		covariates[[1]] = read.csv(paste0("Temp_",studyArea,".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",studyArea,".csv"), header=T)#
		covariates[[3]] = read.csv(paste0("Enty_",studyArea,".csv"), header=T)#
		# covariates[[3]] = read.csv(paste0("Crop_",studyArea,".csv"), header=T)#
		# covariates[[4]] = read.csv(paste0("Prim_",studyArea,".csv"), header=T)#
		# covariates[[5]] = read.csv(paste0("Secd_",studyArea,".csv"), header=T)#
		# covariates[[6]] = read.csv(paste0("Past_",studyArea,".csv"), header=T)#
		covariate_names = c(paste0("Temp_",studyArea), paste0("Prec_",studyArea), paste0("Enty_",studyArea))#
							# paste0("Crop_",studyArea), paste0("Prim_",studyArea),#
							# paste0("Secd_",studyArea), paste0("Past_",studyArea))#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}
gridPoints_txt
a=2
mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		studyArea = unlist(strsplit(analyses[a],"_"))[length(unlist(strsplit(analyses[a],"_")))]#
		covariates[[1]] = read.csv(paste0("Temp_",studyArea,".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",studyArea,".csv"), header=T)#
		covariates[[3]] = read.csv(paste0("Enty_",studyArea,".csv"), header=T)#
		# covariates[[3]] = read.csv(paste0("Crop_",studyArea,".csv"), header=T)#
		# covariates[[4]] = read.csv(paste0("Prim_",studyArea,".csv"), header=T)#
		# covariates[[5]] = read.csv(paste0("Secd_",studyArea,".csv"), header=T)#
		# covariates[[6]] = read.csv(paste0("Past_",studyArea,".csv"), header=T)#
		covariate_names = c(paste0("Temp_",studyArea), paste0("Prec_",studyArea), paste0("Enty_",studyArea))#
							# paste0("Crop_",studyArea), paste0("Prim_",studyArea),#
							# paste0("Secd_",studyArea), paste0("Past_",studyArea))#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}
gridPoints_txt
mostRecentSamplingDates = c(-9999, 2018.1671232876713, -9999, 2019.1780821917807)
a
mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		studyArea = unlist(strsplit(analyses[a],"_"))[length(unlist(strsplit(analyses[a],"_")))]#
		covariates[[1]] = read.csv(paste0("Temp_",studyArea,".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",studyArea,".csv"), header=T)#
		covariates[[3]] = read.csv(paste0("Enty_",studyArea,".csv"), header=T)#
		# covariates[[3]] = read.csv(paste0("Crop_",studyArea,".csv"), header=T)#
		# covariates[[4]] = read.csv(paste0("Prim_",studyArea,".csv"), header=T)#
		# covariates[[5]] = read.csv(paste0("Secd_",studyArea,".csv"), header=T)#
		# covariates[[6]] = read.csv(paste0("Past_",studyArea,".csv"), header=T)#
		covariate_names = c(paste0("Temp_",studyArea), paste0("Prec_",studyArea), paste0("Enty_",studyArea))#
							# paste0("Crop_",studyArea), paste0("Prim_",studyArea),#
							# paste0("Secd_",studyArea), paste0("Past_",studyArea))#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}
gridPoints_txt
a=4
mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		studyArea = unlist(strsplit(analyses[a],"_"))[length(unlist(strsplit(analyses[a],"_")))]#
		covariates[[1]] = read.csv(paste0("Temp_",studyArea,".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",studyArea,".csv"), header=T)#
		covariates[[3]] = read.csv(paste0("Enty_",studyArea,".csv"), header=T)#
		# covariates[[3]] = read.csv(paste0("Crop_",studyArea,".csv"), header=T)#
		# covariates[[4]] = read.csv(paste0("Prim_",studyArea,".csv"), header=T)#
		# covariates[[5]] = read.csv(paste0("Secd_",studyArea,".csv"), header=T)#
		# covariates[[6]] = read.csv(paste0("Past_",studyArea,".csv"), header=T)#
		covariate_names = c(paste0("Temp_",studyArea), paste0("Prec_",studyArea), paste0("Enty_",studyArea))#
							# paste0("Crop_",studyArea), paste0("Prim_",studyArea),#
							# paste0("Secd_",studyArea), paste0("Past_",studyArea))#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}
gridPoints_txt
analyses = c("L_2_MRU","S_2_MRU","L_2_NGA","S_2_NGA")#
mostRecentSamplingDates = c(-9999, 2018.1671232876713, -9999, 2019.1780821917807)
a=1
mostRecentSamplingDatum = mostRecentSamplingDates[a]
covariates = list(); dates = list(); ylims = list()
studyArea = unlist(strsplit(analyses[a],"_"))[length(unlist(strsplit(analyses[a],"_")))]
covariates[[1]] = read.csv(paste0("Temp_",studyArea,".csv"), header=T)
covariate_names = c(paste0("Temp_",studyArea), paste0("Prec_",studyArea), paste0("Enty_",studyArea))
gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)
analyses = c("L_2_MRU","S_2_MRU","L_2_NGA","S_2_NGA")#
mostRecentSamplingDates = c(2018.1671232876713, 2018.1671232876713, 2019.1780821917807, 2019.1780821917807)
mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		studyArea = unlist(strsplit(analyses[a],"_"))[length(unlist(strsplit(analyses[a],"_")))]#
		covariates[[1]] = read.csv(paste0("Temp_",studyArea,".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",studyArea,".csv"), header=T)#
		covariates[[3]] = read.csv(paste0("Enty_",studyArea,".csv"), header=T)#
		# covariates[[3]] = read.csv(paste0("Crop_",studyArea,".csv"), header=T)#
		# covariates[[4]] = read.csv(paste0("Prim_",studyArea,".csv"), header=T)#
		# covariates[[5]] = read.csv(paste0("Secd_",studyArea,".csv"), header=T)#
		# covariates[[6]] = read.csv(paste0("Past_",studyArea,".csv"), header=T)#
		covariate_names = c(paste0("Temp_",studyArea), paste0("Prec_",studyArea), paste0("Enty_",studyArea))#
							# paste0("Crop_",studyArea), paste0("Prim_",studyArea),#
							# paste0("Secd_",studyArea), paste0("Past_",studyArea))#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}
gridPoints_txt
length(gridPoints)
# Script to prepare annual temperature estimates based on data from the Climate Research Unit (CRU)#
# Source: http://www.cru.uea.ac.uk (https://crudata.uea.ac.uk/cru/data/hrg/cru_ts_4.02/cruts.1811131722.v4.02)#
#
	# NOTE: the convex hulls should be based on both segments (?)#
#
library(ncdf4)#
library(rgdal)#
#
xMin = -16; xMax = 16; yMin = 3; yMax = 15#
#
daysPerNormalYear = 365#
daysInALeapYear = 366#
cumulativeNberOfDays = c(0)#
nberOfDays = 0; n = 0#
for (i in 1:117)#
	{#
		n = n+1#
		if (n == 4)#
			{#
				n = 0#
				daysInTheYear = daysInALeapYear#
			}	else 	{#
				daysInTheYear = daysPerNormalYear#
			}#
		nberOfDays = nberOfDays+daysInTheYear#
		cumulativeNberOfDays = c(cumulativeNberOfDays, nberOfDays)#
	}#
#
variables = c("temperature","precipitation"); suffixes = c("Temp","Prec")#
yLabs = c("annual mean temperature","annual precipitation")#
for (h in 1:length(variables))#
	{#
		if (!file.exists(paste0("CRU_",variables[h],".csv")))#
			{#
				nc = nc_open(paste0("CRU_",variables[h],".nc"))#
				time = ncvar_get(nc,"time") # days since 1900-01-01 00:00:00.0#
				lon = ncvar_get(nc,"lon"); lat = ncvar_get(nc,"lat")#
				if (h == 1) var1 = ncvar_get(nc,"tmp")#
				if (h == 2) var1 = ncvar_get(nc,"pre")#
				if (h == 2) stns = ncvar_get(nc,"stn")#
				var2 = c()#
				indices1 = which((lon>xMin)&(lon<xMax))#
				indices2 = which((lat>yMin)&(lat<yMax))#
				lon = lon[indices1]; lat = lat[indices2]#
				var1 = var1[indices1,indices2,]#
				years = time; n = 0#
				for (i in 1:length(years))#
					{#
						n = n+1#
						if (n == 4)#
							{#
								n = 0#
								daysInTheYear = daysInALeapYear#
							}	else 	{#
								daysInTheYear = daysPerNormalYear#
							}#
						index = which(cumulativeNberOfDays==max(cumulativeNberOfDays[cumulativeNberOfDays<=years[i]]))#
						years[i] = 1899+index+((years[i]-cumulativeNberOfDays[index])/daysInTheYear)#
					}#
				n = 0; tot = dim(var1)[1]*dim(var1)[2]#
				for (i in 1:dim(var1)[1])#
					{#
						for (j in 1:dim(var1)[2])#
							{#
								n = n+1; # print(paste0(n,"/",tot))#
								row = cbind(lon[i],lat[j],t(var1[i,j,]))#
								var2 = rbind(var2, row)#
							}#
					}#
				colnames(var2) = c("longitude","latitude",years)#
				write.csv(var2, paste0("CRU_",variables[h],".csv"), row.names=F, quote=F)#
			}	else		{#
				var2 = read.csv(paste0("CRU_",variables[h],".csv"), header=T)#
			}#
		curves1 = list(); curves2 = list(); years = c(1901:2017)#
		analyses = c("LASV2_MRU_segL","LASV2_MRU_segS","LASV2_NI_segL_allG","LASV2_NI_segS_allG")#
		for (i in 1:length(analyses))#
			{#
				values1 = matrix(nrow=length(years), ncol=2)#
				for (y in 1:length(years))#
					{#
						buffer = var2[,3:dim(var2)[2]]; colNames = gsub("X","",colnames(buffer))#
						selectedMeasures = cbind(var2[,1:2],buffer[,which(floor(as.numeric(colNames))==years[y])])#
						hull = readOGR(dsn="Minimum_convex_hulls", layer=paste0(analyses[i],"_",years[y]))#
						inHull = point.in.polygon(selectedMeasures[,"longitude"],selectedMeasures[,"latitude"],#
								 		   		  hull@polygons[[1]]@Polygons[[1]]@coords[,1],#
								 		   		  hull@polygons[[1]]@Polygons[[1]]@coords[,2])#
						indices = which(inHull==1); values1[y,1] = years[y]#
						values1[y,2] = mean(as.matrix(selectedMeasures[indices,3:dim(selectedMeasures)[2]]), na.rm=T)#
					}#
				curves1[[i]] = values1#
				values2 = matrix(nrow=length(years), ncol=2)#
				for (j in 1:length(years))#
					{#
						indices = which((values1[,1]>=(years[j]-2))&(values1[,1]<=(years[j]+2)))#
						values2[j,1] = values1[j,1]#
						values2[j,2] = mean(values1[indices,2])#
					}#
				values2[,1] = round(values2[,1],3); curves2[[i]] = values2#
				colnames(values2) = c("time",variables[h])#
				write.csv(values2, paste0(gsub("LASV2",suffixes[h],analyses[i]),".csv"), row.names=F)#
			}#
		if (h == 1)#
			{#
				dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
				plot(curves1[[1]][,1], curves1[[1]][,2], lwd=0.5, type="l", axes=F, ann=F)#
				lines(curves2[[1]][,1], curves2[[1]][,2], lwd=1.0, col="red")#
				axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
				axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(24.4,26.6,0.2))#
				title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
				title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
				title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
				legend(1972, 24.95, legend=c("sliding window of 5 years"), lwd=1, cex=0.6, col=c("red"), text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
				plot(curves1[[3]][,1], curves1[[3]][,2], lwd=0.5, type="l", axes=F, ann=F)#
				lines(curves2[[3]][,1], curves2[[3]][,2], lwd=1.0, col="red")#
				axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
				axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(25.6,27.2,0.2))#
				title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
				title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
				title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
				dev.copy2pdf(file=paste0("CRU_",variables[h],"_NEW.pdf"))#
			}#
		if (h == 2)#
			{#
				dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
				plot(curves1[[1]][,1], curves1[[1]][,2], lwd=0.5, type="l", axes=F, ann=F)#
				lines(curves2[[1]][,1], curves2[[1]][,2], lwd=1.0, col="red")#
				axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
				axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(150,240,10))#
				title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
				title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
				title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
				legend(1920, 165, legend=c("sliding window of 5 years"), lwd=1, cex=0.6, col=c("red"), text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
				plot(curves1[[3]][,1], curves1[[3]][,2], lwd=0.5, type="l", axes=F, ann=F)#
				lines(curves2[[3]][,1], curves2[[3]][,2], lwd=1.0, col="red")#
				axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
				axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(90,150,10))#
				title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
				title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
				title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
				dev.copy2pdf(file=paste0("CRU_",variables[h],"_NEW.pdf"))#
			}#
	}
# Script to prepare annual temperature estimates based on data from the Climate Research Unit (CRU)#
# Source: http://www.cru.uea.ac.uk (https://crudata.uea.ac.uk/cru/data/hrg/cru_ts_4.02/cruts.1811131722.v4.02)#
#
	# NOTE: the convex hulls should be based on both segments (?)#
#
library(ncdf4)#
library(rgdal)#
#
xMin = -16; xMax = 16; yMin = 3; yMax = 15#
#
daysPerNormalYear = 365#
daysInALeapYear = 366#
cumulativeNberOfDays = c(0)#
nberOfDays = 0; n = 0#
for (i in 1:117)#
	{#
		n = n+1#
		if (n == 4)#
			{#
				n = 0#
				daysInTheYear = daysInALeapYear#
			}	else 	{#
				daysInTheYear = daysPerNormalYear#
			}#
		nberOfDays = nberOfDays+daysInTheYear#
		cumulativeNberOfDays = c(cumulativeNberOfDays, nberOfDays)#
	}#
#
variables = c("temperature","precipitation"); suffixes = c("Temp","Prec")#
yLabs = c("annual mean temperature","annual precipitation")#
for (h in 1:length(variables))#
	{#
		if (!file.exists(paste0("CRU_",variables[h],".csv")))#
			{#
				nc = nc_open(paste0("CRU_",variables[h],".nc"))#
				time = ncvar_get(nc,"time") # days since 1900-01-01 00:00:00.0#
				lon = ncvar_get(nc,"lon"); lat = ncvar_get(nc,"lat")#
				if (h == 1) var1 = ncvar_get(nc,"tmp")#
				if (h == 2) var1 = ncvar_get(nc,"pre")#
				if (h == 2) stns = ncvar_get(nc,"stn")#
				var2 = c()#
				indices1 = which((lon>xMin)&(lon<xMax))#
				indices2 = which((lat>yMin)&(lat<yMax))#
				lon = lon[indices1]; lat = lat[indices2]#
				var1 = var1[indices1,indices2,]#
				years = time; n = 0#
				for (i in 1:length(years))#
					{#
						n = n+1#
						if (n == 4)#
							{#
								n = 0#
								daysInTheYear = daysInALeapYear#
							}	else 	{#
								daysInTheYear = daysPerNormalYear#
							}#
						index = which(cumulativeNberOfDays==max(cumulativeNberOfDays[cumulativeNberOfDays<=years[i]]))#
						years[i] = 1899+index+((years[i]-cumulativeNberOfDays[index])/daysInTheYear)#
					}#
				n = 0; tot = dim(var1)[1]*dim(var1)[2]#
				for (i in 1:dim(var1)[1])#
					{#
						for (j in 1:dim(var1)[2])#
							{#
								n = n+1; # print(paste0(n,"/",tot))#
								row = cbind(lon[i],lat[j],t(var1[i,j,]))#
								var2 = rbind(var2, row)#
							}#
					}#
				colnames(var2) = c("longitude","latitude",years)#
				write.csv(var2, paste0("CRU_",variables[h],".csv"), row.names=F, quote=F)#
			}	else		{#
				var2 = read.csv(paste0("CRU_",variables[h],".csv"), header=T)#
			}#
		curves1 = list(); curves2 = list(); years = c(1901:2017)#
		analyses = c("LASV2_MRU_segL","LASV2_MRU_segS","LASV2_NIG_segL","LASV2_NIG_segS")#
		for (i in 1:length(analyses))#
			{#
				values1 = matrix(nrow=length(years), ncol=2)#
				for (y in 1:length(years))#
					{#
						buffer = var2[,3:dim(var2)[2]]; colNames = gsub("X","",colnames(buffer))#
						selectedMeasures = cbind(var2[,1:2],buffer[,which(floor(as.numeric(colNames))==years[y])])#
						hull = readOGR(dsn="Minimum_convex_hulls", layer=paste0(analyses[i],"_",years[y]))#
						inHull = point.in.polygon(selectedMeasures[,"longitude"],selectedMeasures[,"latitude"],#
								 		   		  hull@polygons[[1]]@Polygons[[1]]@coords[,1],#
								 		   		  hull@polygons[[1]]@Polygons[[1]]@coords[,2])#
						indices = which(inHull==1); values1[y,1] = years[y]#
						values1[y,2] = mean(as.matrix(selectedMeasures[indices,3:dim(selectedMeasures)[2]]), na.rm=T)#
					}#
				curves1[[i]] = values1#
				values2 = matrix(nrow=length(years), ncol=2)#
				for (j in 1:length(years))#
					{#
						indices = which((values1[,1]>=(years[j]-2))&(values1[,1]<=(years[j]+2)))#
						values2[j,1] = values1[j,1]#
						values2[j,2] = mean(values1[indices,2])#
					}#
				values2[,1] = round(values2[,1],3); curves2[[i]] = values2#
				colnames(values2) = c("time",variables[h])#
				write.csv(values2, paste0(gsub("LASV2",suffixes[h],analyses[i]),".csv"), row.names=F)#
			}#
		if (h == 1)#
			{#
				dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
				plot(curves1[[1]][,1], curves1[[1]][,2], lwd=0.5, type="l", axes=F, ann=F)#
				lines(curves2[[1]][,1], curves2[[1]][,2], lwd=1.0, col="red")#
				axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
				axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(24.4,26.6,0.2))#
				title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
				title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
				title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
				legend(1972, 24.95, legend=c("sliding window of 5 years"), lwd=1, cex=0.6, col=c("red"), text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
				plot(curves1[[3]][,1], curves1[[3]][,2], lwd=0.5, type="l", axes=F, ann=F)#
				lines(curves2[[3]][,1], curves2[[3]][,2], lwd=1.0, col="red")#
				axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
				axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(25.6,27.2,0.2))#
				title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
				title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
				title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
				dev.copy2pdf(file=paste0("CRU_",variables[h],"_NEW.pdf"))#
			}#
		if (h == 2)#
			{#
				dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
				plot(curves1[[1]][,1], curves1[[1]][,2], lwd=0.5, type="l", axes=F, ann=F)#
				lines(curves2[[1]][,1], curves2[[1]][,2], lwd=1.0, col="red")#
				axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
				axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(150,240,10))#
				title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
				title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
				title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
				legend(1920, 165, legend=c("sliding window of 5 years"), lwd=1, cex=0.6, col=c("red"), text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
				plot(curves1[[3]][,1], curves1[[3]][,2], lwd=0.5, type="l", axes=F, ann=F)#
				lines(curves2[[3]][,1], curves2[[3]][,2], lwd=1.0, col="red")#
				axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
				axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(90,150,10))#
				title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
				title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
				title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
				dev.copy2pdf(file=paste0("CRU_",variables[h],"_NEW.pdf"))#
			}#
	}
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
				plot(curves1[[1]][,1], curves1[[1]][,2], lwd=0.5, type="l", axes=F, ann=F)#
				lines(curves2[[1]][,1], curves2[[1]][,2], lwd=1.0, col="red")#
				axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
				axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(150,240,10))#
				title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
				title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
				title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
				legend(1920, 165, legend=c("sliding window of 5 years"), lwd=1, cex=0.6, col=c("red"), text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
				plot(curves1[[3]][,1], curves1[[3]][,2], lwd=0.5, type="l", axes=F, ann=F)#
				lines(curves2[[3]][,1], curves2[[3]][,2], lwd=1.0, col="red")#
				axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
				axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(90,150,10))#
				title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
				title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
				title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
				dev.copy2pdf(file=paste0("CRU_",variables[h],"_NEW.pdf"))
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
				plot(curves1[[1]][,1], curves1[[1]][,2], lwd=0.5, type="l", axes=F, ann=F)#
				lines(curves2[[1]][,1], curves2[[1]][,2], lwd=1.0, col="red")#
				axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
				axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(130,240,10))#
				title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
				title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
				title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
				legend(1920, 165, legend=c("sliding window of 5 years"), lwd=1, cex=0.6, col=c("red"), text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
				plot(curves1[[3]][,1], curves1[[3]][,2], lwd=0.5, type="l", axes=F, ann=F)#
				lines(curves2[[3]][,1], curves2[[3]][,2], lwd=1.0, col="red")#
				axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
				axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(90,150,10))#
				title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
				title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
				title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
				dev.copy2pdf(file=paste0("CRU_",variables[h],"_NEW.pdf"))
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
				plot(curves1[[1]][,1], curves1[[1]][,2], lwd=0.5, type="l", axes=F, ann=F)#
				lines(curves2[[1]][,1], curves2[[1]][,2], lwd=1.0, col="red")#
				axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
				axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(135,240,10))#
				title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
				title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
				title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
				legend(1920, 135, legend=c("sliding window of 5 years"), lwd=1, cex=0.6, col=c("red"), text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
				plot(curves1[[3]][,1], curves1[[3]][,2], lwd=0.5, type="l", axes=F, ann=F)#
				lines(curves2[[3]][,1], curves2[[3]][,2], lwd=1.0, col="red")#
				axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
				axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(90,150,10))#
				title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
				title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
				title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
				dev.copy2pdf(file=paste0("CRU_",variables[h],"_NEW.pdf"))
legend(1920, 145, legend=c("sliding window of 5 years"), lwd=1, cex=0.6, col=c("red"), text.col="gray30", border=NA, x.intersp=0.5, bty="n")
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
				plot(curves1[[1]][,1], curves1[[1]][,2], lwd=0.5, type="l", axes=F, ann=F)#
				lines(curves2[[1]][,1], curves2[[1]][,2], lwd=1.0, col="red")#
				axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
				axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(135,240,10))#
				title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
				title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
				title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
				legend(1920, 145, legend=c("sliding window of 5 years"), lwd=1, cex=0.6, col=c("red"), text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
				plot(curves1[[3]][,1], curves1[[3]][,2], lwd=0.5, type="l", axes=F, ann=F)#
				lines(curves2[[3]][,1], curves2[[3]][,2], lwd=1.0, col="red")#
				axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
				axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(90,150,10))#
				title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
				title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
				title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
				dev.copy2pdf(file=paste0("CRU_",variables[h],"_NEW.pdf"))
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
				plot(curves1[[1]][,1], curves1[[1]][,2], lwd=0.5, type="l", axes=F, ann=F)#
				lines(curves2[[1]][,1], curves2[[1]][,2], lwd=1.0, col="red")#
				axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
				axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(135,240,10))#
				title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
				title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
				title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
				legend(1920, 140, legend=c("sliding window of 5 years"), lwd=1, cex=0.6, col=c("red"), text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
				plot(curves1[[3]][,1], curves1[[3]][,2], lwd=0.5, type="l", axes=F, ann=F)#
				lines(curves2[[3]][,1], curves2[[3]][,2], lwd=1.0, col="red")#
				axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
				axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(90,150,10))#
				title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
				title(ylab=yLabs[h], cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
				title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
				dev.copy2pdf(file=paste0("CRU_",variables[h],"_NEW.pdf"))
# Script to prepare past land use estimates based on data from the Harmonized Global Land Use for Years 1500-2100 (V1)#
# Source: https://daac.ornl.gov/VEGETATION/guides/Land_Use_Harmonization_V1.html#
# "We obtained scenarios of 21st century land-use from the Land-Use Harmonization project (i.e. LUHa_u2t1.v1; http://luh.umd.edu; #
# Hurtt et al. (2011) Harmonization of land-use scenarios for the period 1500–2100: 600 years of global gridded annual land-use #
# transitions, wood harvest, and resulting secondary land. Climatic Change 109: 117–161)"#
#
library(ncdf4)#
library(rgdal)#
#
selected_years = c(1901:2005); curves_list = list()#
xMin = -16; xMax = 16; yMin = 3; yMax = 15#
variables = c("gcrop","gothr","gsecd","gpast","gurbn")#
suffixes = c("Crop","Prim","Secd","Past","Urbn")#
variable_names = c("cropland","primary land","secondary land","pasture","urban land")#
for (h in 1:length(variables))#
	{#
		nc = nc_open(paste0("Land_use_for_1500-2100/LUHa_u2t1.v1_",variables[h],".nc4"))#
		time = ncvar_get(nc,"time")#
		lon = ncvar_get(nc,"lon")#
		lat = ncvar_get(nc,"lat")#
		if (h == 1) var1 = ncvar_get(nc,"prop_crop")#
		if (h == 2) var1 = ncvar_get(nc,"prop_primary")#
		if (h == 3) var1 = ncvar_get(nc,"prop_secd")#
		if (h == 4) var1 = ncvar_get(nc,"prop_pasture")#
		if (h == 5) var1 = ncvar_get(nc,"prop_urbn")#
		var2 = c()#
		indices1 = which((lon>xMin)&(lon<xMax))#
		indices2 = which((lat>yMin)&(lat<yMax))#
		lon = lon[indices1]; lat = lat[indices2]#
		var1 = var1[indices1,indices2,]#
		years = time+1700; n = 0#
		tot = dim(var1)[1]*dim(var1)[2]#
		for (i in 1:dim(var1)[1])#
			{#
				for (j in 1:dim(var1)[2])#
					{#
						n = n+1; # print(paste0(n,"/",tot))#
						row = cbind(lon[i],lat[j],t(var1[i,j,]))#
						var2 = rbind(var2, row)#
					}#
			}#
		colnames(var2) = c("longitude","latitude",years); curves = list()#
		# write.csv(var2, paste0("CRU_",variables[h],".csv"), row.names=F, quote=F)#
			# }	else		{#
				# var2 = read.csv(paste0("CRU_",variables[h],".csv"), header=T)#
			# }#
		analyses = c("LASV2_MRU_segL","LASV2_MRU_segS","LASV2_NIG_segL","LASV2_NIG_segS")#
		for (i in 1:length(analyses))#
			{#
				values = matrix(nrow=length(selected_years), ncol=2)#
				for (y in 1:length(selected_years))#
					{#
						buffer = var2[,3:dim(var2)[2]]; colNames = gsub("X","",colnames(buffer))#
						selectedMeasures = cbind(var2[,1:2],buffer[,which(floor(as.numeric(colNames))==selected_years[y])])#
						hull = readOGR(dsn="Minimum_convex_hulls2", layer=paste0(analyses[i],"_",selected_years[y]))#
						inHull = point.in.polygon(selectedMeasures[,"longitude"],selectedMeasures[,"latitude"],#
								 		   		  hull@polygons[[1]]@Polygons[[1]]@coords[,1],#
								 		   		  hull@polygons[[1]]@Polygons[[1]]@coords[,2])#
						indices = which(inHull==1); values[y,1] = selected_years[y]#
						values[y,2] = mean(as.matrix(selectedMeasures[indices,3:dim(selectedMeasures)[2]]), na.rm=T)#
					}#
				curves[[i]] = values; colnames(values) = c("time",variables[h])#
				write.csv(values, paste0(gsub("LASV2",suffixes[h],analyses[i]),".csv"), row.names=F)#
			}#
		curves_list[[h]] = curves#
	}#
analyses = c("LASV2_MRU_segL","LASV2_MRU_segS","LASV2_NIG_segL","LASV2_NIG_segS")#
for (h in 1:length(variables))#
	{#
		curves = list()#
		for (i in 1:length(analyses))#
			{#
				curves[[i]] = read.csv(paste0(gsub("LASV2",suffixes[h],analyses[i]),".csv"), header=T)#
			}#
		curves_list[[h]] = curves#
	}#
entropies = list()#
for (i in 1:length(analyses))#
	{#
		proportions = matrix(nrow=dim(curves_list[[1]][[i]])[1], ncol=length(variables)+1)#
		proportions[,1] = curves_list[[1]][[i]][,1]#
		for (h in 1:length(variables))#
			{#
				proportions[,h+1] = curves_list[[h]][[i]][,2]#
			}#
		entropy = matrix(nrow=dim(proportions)[1], ncol=2); entropy[,1] = proportions[,1]#
		for (j in 1:dim(proportions)[1])#
			{#
				p = 0#
				for (k in 2:dim(proportions)[2])#
					{#
						if (proportions[j,k] != 0)#
							{#
								p_i = proportions[j,k]#
								p = p - ((p_i)*(log(p_i)))#
							}#
					}#
				entropy[j,2] = p#
			}#
		entropies[[i]] = entropy; colnames(values) = c("time","entropy")#
		write.csv(values, paste0(gsub("LASV2","Enty",analyses[i]),".csv"), row.names=F)#
	}#
#
cols = c("olivedrab3","mediumseagreen","steelblue3","orange1","tan3")#
cols = c("orange1","olivedrab3","mediumseagreen","gray60","steelblue3")#
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(curves_list[[1]][[1]][,1], curves_list[[1]][[1]][,2], col=cols[1], lwd=1.5, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[1]][,1], curves_list[[i]][[1]][,2], col=cols[i], lwd=1.5)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use proportion", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(curves_list[[1]][[3]][,1], curves_list[[1]][[3]][,2], col=cols[1], lwd=1.5, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[3]][,1], curves_list[[i]][[3]][,2], col=cols[i], lwd=1.5)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use proportion", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1975, 0.97, legend=variable_names, lwd=2, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
dev.copy2pdf(file=paste0("Land_use_1901-2005.pdf"))#
#
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(entropies[[1]][,1], entropies[[1]][,2], col="red", lwd=1.5, type="l", axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0.80,1.10,0.05))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use entropy", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(entropies[[3]][,1], entropies[[3]][,2], col="red", lwd=1.5, type="l", axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1.05,1.12,0.01))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use entropy", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1975, 0.97, legend=variable_names, lwd=2, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
dev.copy2pdf(file=paste0("Entropy_1901-2005.pdf"))
# Script to prepare past land use estimates based on data from the Harmonized Global Land Use for Years 1500-2100 (V1)#
# Source: https://daac.ornl.gov/VEGETATION/guides/Land_Use_Harmonization_V1.html#
# "We obtained scenarios of 21st century land-use from the Land-Use Harmonization project (i.e. LUHa_u2t1.v1; http://luh.umd.edu; #
# Hurtt et al. (2011) Harmonization of land-use scenarios for the period 1500–2100: 600 years of global gridded annual land-use #
# transitions, wood harvest, and resulting secondary land. Climatic Change 109: 117–161)"#
#
library(ncdf4)#
library(rgdal)#
#
selected_years = c(1901:2005); curves_list = list()#
xMin = -16; xMax = 16; yMin = 3; yMax = 15#
variables = c("gcrop","gothr","gsecd","gpast","gurbn")#
suffixes = c("Crop","Prim","Secd","Past","Urbn")#
variable_names = c("cropland","primary land","secondary land","pasture","urban land")#
for (h in 1:length(variables))#
	{#
		nc = nc_open(paste0("Land_use_for_1500-2100/LUHa_u2t1.v1_",variables[h],".nc4"))#
		time = ncvar_get(nc,"time")#
		lon = ncvar_get(nc,"lon")#
		lat = ncvar_get(nc,"lat")#
		if (h == 1) var1 = ncvar_get(nc,"prop_crop")#
		if (h == 2) var1 = ncvar_get(nc,"prop_primary")#
		if (h == 3) var1 = ncvar_get(nc,"prop_secd")#
		if (h == 4) var1 = ncvar_get(nc,"prop_pasture")#
		if (h == 5) var1 = ncvar_get(nc,"prop_urbn")#
		var2 = c()#
		indices1 = which((lon>xMin)&(lon<xMax))#
		indices2 = which((lat>yMin)&(lat<yMax))#
		lon = lon[indices1]; lat = lat[indices2]#
		var1 = var1[indices1,indices2,]#
		years = time+1700; n = 0#
		tot = dim(var1)[1]*dim(var1)[2]#
		for (i in 1:dim(var1)[1])#
			{#
				for (j in 1:dim(var1)[2])#
					{#
						n = n+1; # print(paste0(n,"/",tot))#
						row = cbind(lon[i],lat[j],t(var1[i,j,]))#
						var2 = rbind(var2, row)#
					}#
			}#
		colnames(var2) = c("longitude","latitude",years); curves = list()#
		# write.csv(var2, paste0("CRU_",variables[h],".csv"), row.names=F, quote=F)#
			# }	else		{#
				# var2 = read.csv(paste0("CRU_",variables[h],".csv"), header=T)#
			# }#
		analyses = c("LASV2_MRU_segL","LASV2_MRU_segS","LASV2_NIG_segL","LASV2_NIG_segS")#
		for (i in 1:length(analyses))#
			{#
				values = matrix(nrow=length(selected_years), ncol=2)#
				for (y in 1:length(selected_years))#
					{#
						buffer = var2[,3:dim(var2)[2]]; colNames = gsub("X","",colnames(buffer))#
						selectedMeasures = cbind(var2[,1:2],buffer[,which(floor(as.numeric(colNames))==selected_years[y])])#
						hull = readOGR(dsn="Minimum_convex_hulls", layer=paste0(analyses[i],"_",selected_years[y]))#
						inHull = point.in.polygon(selectedMeasures[,"longitude"],selectedMeasures[,"latitude"],#
								 		   		  hull@polygons[[1]]@Polygons[[1]]@coords[,1],#
								 		   		  hull@polygons[[1]]@Polygons[[1]]@coords[,2])#
						indices = which(inHull==1); values[y,1] = selected_years[y]#
						values[y,2] = mean(as.matrix(selectedMeasures[indices,3:dim(selectedMeasures)[2]]), na.rm=T)#
					}#
				curves[[i]] = values; colnames(values) = c("time",variables[h])#
				write.csv(values, paste0(gsub("LASV2",suffixes[h],analyses[i]),".csv"), row.names=F)#
			}#
		curves_list[[h]] = curves#
	}#
analyses = c("LASV2_MRU_segL","LASV2_MRU_segS","LASV2_NIG_segL","LASV2_NIG_segS")#
for (h in 1:length(variables))#
	{#
		curves = list()#
		for (i in 1:length(analyses))#
			{#
				curves[[i]] = read.csv(paste0(gsub("LASV2",suffixes[h],analyses[i]),".csv"), header=T)#
			}#
		curves_list[[h]] = curves#
	}#
entropies = list()#
for (i in 1:length(analyses))#
	{#
		proportions = matrix(nrow=dim(curves_list[[1]][[i]])[1], ncol=length(variables)+1)#
		proportions[,1] = curves_list[[1]][[i]][,1]#
		for (h in 1:length(variables))#
			{#
				proportions[,h+1] = curves_list[[h]][[i]][,2]#
			}#
		entropy = matrix(nrow=dim(proportions)[1], ncol=2); entropy[,1] = proportions[,1]#
		for (j in 1:dim(proportions)[1])#
			{#
				p = 0#
				for (k in 2:dim(proportions)[2])#
					{#
						if (proportions[j,k] != 0)#
							{#
								p_i = proportions[j,k]#
								p = p - ((p_i)*(log(p_i)))#
							}#
					}#
				entropy[j,2] = p#
			}#
		entropies[[i]] = entropy; colnames(values) = c("time","entropy")#
		write.csv(values, paste0(gsub("LASV2","Enty",analyses[i]),".csv"), row.names=F)#
	}#
#
cols = c("olivedrab3","mediumseagreen","steelblue3","orange1","tan3")#
cols = c("orange1","olivedrab3","mediumseagreen","gray60","steelblue3")#
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(curves_list[[1]][[1]][,1], curves_list[[1]][[1]][,2], col=cols[1], lwd=1.5, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[1]][,1], curves_list[[i]][[1]][,2], col=cols[i], lwd=1.5)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use proportion", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(curves_list[[1]][[3]][,1], curves_list[[1]][[3]][,2], col=cols[1], lwd=1.5, type="l", axes=F, ann=F, ylim=c(0,0.9))#
for (i in 2:5) lines(curves_list[[i]][[3]][,1], curves_list[[i]][[3]][,2], col=cols[i], lwd=1.5)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0,0.9,0.1))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use proportion", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1975, 0.97, legend=variable_names, lwd=2, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
dev.copy2pdf(file=paste0("Land_use_1901-2005.pdf"))#
#
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(entropies[[1]][,1], entropies[[1]][,2], col="red", lwd=1.5, type="l", axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0.80,1.10,0.05))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use entropy", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(entropies[[3]][,1], entropies[[3]][,2], col="red", lwd=1.5, type="l", axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1.05,1.12,0.01))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use entropy", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1975, 0.97, legend=variable_names, lwd=2, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
dev.copy2pdf(file=paste0("Entropy_1901-2005.pdf"))
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(entropies[[1]][,1], entropies[[1]][,2], col="red", lwd=1.5, type="l", axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0.80,1.10,0.05))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use entropy", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(entropies[[3]][,1], entropies[[3]][,2], col="red", lwd=1.5, type="l", axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1.05,1.12,0.01))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use entropy", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1975, 0.97, legend=variable_names, lwd=2, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")
plot(entropies[[1]][,1], entropies[[1]][,2], col="red", lwd=1.5, type="l", axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0.75,1.00,0.05))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use entropy", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(entropies[[3]][,1], entropies[[3]][,2], col="red", lwd=1.5, type="l", axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1.03,1.15,0.01))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use entropy", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1975, 0.97, legend=variable_names, lwd=2, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")
plot(entropies[[1]][,1], entropies[[1]][,2], col="red", lwd=1.5, type="l", axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0.77,1.00,0.05))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use entropy", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(entropies[[3]][,1], entropies[[3]][,2], col="red", lwd=1.5, type="l", axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1.035,1.17,0.01))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use entropy", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1975, 0.97, legend=variable_names, lwd=2, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")
plot(entropies[[1]][,1], entropies[[1]][,2], col="red", lwd=1.5, type="l", axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0.75,1.00,0.05))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use entropy", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(entropies[[3]][,1], entropies[[3]][,2], col="red", lwd=1.5, type="l", axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1.03,1.17,0.01))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use entropy", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1975, 0.97, legend=variable_names, lwd=2, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")
dev.new(width=9, height=3); par(mfrow=c(1,2), mgp=c(0,0,0), oma=c(1.0,1.0,0.5,0.5), mar=c(2.0,2.0,1,1))#
plot(entropies[[1]][,1], entropies[[1]][,2], col="red", lwd=1.5, type="l", axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(0.75,1.00,0.05))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use entropy", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="M-R-U", cex.main=0.8, col.main="gray30", line=-0.2)#
plot(entropies[[3]][,1], entropies[[3]][,2], col="red", lwd=1.5, type="l", axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,-0.05,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1900,2020,10))#
axis(side=2, lwd.tick=0.2, cex.axis=0.5, mgp=c(0,0.25,0), lwd=0.2, tck=-0.020, col.axis="gray30", at=seq(1.03,1.17,0.01))#
title(xlab="time (year)", cex.lab=0.6, mgp=c(0.7,0,0), col.lab="gray30")#
title(ylab="land use entropy", cex.lab=0.6, mgp=c(1.1,0,0), col.lab="gray30")#
title(main="Nigeria", cex.main=0.8, col.main="gray30", line=-0.2)#
legend(1975, 0.97, legend=variable_names, lwd=2, cex=0.6, col=cols, text.col="gray30", border=NA, x.intersp=0.5, bty="n")#
dev.copy2pdf(file=paste0("Entropy_1901-2005.pdf"))
analyses = c("L_2_MRU","S_2_MRU","L_2_NGA","S_2_NGA")#
mostRecentSamplingDates = c(2018.1671232876713, 2018.1671232876713, 2019.1780821917807, 2019.1780821917807)#
#
for (a in 1:length(analyses))#
	{#
		mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		studyArea = unlist(strsplit(analyses[a],"_"))[length(unlist(strsplit(analyses[a],"_")))]#
		covariates[[1]] = read.csv(paste0("Temp_",studyArea,".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",studyArea,".csv"), header=T)#
		covariates[[3]] = read.csv(paste0("Enty_",studyArea,".csv"), header=T)#
		# covariates[[3]] = read.csv(paste0("Crop_",studyArea,".csv"), header=T)#
		# covariates[[4]] = read.csv(paste0("Prim_",studyArea,".csv"), header=T)#
		# covariates[[5]] = read.csv(paste0("Secd_",studyArea,".csv"), header=T)#
		# covariates[[6]] = read.csv(paste0("Past_",studyArea,".csv"), header=T)#
		covariate_names = c(paste0("Temp_",studyArea), paste0("Prec_",studyArea), paste0("Enty_",studyArea))#
							# paste0("Crop_",studyArea), paste0("Prim_",studyArea),#
							# paste0("Secd_",studyArea), paste0("Past_",studyArea))#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}#
		timePoints = matrix(nrow=length(gridPoints)+1,ncol=1+length(covariates))#
		colnames(timePoints) = c("time",covariate_names)#
		timePoints[,1] = c(1901,rev(mostRecentSamplingDatum-gridPoints))#
		for (i in 1:dim(timePoints)[1])#
			{#
				timePoint = timePoints[i,1]#
				for (j in 1:length(covariates))#
					{#
						if (timePoint%in%covariates[[j]][,1]) timePoints[i,covariate_names[j]] = covariates[[j]][which(covariates[[j]][,1]==timePoint),2]#
					}#
			}#
		nberOfIntervals = dim(timePoints)[1]#
		txt = c()#
		txt = c(txt, paste0("\t\t<populationSizes>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.logPopSize\" dimension=\"",nberOfIntervals,"\"/>"))	#
		txt = c(txt, paste0("\t\t</populationSizes>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<lastObservedIndex>"))#
		# startingNA = rep(NA, length(covariates)); # startingNA[1] = 213#
		# txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",startingNA[1]-1,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",length(gridPoints)+1,"\"/>"))#
		if (length(covariates) > 1)#
			{#
				for (i in 2:length(covariates))#
					{#
						# indices = c(nberOfIntervals:1)[which(is.na(timePoints[,covariate_names[i]]))]; startingNA[i] = indices[length(indices)]#
						txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",i,"\" value=\"",length(gridPoints)+1,"\"/>"))#
					}#
			}#
		txt = c(txt, paste0("\t\t</lastObservedIndex>"))#
		txt = c(txt, paste0("\t\t<covariatePrecision>"))#
		for (i in 1:length(covariates))#
			{#
				maxDiff = 0#
				for (j in 2:dim(timePoints)[1])#
					{#
						if ((!is.na(as.numeric(timePoints[j,covariate_names[i]])))&(!is.na(as.numeric(timePoints[j-1,covariate_names[i]]))))#
							{#
								if (maxDiff < abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]])))#
									{#
										maxDiff = abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]]))#
									}#
							}#
					}#
				values = as.numeric(timePoints[,covariate_names[i]]); values = values[!is.na(values)]#
				covPrec = 1/((sd(values))^2)#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.covPrec.",i,"\" value=\"",covPrec,"\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</covariatePrecision>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<gridPoints>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.gridPoints\" value=\"",gridPoints_txt,"\"/>"))#
		txt = c(txt, paste0("\t\t</gridPoints>"))#
		txt = c(txt, paste0("\t\t<precisionParameter>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.precision\" value=\"1.0\" lower=\"0.0\"/>"))#
		txt = c(txt, paste0("\t\t</precisionParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<betaParameter>"))#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.beta.",i,"\" value=\"0\" lower=\"-1000\" upper=\"1000\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</betaParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<covariates>"))#
		for (i in 1:length(covariates))#
			{#
				c = 0; lastValue = "NA"; meanValue = mean(as.numeric(timePoints[,covariate_names[i]]), na.rm=T)#
				txt = c(txt, paste0("\t\t\t<matrixParameter id=\"",covariate_names[i],"\">"))#
				for (j in dim(timePoints)[1]:1)#
					{#
						c = c+1#
						if (!is.na(timePoints[j,covariate_names[i]]))#
							{#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",timePoints[j,covariate_names[i]],"\"/>"))#
								lastValue = timePoints[j,covariate_names[i]]#
							}	else	{#
								startValue = timePoints[max(which(!is.na(timePoints[,covariate_names[i]]))),covariate_names[i]]#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",startValue,"\" lower=\"0\"/>"))#
								# txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=NA","\" lower=\"0\"/>"))#
							}#
					}#
				txt = c(txt,"\t\t\t</matrixParameter>")#
			}#
		txt = c(txt,"\t\t</covariates>")#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1])#
					# {#
						# txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"15\">"))#
						# txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
						# txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
					# }#
				# txt = c(txt, "")#
			# }#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"30\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")	#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<normalPrior mean=\"0.0\" stdev=\"1\" offset=\"0.0\">"))#
				txt = c(txt, paste0("\t\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t\t</normalPrior>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		for (i in 1:length(covariates)) txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.gridPoints\"/>"))#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1]) txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
			# }#
		write(txt, paste0("GLM_",analyses[a],".xml"))#
	}
analyses = c("MRU_segL","MRU_segS","NIG_segL","NIG_segS")#
mostRecentSamplingDates = c(2018.1671232876713, 2018.1671232876713, 2019.1780821917807, 2019.1780821917807)#
#
for (a in 1:length(analyses))#
	{#
		mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		covariates[[1]] = read.csv(paste0("Temp_",analyses[a],".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",analyses[a],".csv"), header=T)#
		covariates[[3]] = read.csv(paste0("Enty_",analyses[a],".csv"), header=T)#
		# covariates[[3]] = read.csv(paste0("Crop_",analyses[a],".csv"), header=T)#
		# covariates[[4]] = read.csv(paste0("Prim_",analyses[a],".csv"), header=T)#
		# covariates[[5]] = read.csv(paste0("Secd_",analyses[a],".csv"), header=T)#
		# covariates[[6]] = read.csv(paste0("Past_",analyses[a],".csv"), header=T)#
		covariate_names = c(paste0("Temp_",studyArea), paste0("Prec_",studyArea), paste0("Enty_",studyArea))#
							# paste0("Crop_",studyArea), paste0("Prim_",studyArea),#
							# paste0("Secd_",studyArea), paste0("Past_",studyArea))#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}#
		timePoints = matrix(nrow=length(gridPoints)+1,ncol=1+length(covariates))#
		colnames(timePoints) = c("time",covariate_names)#
		timePoints[,1] = c(1901,rev(mostRecentSamplingDatum-gridPoints))#
		for (i in 1:dim(timePoints)[1])#
			{#
				timePoint = timePoints[i,1]#
				for (j in 1:length(covariates))#
					{#
						if (timePoint%in%covariates[[j]][,1]) timePoints[i,covariate_names[j]] = covariates[[j]][which(covariates[[j]][,1]==timePoint),2]#
					}#
			}#
		nberOfIntervals = dim(timePoints)[1]#
		txt = c()#
		txt = c(txt, paste0("\t\t<populationSizes>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.logPopSize\" dimension=\"",nberOfIntervals,"\"/>"))	#
		txt = c(txt, paste0("\t\t</populationSizes>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<lastObservedIndex>"))#
		# startingNA = rep(NA, length(covariates)); # startingNA[1] = 213#
		# txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",startingNA[1]-1,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",length(gridPoints)+1,"\"/>"))#
		if (length(covariates) > 1)#
			{#
				for (i in 2:length(covariates))#
					{#
						# indices = c(nberOfIntervals:1)[which(is.na(timePoints[,covariate_names[i]]))]; startingNA[i] = indices[length(indices)]#
						txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",i,"\" value=\"",length(gridPoints)+1,"\"/>"))#
					}#
			}#
		txt = c(txt, paste0("\t\t</lastObservedIndex>"))#
		txt = c(txt, paste0("\t\t<covariatePrecision>"))#
		for (i in 1:length(covariates))#
			{#
				maxDiff = 0#
				for (j in 2:dim(timePoints)[1])#
					{#
						if ((!is.na(as.numeric(timePoints[j,covariate_names[i]])))&(!is.na(as.numeric(timePoints[j-1,covariate_names[i]]))))#
							{#
								if (maxDiff < abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]])))#
									{#
										maxDiff = abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]]))#
									}#
							}#
					}#
				values = as.numeric(timePoints[,covariate_names[i]]); values = values[!is.na(values)]#
				covPrec = 1/((sd(values))^2)#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.covPrec.",i,"\" value=\"",covPrec,"\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</covariatePrecision>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<gridPoints>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.gridPoints\" value=\"",gridPoints_txt,"\"/>"))#
		txt = c(txt, paste0("\t\t</gridPoints>"))#
		txt = c(txt, paste0("\t\t<precisionParameter>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.precision\" value=\"1.0\" lower=\"0.0\"/>"))#
		txt = c(txt, paste0("\t\t</precisionParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<betaParameter>"))#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.beta.",i,"\" value=\"0\" lower=\"-1000\" upper=\"1000\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</betaParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<covariates>"))#
		for (i in 1:length(covariates))#
			{#
				c = 0; lastValue = "NA"; meanValue = mean(as.numeric(timePoints[,covariate_names[i]]), na.rm=T)#
				txt = c(txt, paste0("\t\t\t<matrixParameter id=\"",covariate_names[i],"\">"))#
				for (j in dim(timePoints)[1]:1)#
					{#
						c = c+1#
						if (!is.na(timePoints[j,covariate_names[i]]))#
							{#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",timePoints[j,covariate_names[i]],"\"/>"))#
								lastValue = timePoints[j,covariate_names[i]]#
							}	else	{#
								startValue = timePoints[max(which(!is.na(timePoints[,covariate_names[i]]))),covariate_names[i]]#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",startValue,"\" lower=\"0\"/>"))#
								# txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=NA","\" lower=\"0\"/>"))#
							}#
					}#
				txt = c(txt,"\t\t\t</matrixParameter>")#
			}#
		txt = c(txt,"\t\t</covariates>")#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1])#
					# {#
						# txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"15\">"))#
						# txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
						# txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
					# }#
				# txt = c(txt, "")#
			# }#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"30\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")	#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<normalPrior mean=\"0.0\" stdev=\"1\" offset=\"0.0\">"))#
				txt = c(txt, paste0("\t\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t\t</normalPrior>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		for (i in 1:length(covariates)) txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.gridPoints\"/>"))#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1]) txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
			# }#
		write(txt, paste0("GLM_",analyses[a],".xml"))#
	}
analyses = c("MRU_segL","MRU_segS","NIG_segL","NIG_segS")#
mostRecentSamplingDates = c(2018.1671232876713, 2018.1671232876713, 2019.1780821917807, 2019.1780821917807)#
#
for (a in 1:length(analyses))#
	{#
		mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		covariates[[1]] = read.csv(paste0("Temp_",analyses[a],".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",analyses[a],".csv"), header=T)#
		covariates[[3]] = read.csv(paste0("Enty_",analyses[a],".csv"), header=T)#
		covariates[[3]] = read.csv(paste0("Crop_",analyses[a],".csv"), header=T)#
		covariates[[4]] = read.csv(paste0("Prim_",analyses[a],".csv"), header=T)#
		covariates[[5]] = read.csv(paste0("Secd_",analyses[a],".csv"), header=T)#
		covariates[[6]] = read.csv(paste0("Past_",analyses[a],".csv"), header=T)#
		covariate_names = c(paste0("Temp_",studyArea), paste0("Prec_",studyArea), paste0("Enty_",studyArea))#
							paste0("Crop_",studyArea), paste0("Prim_",studyArea),#
							paste0("Secd_",studyArea), paste0("Past_",studyArea))#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}#
		timePoints = matrix(nrow=length(gridPoints)+1,ncol=1+length(covariates))#
		colnames(timePoints) = c("time",covariate_names)#
		timePoints[,1] = c(1901,rev(mostRecentSamplingDatum-gridPoints))#
		for (i in 1:dim(timePoints)[1])#
			{#
				timePoint = timePoints[i,1]#
				for (j in 1:length(covariates))#
					{#
						if (timePoint%in%covariates[[j]][,1]) timePoints[i,covariate_names[j]] = covariates[[j]][which(covariates[[j]][,1]==timePoint),2]#
					}#
			}#
		nberOfIntervals = dim(timePoints)[1]#
		txt = c()#
		txt = c(txt, paste0("\t\t<populationSizes>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.logPopSize\" dimension=\"",nberOfIntervals,"\"/>"))	#
		txt = c(txt, paste0("\t\t</populationSizes>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<lastObservedIndex>"))#
		# startingNA = rep(NA, length(covariates)); # startingNA[1] = 213#
		# txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",startingNA[1]-1,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",length(gridPoints)+1,"\"/>"))#
		if (length(covariates) > 1)#
			{#
				for (i in 2:length(covariates))#
					{#
						# indices = c(nberOfIntervals:1)[which(is.na(timePoints[,covariate_names[i]]))]; startingNA[i] = indices[length(indices)]#
						txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",i,"\" value=\"",length(gridPoints)+1,"\"/>"))#
					}#
			}#
		txt = c(txt, paste0("\t\t</lastObservedIndex>"))#
		txt = c(txt, paste0("\t\t<covariatePrecision>"))#
		for (i in 1:length(covariates))#
			{#
				maxDiff = 0#
				for (j in 2:dim(timePoints)[1])#
					{#
						if ((!is.na(as.numeric(timePoints[j,covariate_names[i]])))&(!is.na(as.numeric(timePoints[j-1,covariate_names[i]]))))#
							{#
								if (maxDiff < abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]])))#
									{#
										maxDiff = abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]]))#
									}#
							}#
					}#
				values = as.numeric(timePoints[,covariate_names[i]]); values = values[!is.na(values)]#
				covPrec = 1/((sd(values))^2)#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.covPrec.",i,"\" value=\"",covPrec,"\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</covariatePrecision>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<gridPoints>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.gridPoints\" value=\"",gridPoints_txt,"\"/>"))#
		txt = c(txt, paste0("\t\t</gridPoints>"))#
		txt = c(txt, paste0("\t\t<precisionParameter>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.precision\" value=\"1.0\" lower=\"0.0\"/>"))#
		txt = c(txt, paste0("\t\t</precisionParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<betaParameter>"))#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.beta.",i,"\" value=\"0\" lower=\"-1000\" upper=\"1000\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</betaParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<covariates>"))#
		for (i in 1:length(covariates))#
			{#
				c = 0; lastValue = "NA"; meanValue = mean(as.numeric(timePoints[,covariate_names[i]]), na.rm=T)#
				txt = c(txt, paste0("\t\t\t<matrixParameter id=\"",covariate_names[i],"\">"))#
				for (j in dim(timePoints)[1]:1)#
					{#
						c = c+1#
						if (!is.na(timePoints[j,covariate_names[i]]))#
							{#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",timePoints[j,covariate_names[i]],"\"/>"))#
								lastValue = timePoints[j,covariate_names[i]]#
							}	else	{#
								startValue = timePoints[max(which(!is.na(timePoints[,covariate_names[i]]))),covariate_names[i]]#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",startValue,"\" lower=\"0\"/>"))#
								# txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=NA","\" lower=\"0\"/>"))#
							}#
					}#
				txt = c(txt,"\t\t\t</matrixParameter>")#
			}#
		txt = c(txt,"\t\t</covariates>")#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1])#
					# {#
						# txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"15\">"))#
						# txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
						# txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
					# }#
				# txt = c(txt, "")#
			# }#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"30\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")	#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<normalPrior mean=\"0.0\" stdev=\"1\" offset=\"0.0\">"))#
				txt = c(txt, paste0("\t\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t\t</normalPrior>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		for (i in 1:length(covariates)) txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.gridPoints\"/>"))#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1]) txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
			# }#
		write(txt, paste0("GLM_",analyses[a],".xml"))#
	}
analyses = c("MRU_segL","MRU_segS","NIG_segL","NIG_segS")#
mostRecentSamplingDates = c(2018.1671232876713, 2018.1671232876713, 2019.1780821917807, 2019.1780821917807)#
#
for (a in 1:length(analyses))#
	{#
		mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		covariates[[1]] = read.csv(paste0("Temp_",analyses[a],".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",analyses[a],".csv"), header=T)#
		covariates[[3]] = read.csv(paste0("Enty_",analyses[a],".csv"), header=T)#
		covariates[[4]] = read.csv(paste0("Crop_",analyses[a],".csv"), header=T)#
		covariates[[5]] = read.csv(paste0("Prim_",analyses[a],".csv"), header=T)#
		covariates[[6]] = read.csv(paste0("Secd_",analyses[a],".csv"), header=T)#
		covariates[[7]] = read.csv(paste0("Past_",analyses[a],".csv"), header=T)#
		covariate_names = c(paste0("Temp_",studyArea), paste0("Prec_",studyArea), paste0("Enty_",studyArea)),#
							paste0("Crop_",studyArea), paste0("Prim_",studyArea),#
							paste0("Secd_",studyArea), paste0("Past_",studyArea))#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}#
		timePoints = matrix(nrow=length(gridPoints)+1,ncol=1+length(covariates))#
		colnames(timePoints) = c("time",covariate_names)#
		timePoints[,1] = c(1901,rev(mostRecentSamplingDatum-gridPoints))#
		for (i in 1:dim(timePoints)[1])#
			{#
				timePoint = timePoints[i,1]#
				for (j in 1:length(covariates))#
					{#
						if (timePoint%in%covariates[[j]][,1]) timePoints[i,covariate_names[j]] = covariates[[j]][which(covariates[[j]][,1]==timePoint),2]#
					}#
			}#
		nberOfIntervals = dim(timePoints)[1]#
		txt = c()#
		txt = c(txt, paste0("\t\t<populationSizes>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.logPopSize\" dimension=\"",nberOfIntervals,"\"/>"))	#
		txt = c(txt, paste0("\t\t</populationSizes>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<lastObservedIndex>"))#
		# startingNA = rep(NA, length(covariates)); # startingNA[1] = 213#
		# txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",startingNA[1]-1,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",length(gridPoints)+1,"\"/>"))#
		if (length(covariates) > 1)#
			{#
				for (i in 2:length(covariates))#
					{#
						# indices = c(nberOfIntervals:1)[which(is.na(timePoints[,covariate_names[i]]))]; startingNA[i] = indices[length(indices)]#
						txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",i,"\" value=\"",length(gridPoints)+1,"\"/>"))#
					}#
			}#
		txt = c(txt, paste0("\t\t</lastObservedIndex>"))#
		txt = c(txt, paste0("\t\t<covariatePrecision>"))#
		for (i in 1:length(covariates))#
			{#
				maxDiff = 0#
				for (j in 2:dim(timePoints)[1])#
					{#
						if ((!is.na(as.numeric(timePoints[j,covariate_names[i]])))&(!is.na(as.numeric(timePoints[j-1,covariate_names[i]]))))#
							{#
								if (maxDiff < abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]])))#
									{#
										maxDiff = abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]]))#
									}#
							}#
					}#
				values = as.numeric(timePoints[,covariate_names[i]]); values = values[!is.na(values)]#
				covPrec = 1/((sd(values))^2)#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.covPrec.",i,"\" value=\"",covPrec,"\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</covariatePrecision>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<gridPoints>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.gridPoints\" value=\"",gridPoints_txt,"\"/>"))#
		txt = c(txt, paste0("\t\t</gridPoints>"))#
		txt = c(txt, paste0("\t\t<precisionParameter>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.precision\" value=\"1.0\" lower=\"0.0\"/>"))#
		txt = c(txt, paste0("\t\t</precisionParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<betaParameter>"))#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.beta.",i,"\" value=\"0\" lower=\"-1000\" upper=\"1000\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</betaParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<covariates>"))#
		for (i in 1:length(covariates))#
			{#
				c = 0; lastValue = "NA"; meanValue = mean(as.numeric(timePoints[,covariate_names[i]]), na.rm=T)#
				txt = c(txt, paste0("\t\t\t<matrixParameter id=\"",covariate_names[i],"\">"))#
				for (j in dim(timePoints)[1]:1)#
					{#
						c = c+1#
						if (!is.na(timePoints[j,covariate_names[i]]))#
							{#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",timePoints[j,covariate_names[i]],"\"/>"))#
								lastValue = timePoints[j,covariate_names[i]]#
							}	else	{#
								startValue = timePoints[max(which(!is.na(timePoints[,covariate_names[i]]))),covariate_names[i]]#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",startValue,"\" lower=\"0\"/>"))#
								# txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=NA","\" lower=\"0\"/>"))#
							}#
					}#
				txt = c(txt,"\t\t\t</matrixParameter>")#
			}#
		txt = c(txt,"\t\t</covariates>")#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1])#
					# {#
						# txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"15\">"))#
						# txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
						# txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
					# }#
				# txt = c(txt, "")#
			# }#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"30\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")	#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<normalPrior mean=\"0.0\" stdev=\"1\" offset=\"0.0\">"))#
				txt = c(txt, paste0("\t\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t\t</normalPrior>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		for (i in 1:length(covariates)) txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.gridPoints\"/>"))#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1]) txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
			# }#
		write(txt, paste0("GLM_",analyses[a],".xml"))#
	}
analyses = c("MRU_segL","MRU_segS","NIG_segL","NIG_segS")#
mostRecentSamplingDates = c(2018.1671232876713, 2018.1671232876713, 2019.1780821917807, 2019.1780821917807)#
#
for (a in 1:length(analyses))#
	{#
		mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		covariates[[1]] = read.csv(paste0("Temp_",analyses[a],".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",analyses[a],".csv"), header=T)#
		covariates[[3]] = read.csv(paste0("Enty_",analyses[a],".csv"), header=T)#
		covariates[[4]] = read.csv(paste0("Crop_",analyses[a],".csv"), header=T)#
		covariates[[5]] = read.csv(paste0("Prim_",analyses[a],".csv"), header=T)#
		covariates[[6]] = read.csv(paste0("Secd_",analyses[a],".csv"), header=T)#
		covariates[[7]] = read.csv(paste0("Past_",analyses[a],".csv"), header=T)#
		covariate_names = c(paste0("Temp_",analyses[a]), paste0("Prec_",analyses[a]), paste0("Enty_",analyses[a])),#
							paste0("Crop_",analyses[a]), paste0("Prim_",analyses[a]),#
							paste0("Secd_",analyses[a]), paste0("Past_",analyses[a]))#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}#
		timePoints = matrix(nrow=length(gridPoints)+1,ncol=1+length(covariates))#
		colnames(timePoints) = c("time",covariate_names)#
		timePoints[,1] = c(1901,rev(mostRecentSamplingDatum-gridPoints))#
		for (i in 1:dim(timePoints)[1])#
			{#
				timePoint = timePoints[i,1]#
				for (j in 1:length(covariates))#
					{#
						if (timePoint%in%covariates[[j]][,1]) timePoints[i,covariate_names[j]] = covariates[[j]][which(covariates[[j]][,1]==timePoint),2]#
					}#
			}#
		nberOfIntervals = dim(timePoints)[1]#
		txt = c()#
		txt = c(txt, paste0("\t\t<populationSizes>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.logPopSize\" dimension=\"",nberOfIntervals,"\"/>"))	#
		txt = c(txt, paste0("\t\t</populationSizes>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<lastObservedIndex>"))#
		# startingNA = rep(NA, length(covariates)); # startingNA[1] = 213#
		# txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",startingNA[1]-1,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",length(gridPoints)+1,"\"/>"))#
		if (length(covariates) > 1)#
			{#
				for (i in 2:length(covariates))#
					{#
						# indices = c(nberOfIntervals:1)[which(is.na(timePoints[,covariate_names[i]]))]; startingNA[i] = indices[length(indices)]#
						txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",i,"\" value=\"",length(gridPoints)+1,"\"/>"))#
					}#
			}#
		txt = c(txt, paste0("\t\t</lastObservedIndex>"))#
		txt = c(txt, paste0("\t\t<covariatePrecision>"))#
		for (i in 1:length(covariates))#
			{#
				maxDiff = 0#
				for (j in 2:dim(timePoints)[1])#
					{#
						if ((!is.na(as.numeric(timePoints[j,covariate_names[i]])))&(!is.na(as.numeric(timePoints[j-1,covariate_names[i]]))))#
							{#
								if (maxDiff < abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]])))#
									{#
										maxDiff = abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]]))#
									}#
							}#
					}#
				values = as.numeric(timePoints[,covariate_names[i]]); values = values[!is.na(values)]#
				covPrec = 1/((sd(values))^2)#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.covPrec.",i,"\" value=\"",covPrec,"\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</covariatePrecision>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<gridPoints>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.gridPoints\" value=\"",gridPoints_txt,"\"/>"))#
		txt = c(txt, paste0("\t\t</gridPoints>"))#
		txt = c(txt, paste0("\t\t<precisionParameter>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.precision\" value=\"1.0\" lower=\"0.0\"/>"))#
		txt = c(txt, paste0("\t\t</precisionParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<betaParameter>"))#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.beta.",i,"\" value=\"0\" lower=\"-1000\" upper=\"1000\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</betaParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<covariates>"))#
		for (i in 1:length(covariates))#
			{#
				c = 0; lastValue = "NA"; meanValue = mean(as.numeric(timePoints[,covariate_names[i]]), na.rm=T)#
				txt = c(txt, paste0("\t\t\t<matrixParameter id=\"",covariate_names[i],"\">"))#
				for (j in dim(timePoints)[1]:1)#
					{#
						c = c+1#
						if (!is.na(timePoints[j,covariate_names[i]]))#
							{#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",timePoints[j,covariate_names[i]],"\"/>"))#
								lastValue = timePoints[j,covariate_names[i]]#
							}	else	{#
								startValue = timePoints[max(which(!is.na(timePoints[,covariate_names[i]]))),covariate_names[i]]#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",startValue,"\" lower=\"0\"/>"))#
								# txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=NA","\" lower=\"0\"/>"))#
							}#
					}#
				txt = c(txt,"\t\t\t</matrixParameter>")#
			}#
		txt = c(txt,"\t\t</covariates>")#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1])#
					# {#
						# txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"15\">"))#
						# txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
						# txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
					# }#
				# txt = c(txt, "")#
			# }#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"30\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")	#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<normalPrior mean=\"0.0\" stdev=\"1\" offset=\"0.0\">"))#
				txt = c(txt, paste0("\t\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t\t</normalPrior>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		for (i in 1:length(covariates)) txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.gridPoints\"/>"))#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1]) txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
			# }#
		write(txt, paste0("GLM_",analyses[a],".xml"))#
	}
analyses = c("MRU_segL","MRU_segS","NIG_segL","NIG_segS")#
mostRecentSamplingDates = c(2018.1671232876713, 2018.1671232876713, 2019.1780821917807, 2019.1780821917807)
a
a=1
mostRecentSamplingDatum = mostRecentSamplingDates[a]
covariates = list(); dates = list(); ylims = list()
covariates[[1]] = read.csv(paste0("Temp_",analyses[a],".csv"), header=T)
covariates[[2]] = read.csv(paste0("Prec_",analyses[a],".csv"), header=T)
covariates[[3]] = read.csv(paste0("Enty_",analyses[a],".csv"), header=T)
covariates[[4]] = read.csv(paste0("Crop_",analyses[a],".csv"), header=T)
covariates[[5]] = read.csv(paste0("Prim_",analyses[a],".csv"), header=T)
covariates[[6]] = read.csv(paste0("Secd_",analyses[a],".csv"), header=T)
covariates[[7]] = read.csv(paste0("Past_",analyses[a],".csv"), header=T)
covariate_names = c(paste0("Temp_",analyses[a]), paste0("Prec_",analyses[a]), paste0("Enty_",analyses[a])),
analyses = c("MRU_segL","MRU_segS","NIG_segL","NIG_segS")#
mostRecentSamplingDates = c(2018.1671232876713, 2018.1671232876713, 2019.1780821917807, 2019.1780821917807)#
#
for (a in 1:length(analyses))#
	{#
		mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		covariates[[1]] = read.csv(paste0("Temp_",analyses[a],".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",analyses[a],".csv"), header=T)#
		covariates[[3]] = read.csv(paste0("Enty_",analyses[a],".csv"), header=T)#
		covariates[[4]] = read.csv(paste0("Crop_",analyses[a],".csv"), header=T)#
		covariates[[5]] = read.csv(paste0("Prim_",analyses[a],".csv"), header=T)#
		covariates[[6]] = read.csv(paste0("Secd_",analyses[a],".csv"), header=T)#
		covariates[[7]] = read.csv(paste0("Past_",analyses[a],".csv"), header=T)#
		covariate_names = c(paste0("Temp_",analyses[a]), paste0("Prec_",analyses[a]), paste0("Enty_",analyses[a]),#
							paste0("Crop_",analyses[a]), paste0("Prim_",analyses[a]),#
							paste0("Secd_",analyses[a]), paste0("Past_",analyses[a]))#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}#
		timePoints = matrix(nrow=length(gridPoints)+1,ncol=1+length(covariates))#
		colnames(timePoints) = c("time",covariate_names)#
		timePoints[,1] = c(1901,rev(mostRecentSamplingDatum-gridPoints))#
		for (i in 1:dim(timePoints)[1])#
			{#
				timePoint = timePoints[i,1]#
				for (j in 1:length(covariates))#
					{#
						if (timePoint%in%covariates[[j]][,1]) timePoints[i,covariate_names[j]] = covariates[[j]][which(covariates[[j]][,1]==timePoint),2]#
					}#
			}#
		nberOfIntervals = dim(timePoints)[1]#
		txt = c()#
		txt = c(txt, paste0("\t\t<populationSizes>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.logPopSize\" dimension=\"",nberOfIntervals,"\"/>"))	#
		txt = c(txt, paste0("\t\t</populationSizes>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<lastObservedIndex>"))#
		# startingNA = rep(NA, length(covariates)); # startingNA[1] = 213#
		# txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",startingNA[1]-1,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",length(gridPoints)+1,"\"/>"))#
		if (length(covariates) > 1)#
			{#
				for (i in 2:length(covariates))#
					{#
						# indices = c(nberOfIntervals:1)[which(is.na(timePoints[,covariate_names[i]]))]; startingNA[i] = indices[length(indices)]#
						txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",i,"\" value=\"",length(gridPoints)+1,"\"/>"))#
					}#
			}#
		txt = c(txt, paste0("\t\t</lastObservedIndex>"))#
		txt = c(txt, paste0("\t\t<covariatePrecision>"))#
		for (i in 1:length(covariates))#
			{#
				maxDiff = 0#
				for (j in 2:dim(timePoints)[1])#
					{#
						if ((!is.na(as.numeric(timePoints[j,covariate_names[i]])))&(!is.na(as.numeric(timePoints[j-1,covariate_names[i]]))))#
							{#
								if (maxDiff < abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]])))#
									{#
										maxDiff = abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]]))#
									}#
							}#
					}#
				values = as.numeric(timePoints[,covariate_names[i]]); values = values[!is.na(values)]#
				covPrec = 1/((sd(values))^2)#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.covPrec.",i,"\" value=\"",covPrec,"\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</covariatePrecision>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<gridPoints>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.gridPoints\" value=\"",gridPoints_txt,"\"/>"))#
		txt = c(txt, paste0("\t\t</gridPoints>"))#
		txt = c(txt, paste0("\t\t<precisionParameter>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.precision\" value=\"1.0\" lower=\"0.0\"/>"))#
		txt = c(txt, paste0("\t\t</precisionParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<betaParameter>"))#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.beta.",i,"\" value=\"0\" lower=\"-1000\" upper=\"1000\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</betaParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<covariates>"))#
		for (i in 1:length(covariates))#
			{#
				c = 0; lastValue = "NA"; meanValue = mean(as.numeric(timePoints[,covariate_names[i]]), na.rm=T)#
				txt = c(txt, paste0("\t\t\t<matrixParameter id=\"",covariate_names[i],"\">"))#
				for (j in dim(timePoints)[1]:1)#
					{#
						c = c+1#
						if (!is.na(timePoints[j,covariate_names[i]]))#
							{#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",timePoints[j,covariate_names[i]],"\"/>"))#
								lastValue = timePoints[j,covariate_names[i]]#
							}	else	{#
								startValue = timePoints[max(which(!is.na(timePoints[,covariate_names[i]]))),covariate_names[i]]#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",startValue,"\" lower=\"0\"/>"))#
								# txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=NA","\" lower=\"0\"/>"))#
							}#
					}#
				txt = c(txt,"\t\t\t</matrixParameter>")#
			}#
		txt = c(txt,"\t\t</covariates>")#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1])#
					# {#
						# txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"15\">"))#
						# txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
						# txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
					# }#
				# txt = c(txt, "")#
			# }#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"30\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")	#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<normalPrior mean=\"0.0\" stdev=\"1\" offset=\"0.0\">"))#
				txt = c(txt, paste0("\t\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t\t</normalPrior>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		for (i in 1:length(covariates)) txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.gridPoints\"/>"))#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1]) txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
			# }#
		write(txt, paste0("GLM_",analyses[a],".xml"))#
	}
analyses = c("MRU_segL","MRU_segS","NIG_segL","NIG_segS")#
mostRecentSamplingDates = c(2018.1671232876713, 2018.1671232876713, 2019.1780821917807, 2019.1780821917807)#
#
for (a in 1:length(analyses))#
	{#
		mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		covariates[[1]] = read.csv(paste0("Temp_",analyses[a],".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",analyses[a],".csv"), header=T)#
		# covariates[[3]] = read.csv(paste0("Enty_",analyses[a],".csv"), header=T)#
		covariates[[3]] = read.csv(paste0("Crop_",analyses[a],".csv"), header=T)#
		covariates[[4]] = read.csv(paste0("Prim_",analyses[a],".csv"), header=T)#
		covariates[[5]] = read.csv(paste0("Secd_",analyses[a],".csv"), header=T)#
		covariates[[6]] = read.csv(paste0("Past_",analyses[a],".csv"), header=T)#
		covariate_names = c(paste0("Temp_",analyses[a]), paste0("Prec_",analyses[a]), # paste0("Enty_",analyses[a]),#
							paste0("Crop_",analyses[a]), paste0("Prim_",analyses[a]),#
							paste0("Secd_",analyses[a]), paste0("Past_",analyses[a]))#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}#
		timePoints = matrix(nrow=length(gridPoints)+1,ncol=1+length(covariates))#
		colnames(timePoints) = c("time",covariate_names)#
		timePoints[,1] = c(1901,rev(mostRecentSamplingDatum-gridPoints))#
		for (i in 1:dim(timePoints)[1])#
			{#
				timePoint = timePoints[i,1]#
				for (j in 1:length(covariates))#
					{#
						if (timePoint%in%covariates[[j]][,1]) timePoints[i,covariate_names[j]] = covariates[[j]][which(covariates[[j]][,1]==timePoint),2]#
					}#
			}#
		nberOfIntervals = dim(timePoints)[1]#
		txt = c()#
		txt = c(txt, paste0("\t\t<populationSizes>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.logPopSize\" dimension=\"",nberOfIntervals,"\"/>"))	#
		txt = c(txt, paste0("\t\t</populationSizes>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<lastObservedIndex>"))#
		# startingNA = rep(NA, length(covariates)); # startingNA[1] = 213#
		# txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",startingNA[1]-1,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",length(gridPoints)+1,"\"/>"))#
		if (length(covariates) > 1)#
			{#
				for (i in 2:length(covariates))#
					{#
						# indices = c(nberOfIntervals:1)[which(is.na(timePoints[,covariate_names[i]]))]; startingNA[i] = indices[length(indices)]#
						txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",i,"\" value=\"",length(gridPoints)+1,"\"/>"))#
					}#
			}#
		txt = c(txt, paste0("\t\t</lastObservedIndex>"))#
		txt = c(txt, paste0("\t\t<covariatePrecision>"))#
		for (i in 1:length(covariates))#
			{#
				maxDiff = 0#
				for (j in 2:dim(timePoints)[1])#
					{#
						if ((!is.na(as.numeric(timePoints[j,covariate_names[i]])))&(!is.na(as.numeric(timePoints[j-1,covariate_names[i]]))))#
							{#
								if (maxDiff < abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]])))#
									{#
										maxDiff = abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]]))#
									}#
							}#
					}#
				values = as.numeric(timePoints[,covariate_names[i]]); values = values[!is.na(values)]#
				covPrec = 1/((sd(values))^2)#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.covPrec.",i,"\" value=\"",covPrec,"\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</covariatePrecision>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<gridPoints>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.gridPoints\" value=\"",gridPoints_txt,"\"/>"))#
		txt = c(txt, paste0("\t\t</gridPoints>"))#
		txt = c(txt, paste0("\t\t<precisionParameter>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.precision\" value=\"1.0\" lower=\"0.0\"/>"))#
		txt = c(txt, paste0("\t\t</precisionParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<betaParameter>"))#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.beta.",i,"\" value=\"0\" lower=\"-1000\" upper=\"1000\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</betaParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<covariates>"))#
		for (i in 1:length(covariates))#
			{#
				c = 0; lastValue = "NA"; meanValue = mean(as.numeric(timePoints[,covariate_names[i]]), na.rm=T)#
				txt = c(txt, paste0("\t\t\t<matrixParameter id=\"",covariate_names[i],"\">"))#
				for (j in dim(timePoints)[1]:1)#
					{#
						c = c+1#
						if (!is.na(timePoints[j,covariate_names[i]]))#
							{#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",timePoints[j,covariate_names[i]],"\"/>"))#
								lastValue = timePoints[j,covariate_names[i]]#
							}	else	{#
								startValue = timePoints[max(which(!is.na(timePoints[,covariate_names[i]]))),covariate_names[i]]#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",startValue,"\" lower=\"0\"/>"))#
								# txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=NA","\" lower=\"0\"/>"))#
							}#
					}#
				txt = c(txt,"\t\t\t</matrixParameter>")#
			}#
		txt = c(txt,"\t\t</covariates>")#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1])#
					# {#
						# txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"15\">"))#
						# txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
						# txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
					# }#
				# txt = c(txt, "")#
			# }#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"30\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")	#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<normalPrior mean=\"0.0\" stdev=\"1\" offset=\"0.0\">"))#
				txt = c(txt, paste0("\t\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t\t</normalPrior>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		for (i in 1:length(covariates)) txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.gridPoints\"/>"))#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1]) txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
			# }#
		write(txt, paste0("GLM_",analyses[a],".xml"))#
	}
covariate_names
timePoints
j
analyses = c("MRU_segL","MRU_segS","NIG_segL","NIG_segS")#
mostRecentSamplingDates = c(2018.1671232876713, 2018.1671232876713, 2019.1780821917807, 2019.1780821917807)
a=1
mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		covariates[[1]] = read.csv(paste0("Temp_",analyses[a],".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",analyses[a],".csv"), header=T)#
		# covariates[[3]] = read.csv(paste0("Enty_",analyses[a],".csv"), header=T)#
		covariates[[3]] = read.csv(paste0("Crop_",analyses[a],".csv"), header=T)#
		covariates[[4]] = read.csv(paste0("Prim_",analyses[a],".csv"), header=T)#
		covariates[[5]] = read.csv(paste0("Secd_",analyses[a],".csv"), header=T)#
		covariates[[6]] = read.csv(paste0("Past_",analyses[a],".csv"), header=T)#
		covariate_names = c(paste0("Temp_",analyses[a]), paste0("Prec_",analyses[a]), # paste0("Enty_",analyses[a]),#
							paste0("Crop_",analyses[a]), paste0("Prim_",analyses[a]),#
							paste0("Secd_",analyses[a]), paste0("Past_",analyses[a]))#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		gridPoints_txt = gridPoints[1]
gridPoints
gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}
timePoints = matrix(nrow=length(gridPoints)+1,ncol=1+length(covariates))
timePoints
colnames(timePoints) = c("time",covariate_names)
colnames(timePoints)
timePoints[,1] = c(1901,rev(mostRecentSamplingDatum-gridPoints))
timePoints
timePoint = timePoints[i,1]
timePoint
length(covariates)
timePoint%in%covariates[[j]][,1]
j=1
timePoint%in%covariates[[j]][,1]
timePoint
covariates[[j]][,1]
timePoint%in%covariates[[j]][,1]
timePoint
str(timePoint)
str(covariates[[j]][,1])
timePoint = as.numeric(timePoints[i,1])
timePoint%in%covariates[[j]][,1]
timePoint
covariates[[j]][,1]
timePoint%in%covariates[[j]][,1]
timePoint%in%as.numeric(covariates[[j]][,1])
timePoint
as.numeric(covariates[[j]][,1])
sum(timePoint==as.numeric(covariates[[j]][,1]))
timePoint==as.numeric(covariates[[j]][,1])
timePoint
covariates[[j]][,1]
covariates[[j]][117,1]
covariates[[j]][117,1]==2017
covariates[[j]][117,1]==timePoint
str(timePoint)
str(covariates[[j]][117,1])
timePoint = as.integer(timePoints[i,1])
timePoint
sum(timePoint==as.numeric(covariates[[j]][,1]))
mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		covariates[[1]] = read.csv(paste0("Temp_",analyses[a],".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",analyses[a],".csv"), header=T)#
		# covariates[[3]] = read.csv(paste0("Enty_",analyses[a],".csv"), header=T)#
		covariates[[3]] = read.csv(paste0("Crop_",analyses[a],".csv"), header=T)#
		covariates[[4]] = read.csv(paste0("Prim_",analyses[a],".csv"), header=T)#
		covariates[[5]] = read.csv(paste0("Secd_",analyses[a],".csv"), header=T)#
		covariates[[6]] = read.csv(paste0("Past_",analyses[a],".csv"), header=T)#
		covariate_names = c(paste0("Temp_",analyses[a]), paste0("Prec_",analyses[a]), # paste0("Enty_",analyses[a]),#
							paste0("Crop_",analyses[a]), paste0("Prim_",analyses[a]),#
							paste0("Secd_",analyses[a]), paste0("Past_",analyses[a]))#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}#
		timePoints = matrix(nrow=length(gridPoints)+1,ncol=1+length(covariates))#
		colnames(timePoints) = c("time",covariate_names)#
		timePoints[,1] = c(1901,rev(mostRecentSamplingDatum-gridPoints))#
		for (i in 1:dim(timePoints)[1])#
			{#
				timePoint = as.integer(timePoints[i,1])#
				for (j in 1:length(covariates))#
					{#
						if (sum(timePoint==as.numeric(covariates[[j]][,1])) == 1)#
							{#
								timePoints[i,covariate_names[j]] = covariates[[j]][which(covariates[[j]][,1]==timePoint),2]#
							}#
					}#
			}
timePoints
analyses = c("MRU_segL","MRU_segS","NIG_segL","NIG_segS")#
mostRecentSamplingDates = c(2018.1671232876713, 2018.1671232876713, 2019.1780821917807, 2019.1780821917807)#
#
for (a in 1:length(analyses))#
	{#
		mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		covariates[[1]] = read.csv(paste0("Temp_",analyses[a],".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",analyses[a],".csv"), header=T)#
		# covariates[[3]] = read.csv(paste0("Enty_",analyses[a],".csv"), header=T)#
		covariates[[3]] = read.csv(paste0("Crop_",analyses[a],".csv"), header=T)#
		covariates[[4]] = read.csv(paste0("Prim_",analyses[a],".csv"), header=T)#
		covariates[[5]] = read.csv(paste0("Secd_",analyses[a],".csv"), header=T)#
		covariates[[6]] = read.csv(paste0("Past_",analyses[a],".csv"), header=T)#
		covariate_names = c(paste0("Temp_",analyses[a]), paste0("Prec_",analyses[a]), # paste0("Enty_",analyses[a]),#
							paste0("Crop_",analyses[a]), paste0("Prim_",analyses[a]),#
							paste0("Secd_",analyses[a]), paste0("Past_",analyses[a]))#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}#
		timePoints = matrix(nrow=length(gridPoints)+1,ncol=1+length(covariates))#
		colnames(timePoints) = c("time",covariate_names)#
		timePoints[,1] = c(1901,rev(mostRecentSamplingDatum-gridPoints))#
		for (i in 1:dim(timePoints)[1])#
			{#
				timePoint = as.integer(timePoints[i,1])#
				for (j in 1:length(covariates))#
					{#
						if (sum(timePoint==as.numeric(covariates[[j]][,1])) == 1)#
							{#
								timePoints[i,covariate_names[j]] = covariates[[j]][which(covariates[[j]][,1]==timePoint),2]#
							}#
					}#
			}#
		nberOfIntervals = dim(timePoints)[1]#
		txt = c()#
		txt = c(txt, paste0("\t\t<populationSizes>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.logPopSize\" dimension=\"",nberOfIntervals,"\"/>"))	#
		txt = c(txt, paste0("\t\t</populationSizes>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<lastObservedIndex>"))#
		# startingNA = rep(NA, length(covariates)); # startingNA[1] = 213#
		# txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",startingNA[1]-1,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",length(gridPoints)+1,"\"/>"))#
		if (length(covariates) > 1)#
			{#
				for (i in 2:length(covariates))#
					{#
						# indices = c(nberOfIntervals:1)[which(is.na(timePoints[,covariate_names[i]]))]; startingNA[i] = indices[length(indices)]#
						txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",i,"\" value=\"",length(gridPoints)+1,"\"/>"))#
					}#
			}#
		txt = c(txt, paste0("\t\t</lastObservedIndex>"))#
		txt = c(txt, paste0("\t\t<covariatePrecision>"))#
		for (i in 1:length(covariates))#
			{#
				maxDiff = 0#
				for (j in 2:dim(timePoints)[1])#
					{#
						if ((!is.na(as.numeric(timePoints[j,covariate_names[i]])))&(!is.na(as.numeric(timePoints[j-1,covariate_names[i]]))))#
							{#
								if (maxDiff < abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]])))#
									{#
										maxDiff = abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]]))#
									}#
							}#
					}#
				values = as.numeric(timePoints[,covariate_names[i]]); values = values[!is.na(values)]#
				covPrec = 1/((sd(values))^2)#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.covPrec.",i,"\" value=\"",covPrec,"\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</covariatePrecision>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<gridPoints>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.gridPoints\" value=\"",gridPoints_txt,"\"/>"))#
		txt = c(txt, paste0("\t\t</gridPoints>"))#
		txt = c(txt, paste0("\t\t<precisionParameter>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.precision\" value=\"1.0\" lower=\"0.0\"/>"))#
		txt = c(txt, paste0("\t\t</precisionParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<betaParameter>"))#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.beta.",i,"\" value=\"0\" lower=\"-1000\" upper=\"1000\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</betaParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<covariates>"))#
		for (i in 1:length(covariates))#
			{#
				c = 0; lastValue = "NA"; meanValue = mean(as.numeric(timePoints[,covariate_names[i]]), na.rm=T)#
				txt = c(txt, paste0("\t\t\t<matrixParameter id=\"",covariate_names[i],"\">"))#
				for (j in dim(timePoints)[1]:1)#
					{#
						c = c+1#
						if (!is.na(timePoints[j,covariate_names[i]]))#
							{#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",timePoints[j,covariate_names[i]],"\"/>"))#
								lastValue = timePoints[j,covariate_names[i]]#
							}	else	{#
								startValue = timePoints[max(which(!is.na(timePoints[,covariate_names[i]]))),covariate_names[i]]#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",startValue,"\" lower=\"0\"/>"))#
								# txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=NA","\" lower=\"0\"/>"))#
							}#
					}#
				txt = c(txt,"\t\t\t</matrixParameter>")#
			}#
		txt = c(txt,"\t\t</covariates>")#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1])#
					# {#
						# txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"15\">"))#
						# txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
						# txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
					# }#
				# txt = c(txt, "")#
			# }#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"30\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")	#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<normalPrior mean=\"0.0\" stdev=\"1\" offset=\"0.0\">"))#
				txt = c(txt, paste0("\t\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t\t</normalPrior>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		for (i in 1:length(covariates)) txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.gridPoints\"/>"))#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1]) txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
			# }#
		write(txt, paste0("GLM_",analyses[a],".xml"))#
	}
analyses = c("MRU_segL","MRU_segS","NIG_segL","NIG_segS")#
mostRecentSamplingDates = c(2018.1671232876713, 2018.1671232876713, 2019.1780821917807, 2019.1780821917807)#
#
for (a in 1:length(analyses))#
	{#
		mostRecentSamplingDatum = mostRecentSamplingDates[a]#
		covariates = list(); dates = list(); ylims = list()#
		covariates[[1]] = read.csv(paste0("Temp_",analyses[a],".csv"), header=T)#
		covariates[[2]] = read.csv(paste0("Prec_",analyses[a],".csv"), header=T)#
		# covariates[[3]] = read.csv(paste0("Enty_",analyses[a],".csv"), header=T)#
		covariates[[3]] = read.csv(paste0("Crop_",analyses[a],".csv"), header=T)#
		covariates[[4]] = read.csv(paste0("Prim_",analyses[a],".csv"), header=T)#
		covariates[[5]] = read.csv(paste0("Secd_",analyses[a],".csv"), header=T)#
		covariates[[6]] = read.csv(paste0("Past_",analyses[a],".csv"), header=T)#
		covariate_names = c(paste0("Temp_",analyses[a]), paste0("Prec_",analyses[a]), # paste0("Enty_",analyses[a]),#
							paste0("Crop_",analyses[a]), paste0("Prim_",analyses[a]),#
							paste0("Secd_",analyses[a]), paste0("Past_",analyses[a]))#
		gridPoints = round(mostRecentSamplingDatum-rev(1902:floor(mostRecentSamplingDatum)),4)#
		gridPoints_txt = gridPoints[1]#
		for (i in 2:length(gridPoints))#
			{#
				gridPoints_txt = paste(gridPoints_txt,gridPoints[i],sep=" ")#
			}#
		timePoints = matrix(nrow=length(gridPoints)+1,ncol=1+length(covariates))#
		colnames(timePoints) = c("time",covariate_names)#
		timePoints[,1] = c(1901,rev(mostRecentSamplingDatum-gridPoints))#
		for (i in 1:dim(timePoints)[1])#
			{#
				timePoint = as.integer(timePoints[i,1])#
				for (j in 1:length(covariates))#
					{#
						if (sum(timePoint==as.numeric(covariates[[j]][,1])) == 1)#
							{#
								timePoints[i,covariate_names[j]] = covariates[[j]][which(covariates[[j]][,1]==timePoint),2]#
							}#
					}#
			}#
		nberOfIntervals = dim(timePoints)[1]#
		txt = c()#
		txt = c(txt, paste0("\t\t<populationSizes>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.logPopSize\" dimension=\"",nberOfIntervals,"\"  value=\"1.0\"/>"))	#
		txt = c(txt, paste0("\t\t</populationSizes>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<lastObservedIndex>"))#
		# startingNA = rep(NA, length(covariates)); # startingNA[1] = 213#
		# txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",startingNA[1]-1,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",1,"\" value=\"",length(gridPoints)+1,"\"/>"))#
		if (length(covariates) > 1)#
			{#
				for (i in 2:length(covariates))#
					{#
						# indices = c(nberOfIntervals:1)[which(is.na(timePoints[,covariate_names[i]]))]; startingNA[i] = indices[length(indices)]#
						txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.lastObservedIndex.",i,"\" value=\"",length(gridPoints)+1,"\"/>"))#
					}#
			}#
		txt = c(txt, paste0("\t\t</lastObservedIndex>"))#
		txt = c(txt, paste0("\t\t<covariatePrecision>"))#
		for (i in 1:length(covariates))#
			{#
				maxDiff = 0#
				for (j in 2:dim(timePoints)[1])#
					{#
						if ((!is.na(as.numeric(timePoints[j,covariate_names[i]])))&(!is.na(as.numeric(timePoints[j-1,covariate_names[i]]))))#
							{#
								if (maxDiff < abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]])))#
									{#
										maxDiff = abs(as.numeric(timePoints[j,covariate_names[i]])-as.numeric(timePoints[j-1,covariate_names[i]]))#
									}#
							}#
					}#
				values = as.numeric(timePoints[,covariate_names[i]]); values = values[!is.na(values)]#
				covPrec = 1/((sd(values))^2)#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.covPrec.",i,"\" value=\"",covPrec,"\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</covariatePrecision>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<gridPoints>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.gridPoints\" value=\"",gridPoints_txt,"\"/>"))#
		txt = c(txt, paste0("\t\t</gridPoints>"))#
		txt = c(txt, paste0("\t\t<precisionParameter>"))#
		txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.precision\" value=\"0.1\" lower=\"0.0\"/>"))#
		txt = c(txt, paste0("\t\t</precisionParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<betaParameter>"))#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<parameter id=\"skygrid.beta.",i,"\" value=\"0\" lower=\"-1000\" upper=\"1000\"/>"))#
			}#
		txt = c(txt, paste0("\t\t</betaParameter>"))#
		txt = c(txt, "")#
		txt = c(txt, paste0("\t\t<covariates>"))#
		for (i in 1:length(covariates))#
			{#
				c = 0; lastValue = "NA"; meanValue = mean(as.numeric(timePoints[,covariate_names[i]]), na.rm=T)#
				txt = c(txt, paste0("\t\t\t<matrixParameter id=\"",covariate_names[i],"\">"))#
				for (j in dim(timePoints)[1]:1)#
					{#
						c = c+1#
						if (!is.na(timePoints[j,covariate_names[i]]))#
							{#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",timePoints[j,covariate_names[i]],"\"/>"))#
								lastValue = timePoints[j,covariate_names[i]]#
							}	else	{#
								startValue = timePoints[max(which(!is.na(timePoints[,covariate_names[i]]))),covariate_names[i]]#
								txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=\"",startValue,"\" lower=\"0\"/>"))#
								# txt = c(txt, paste0("\t\t\t\t<parameter id=\"cov",i,".",c,"\" value=NA","\" lower=\"0\"/>"))#
							}#
					}#
				txt = c(txt,"\t\t\t</matrixParameter>")#
			}#
		txt = c(txt,"\t\t</covariates>")#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1])#
					# {#
						# txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"15\">"))#
						# txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
						# txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
					# }#
				# txt = c(txt, "")#
			# }#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t<randomWalkOperator windowSize=\"1.0\" weight=\"30\">"))#
				txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t</randomWalkOperator>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")	#
		for (i in 1:length(covariates))#
			{#
				txt = c(txt, paste0("\t\t\t<normalPrior mean=\"0.0\" stdev=\"1\" offset=\"0.0\">"))#
				txt = c(txt, paste0("\t\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
				txt = c(txt, paste0("\t\t\t</normalPrior>"))#
			}#
		txt = c(txt,"","XXXXXXXXXXXXXXXXXX","")#
		for (i in 1:length(covariates)) txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.beta.",i,"\"/>"))#
		txt = c(txt, paste0("\t\t\t<parameter idref=\"skygrid.gridPoints\"/>"))#
		# for (i in 1:length(covariates))#
			# {#
				# for (j in startingNA[i]:dim(timePoints)[1]) txt = c(txt, paste0("\t\t\t<parameter idref=\"cov",i,".",j,"\"/>"))#
			# }#
		write(txt, paste0("GLM_",analyses[a],".xml"))#
	}
