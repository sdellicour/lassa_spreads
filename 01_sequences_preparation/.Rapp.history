mismataches = mismataches_S; metadata = read.csv("LASV_S_sequences_1.csv", header=T); fasta = scan("LASV_S_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
suspicous_pairs_list = list(); suspicous_pairs = c(); nS = list()#
for (m in 0:5)#
	{#
		n = 0#
		if (m == 0) suspicous_pairs = c(suspicous_pairs, paste0(m," NUCLEOTIDE MISMATCH ##############################"), " ")#
		if (m == 1) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHE #############################"), " ")#
		if (m >= 2) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHES ############################"), " ")#
		for (i in 2:dim(mismataches_L)[1])#
			{#
				for (j in 1:(i-1))#
					{#
						if (mismataches_L[i,j] == m)#
							{#
								if (m == 0) suspicous_pairs_list[[length(suspicous_pairs_list)+1]] = c(row.names(mismataches)[i],row.names(mismataches)[j])#
								suspicous_pairs = c(suspicous_pairs, row.names(mismataches)[i]); # cat(paste0(row.names(mismataches)[i],"\n"))#
								suspicous_pairs = c(suspicous_pairs, row.names(mismataches)[j]); # cat(paste0(row.names(mismataches)[j],"\n"))#
								suspicous_pairs = c(suspicous_pairs, " "); n = n + 1; # cat("\n")#
							}#
					}#
			}#
		nS[[m+1]] = n#
	}
write(suspicous_pairs, "LASV_S_alignment_1.txt"); print(nS)
sequences_to_remove = c(); sequences_to_keep = c()#
for (i in 1:length(suspicous_pairs_list))#
	{#
		seqIDs = c(); datasets = rep(0,length(suspicous_pairs_list[[i]]))#
		for (j in 1:length(suspicous_pairs_list[[i]]))#
			{#
				if (grepl("_NGA-",suspicous_pairs_list[[i]][j]))#
					{#
						seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"NGA-"))[1]); datasets[j] = 1#
					}#
				if (grepl("\\|",suspicous_pairs_list[[i]][j]))#
					{#
						seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"\\|"))[1]); datasets[j] = 2#
					}#
			}#
		precisionScores = rep(0,length(seqIDs))#
		for (j in 1:length(seqIDs))#
			{#
				index = which(grepl(seqIDs[j], metadata[,"trait"])); # print(metadata[index,])#
				if (length(index) == 1)#
					{#
						if (!is.na(metadata[index,"country"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"district"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"location"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"lat"])) precisionScores[j] = precisionScores[j] + 10#
					}	else		{#
						precisionScores[j] = 0; print(seqIDs[j])#
					}#
			}#
		index = NA#
		if (length(unique(datasets)) == 2) index = which(datasets!=1)#
		if (length(unique(datasets)) == 1)#
			{#
				if (length(unique(precisionScores)) == 2) index = which(precisionScores!=max(precisionScores))#
				if (length(unique(precisionScores)) == 1) index = sample(1:2,1)#
			}#
		sequences_to_remove = c(sequences_to_remove, suspicous_pairs_list[[i]][index])#
		sequences_to_keep = c(sequences_to_keep, suspicous_pairs_list[[i]][-index])#
	}#
metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]#
sequences = c(); sequences_to_remove = c()#
for (i in 1:dim(metadata)[1])#
	{#
		seqID = NA#
		if (grepl("_NGA-",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"NGA-"))[1]#
		if (grepl("\\|",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"\\|"))[1]#
		index = which(grepl(seqID ,fasta))#
		if (length(index) != 1)#
			{#
				print(i); sequences_to_remove = c(sequences_to_remove, as.character(metadata[i,"trait"]))#
			}	else	{#
				nchar1 = nchar(as.character(metadata[i,"district"])); if (is.na(nchar1)) nchar1 = 0#
				nchar2 = nchar(as.character(metadata[i,"location"])); if (is.na(nchar2)) nchar2 = 0#
				nchar3 = nchar(as.character(metadata[i,"lat"])); if (is.na(nchar3)) nchar3 = 0#
				nchar4 = nchar(as.character(metadata[i,"lon"])); if (is.na(nchar4)) nchar4 = 0#
				if ((nchar1+nchar2+nchar3+nchar4) != 0)#
					{#
						sequences = c(sequences, fasta[index], fasta[index+1])#
					}	else	{#
						sequences_to_remove = c(sequences_to_remove, as.character(metadata[i,"trait"]))#
					}#
			}#
	}
metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]
write.csv(metadata, "LASV_S_alignment_2a.csv"); write(sequences, "LASV_S_alignment_2.fasta")
sequences_to_remove
write(sequences, "LASV_S_alignment_2.fasta", row.names=F)
write.csv(metadata, "LASV_S_alignment_2a.csv", row.names=F)
mismataches = mismataches_L; metadata  = read.csv("LASV_L_sequences_1.csv", header=T); fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
# mismataches = mismataches_S; metadata = read.csv("LASV_S_sequences_1.csv", header=T); fasta = scan("LASV_S_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
suspicous_pairs_list = list(); suspicous_pairs = c(); nS = list()#
for (m in 0:5)#
	{#
		n = 0#
		if (m == 0) suspicous_pairs = c(suspicous_pairs, paste0(m," NUCLEOTIDE MISMATCH ##############################"), " ")#
		if (m == 1) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHE #############################"), " ")#
		if (m >= 2) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHES ############################"), " ")#
		for (i in 2:dim(mismataches_L)[1])#
			{#
				for (j in 1:(i-1))#
					{#
						if (mismataches_L[i,j] == m)#
							{#
								if (m == 0) suspicous_pairs_list[[length(suspicous_pairs_list)+1]] = c(row.names(mismataches)[i],row.names(mismataches)[j])#
								suspicous_pairs = c(suspicous_pairs, row.names(mismataches)[i]); # cat(paste0(row.names(mismataches)[i],"\n"))#
								suspicous_pairs = c(suspicous_pairs, row.names(mismataches)[j]); # cat(paste0(row.names(mismataches)[j],"\n"))#
								suspicous_pairs = c(suspicous_pairs, " "); n = n + 1; # cat("\n")#
							}#
					}#
			}#
		nS[[m+1]] = n#
	}#
write(suspicous_pairs, "LASV_L_alignment_1.txt"); print(nS)#
# write(suspicous_pairs, "LASV_S_alignment_1.txt"); print(nS)#
sequences_to_remove = c(); sequences_to_keep = c()#
for (i in 1:length(suspicous_pairs_list))#
	{#
		seqIDs = c(); datasets = rep(0,length(suspicous_pairs_list[[i]]))#
		for (j in 1:length(suspicous_pairs_list[[i]]))#
			{#
				if (grepl("_NGA-",suspicous_pairs_list[[i]][j]))#
					{#
						seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"NGA-"))[1]); datasets[j] = 1#
					}#
				if (grepl("\\|",suspicous_pairs_list[[i]][j]))#
					{#
						seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"\\|"))[1]); datasets[j] = 2#
					}#
			}#
		precisionScores = rep(0,length(seqIDs))#
		for (j in 1:length(seqIDs))#
			{#
				index = which(grepl(seqIDs[j], metadata[,"trait"])); # print(metadata[index,])#
				if (length(index) == 1)#
					{#
						if (!is.na(metadata[index,"country"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"district"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"location"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"lat"])) precisionScores[j] = precisionScores[j] + 10#
					}	else		{#
						precisionScores[j] = 0; print(seqIDs[j])#
					}#
			}#
		index = NA#
		if (length(unique(datasets)) == 2) index = which(datasets!=1)#
		if (length(unique(datasets)) == 1)#
			{#
				if (length(unique(precisionScores)) == 2) index = which(precisionScores!=max(precisionScores))#
				if (length(unique(precisionScores)) == 1) index = sample(1:2,1)#
			}#
		sequences_to_remove = c(sequences_to_remove, suspicous_pairs_list[[i]][index])#
		sequences_to_keep = c(sequences_to_keep, suspicous_pairs_list[[i]][-index])#
	}#
metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]#
sequences = c(); sequences_to_remove = c()#
for (i in 1:dim(metadata)[1])#
	{#
		seqID = NA#
		if (grepl("_NGA-",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"NGA-"))[1]#
		if (grepl("\\|",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"\\|"))[1]#
		index = which(grepl(seqID ,fasta))#
		if (length(index) != 1)#
			{#
				print(i); sequences_to_remove = c(sequences_to_remove, as.character(metadata[i,"trait"]))#
			}	else	{#
				nchar1 = nchar(as.character(metadata[i,"district"])); if (is.na(nchar1)) nchar1 = 0#
				nchar2 = nchar(as.character(metadata[i,"location"])); if (is.na(nchar2)) nchar2 = 0#
				nchar3 = nchar(as.character(metadata[i,"lat"])); if (is.na(nchar3)) nchar3 = 0#
				nchar4 = nchar(as.character(metadata[i,"lon"])); if (is.na(nchar4)) nchar4 = 0#
				if ((nchar1+nchar2+nchar3+nchar4) != 0)#
					{#
						sequences = c(sequences, fasta[index], fasta[index+1])#
					}	else	{#
						sequences_to_remove = c(sequences_to_remove, as.character(metadata[i,"trait"]))#
					}#
			}#
	}#
metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]#
write.csv(metadata, "LASV_L_alignment_2a.csv", row.names=F); write(sequences, "LASV_L_alignment_2.fasta")#
# write.csv(metadata, "LASV_S_alignment_2a.csv", row.names=F); write(sequences, "LASV_S_alignment_2.fasta")
library(rgeos)#
library(diagram)#
library(seraphim)#
library(lubridate)#
library(OutbreakTools)#
#
analyses = c("LASV_segment_L", "LASV_segment_S")#
# admins0_NGA = getData("GADM", country="NGA", level=0)#
# admins
analyses
metadata = read.csv("LASV_L_alignment_2.csv", header=T)
i=1
segment = unlist(strsplit(analyses[i],"_"))[length(unlist(strsplit(analyses[i],"_")))]#
		metadata = read.csv("LASV_",segment,"_alignment_2.csv", header=T)
segment
segment = unlist(strsplit(analyses[i],"_"))[length(unlist(strsplit(analyses[i],"_")))]#
		metadata = read.csv(paste0("LASV_",segment,"_alignment_2.csv"), header=T)
segment = unlist(strsplit(analyses[i],"_"))[length(unlist(strsplit(analyses[i],"_")))]#
		metadata = read.csv(paste0("LASV_",segment,"_alignment_2.csv"), header=T)#
		sequences = read.csv(paste0("LASV_",segment,"_alignment_2.fasta"), header=T)
segment
sequences
head(metadata)
unique(metadata[,"country"])
indices1a = which(metadata[,"country"]=="NGA")
indices1a
indices2a = which(grepl("_NGA_",sequences)); indices2b = which(!grepl("_NGA_",sequences))
indices2a
indices2b
sequences[1:10]
sequences = scan(paste0("LASV_",segment,"_alignment_2.fasta"), what="", sep="\n", quiet=TRUE)
metadata = read.csv(paste0("LASV_",segment,"_alignment_2.csv"), header=T)
metadata
segment = unlist(strsplit(analyses[i],"_"))[length(unlist(strsplit(analyses[i],"_")))]#
		metadata = read.csv(paste0("LASV_",segment,"_alignment_2.csv"), header=T)#
		sequences = scan(paste0("LASV_",segment,"_alignment_2.fasta"), what="", sep="\n", quiet=TRUE)#
		indices1a = which(metadata[,"country"]=="NGA"); indices2a = which(metadata[,"country"]!="NGA")#
		indices2a = which(grepl("_NGA_",sequences)); indices2b = which(!grepl("_NGA_",sequences))
indices1a
indices2a
for (i in 1:length(analyses))#
	{#
		segment = unlist(strsplit(analyses[i],"_"))[length(unlist(strsplit(analyses[i],"_")))]#
		metadata = read.csv(paste0("LASV_",segment,"_alignment_2.csv"), header=T)#
		sequences = scan(paste0("LASV_",segment,"_alignment_2.fasta"), what="", sep="\n", quiet=TRUE)#
		indices1a = which(metadata[,"country"]=="NGA"); indices2a = which(metadata[,"country"]!="NGA")#
		indices2a = which(grepl("_NGA_",sequences)); indices2b = which(!grepl("_NGA_",sequences))#
		write.csv(metadata[indices1a,], paste0("LASV_NGA_segment",segment,".csv"), row.names=F, quote=F)#
		write.csv(metadata[indices1b,], paste0("LASV_MRU_segment",segment,".csv"), row.names=F, quote=F)		#
		sequencesNGA = c(); sequencesMRU = c()#
		for (j in 1:length(indices2a))#
			{#
				sequencesNGA = c(sequencesNGA, sequences[indices2a[i]], sequences[indices2a[i]+1])#
			}#
		for (j in 1:length(indices2b))#
			{#
				sequencesMRU = c(sequencesMRU, sequences[indices2b[i]], sequences[indices2b[i]+1])#
			}#
		write(sequencesNGA, paste0("LASV_NGA_segment",segment,".fasta"))#
		write(sequencesMRU, paste0("LASV_MRU_segment",segment,".fasta"))#
	}
for (i in 1:length(analyses))#
	{#
		segment = unlist(strsplit(analyses[i],"_"))[length(unlist(strsplit(analyses[i],"_")))]#
		metadata = read.csv(paste0("LASV_",segment,"_alignment_2.csv"), header=T)#
		sequences = scan(paste0("LASV_",segment,"_alignment_2.fasta"), what="", sep="\n", quiet=TRUE)#
		indices1a = which(metadata[,"country"]=="NGA"); indices1b = which(metadata[,"country"]!="NGA")#
		indices2a = which(grepl("_NGA_",sequences)); indices2b = which(!grepl("_NGA_",sequences))#
		write.csv(metadata[indices1a,], paste0("LASV_NGA_segment",segment,".csv"), row.names=F, quote=F)#
		write.csv(metadata[indices1b,], paste0("LASV_MRU_segment",segment,".csv"), row.names=F, quote=F)		#
		sequencesNGA = c(); sequencesMRU = c()#
		for (j in 1:length(indices2a))#
			{#
				sequencesNGA = c(sequencesNGA, sequences[indices2a[i]], sequences[indices2a[i]+1])#
			}#
		for (j in 1:length(indices2b))#
			{#
				sequencesMRU = c(sequencesMRU, sequences[indices2b[i]], sequences[indices2b[i]+1])#
			}#
		write(sequencesNGA, paste0("LASV_NGA_segment",segment,".fasta"))#
		write(sequencesMRU, paste0("LASV_MRU_segment",segment,".fasta"))#
	}
library(rgeos)#
library(diagram)#
library(seraphim)#
library(lubridate)#
library(OutbreakTools)#
#
analyses = c("LASV_segment_L", "LASV_segment_S")#
# admins0_NGA = getData("GADM", country="NGA", level=0)#
# admins1_NGA = getData("GADM", country="NGA", level=1)#
# admins2_NGA = getData("GADM", country="NGA", level=2)#
# admins0_SLE = getData("GADM", country="SLE", level=0)#
# admins1_SLE = getData("GADM", country="SLE", level=1)#
# admins2_SLE = getData("GADM", country="SLE", level=2)#
#
# 1. Merging the two data sets --> "..._sequences_1.csv"#
#
L_all_metadata = read.csv("Dataset_Nigerian_study/LASV_segment_L.csv", header=T)#
S_all_metadata = read.csv("Dataset_Nigerian_study/LASV_segment_S.csv", header=T)#
L_all_metadata[which(L_all_metadata[,"location"]=="COORDINATES"),"location"] = NA#
S_all_metadata[which(S_all_metadata[,"location"]=="COORDINATES"),"location"] = NA#
metadata = read.csv("Dataset_of_Gytis_Dudas/LASV_metadata.csv", header=T); metadata_L = c()#
for (i in 1:dim(metadata)[1])#
	{#
		if (nchar(as.character(metadata[i,"L"])) > 0)#
			{#
				metadata_line = matrix(nrow=1, ncol=dim(L_all_metadata)[2])#
				colnames(metadata_line) = colnames(L_all_metadata)#
				metadata_line = as.data.frame(metadata_line)#
				metadata_line[1,"trait"] = as.character(metadata[i,"L"])#
				metadata_line[1,"country"] = as.character(metadata[i,"country"])#
				metadata_line[1,"district"] = as.character(metadata[i,"district"])#
				metadata_line[1,"location"] = as.character( metadata[i,"location"])#
				metadata_line[1,"lat"] = metadata[i,"lat"]#
				metadata_line[1,"lon"] = metadata[i,"lon"]#
				metadata_line[1,which(metadata_line[1,]=="")] = NA#
				L_all_metadata = rbind(L_all_metadata, metadata_line)#
			}#
	}#
write.csv(L_all_metadata, "LASV_L_sequences_1.csv", quote=F, row.names=F)#
metadata = read.csv("Dataset_of_Gytis_Dudas/LASV_metadata.csv", header=T); metadata_S = c()#
for (i in 1:dim(metadata)[1])#
	{#
		if (nchar(as.character(metadata[i,"S"])) > 0)#
			{#
				metadata_line = matrix(nrow=1, ncol=dim(S_all_metadata)[2])#
				colnames(metadata_line) = colnames(S_all_metadata)#
				metadata_line = as.data.frame(metadata_line)#
				metadata_line[1,"trait"] = as.character(metadata[i,"S"])#
				metadata_line[1,"country"] = as.character(metadata[i,"country"])#
				metadata_line[1,"district"] = as.character(metadata[i,"district"])#
				metadata_line[1,"location"] = as.character( metadata[i,"location"])#
				metadata_line[1,"lat"] = metadata[i,"lat"]#
				metadata_line[1,"lon"] = metadata[i,"lon"]#
				metadata_line[1,which(metadata_line[1,]=="")] = NA#
				S_all_metadata = rbind(S_all_metadata, metadata_line)#
			}#
	}#
write.csv(S_all_metadata, "LASV_S_sequences_1.csv", quote=F, row.names=F)
# 2. Checking for potentially suspicious, i.e. identical, sequence to remove --> "..._2.fasta" and "..._2.csv"#
#
mismatchesMatrix = function(sequences)#
	{#
		mmd = matrix(nrow=length(sequences), ncol=length(sequences))#
		for (i in 1:length(sequences))#
			{#
				for (j in 1:i)#
					{#
						if (i == j)#
							{#
								mmd[j,i] = 0#
							}	else	{#
								seq1 = unlist(strsplit(sequences[j],""))#
								seq2 = unlist(strsplit(sequences[i],""))#
								seq2 = seq2[which((seq1=="A")|(seq1=="C")|(seq1=="G")|(seq1=="T")|(seq1=="a")|(seq1=="c")|(seq1=="g")|(seq1=="t"))]#
								seq1 = seq1[which((seq1=="A")|(seq1=="C")|(seq1=="G")|(seq1=="T")|(seq1=="a")|(seq1=="c")|(seq1=="g")|(seq1=="t"))]#
								seq1 = seq1[which((seq2=="A")|(seq2=="C")|(seq2=="G")|(seq2=="T")|(seq2=="a")|(seq2=="c")|(seq2=="g")|(seq2=="t"))]#
								seq2 = seq2[which((seq2=="A")|(seq2=="C")|(seq2=="G")|(seq2=="T")|(seq2=="a")|(seq2=="c")|(seq2=="g")|(seq2=="t"))]#
								mm = sum(seq1!=seq2)#
								mmd[j,i] = mm; mmd[i,j] = mm#
							}#
					}#
			}#
		return(mmd)#
	}#
#
fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = fasta[which(grepl(">",fasta))]; sequences = fasta[which(!grepl(">",fasta))]#
mismataches = mismatchesMatrix(sequences); row.names(mismtaches) = gsub(">","",seq_IDs)#
write.csv(mismataches, "LASV_L_alignment_1.csv", quote=F)#
#
fasta = scan("LASV_S_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = fasta[which(grepl(">",fasta))]; sequences = fasta[which(!grepl(">",fasta))]#
mismtaches = mismatchesMatrix(sequences); row.names(mismtaches) = gsub(">","",seq_IDs)#
write.csv(mismtaches, "LASV_S_alignment_1.csv", quote=F)#
#
mismataches_L = read.csv("LASV_L_alignment_1.csv", header=T)#
mismataches_S = read.csv("LASV_S_alignment_1.csv", header=T)#
pdf("Mismatch_distributions_NEW.pdf", width=8, height=4); datasets = c(); # dev.new(width=8, height=4)#
par(mfrow=c(1,2), mgp=c(1,0.35,0), oma=c(1,0.5,1,2), mar=c(2.0,3,0,0))#
hist(mismataches_L[lower.tri(mismataches_L)], breaks=1000, col="gray50", border=NA, axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.0,0), lwd=0.2, tck=-0.013, col.axis="gray30")#
axis(side=2, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.25,0), lwd=0.2, tck=-0.014, col.axis="gray30")#
title(xlab="mismatches", cex.lab=0.7, mgp=c(0.8,0,0), col.lab="gray30")#
title(ylab="frequency", cex.lab=0.7, mgp=c(1.2,0,0), col.lab="gray30")#
title(main="Alignment for L segment", cex.main=0.7, col.main="gray30", line=-1.7)#
hist(mismataches_S[lower.tri(mismataches_S)], breaks=1000, col="gray50", border=NA, axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.0,0), lwd=0.2, tck=-0.013, col.axis="gray30")#
axis(side=2, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.25,0), lwd=0.2, tck=-0.014, col.axis="gray30")#
title(xlab="mismatches", cex.lab=0.7, mgp=c(0.8,0,0), col.lab="gray30")#
title(ylab="frequency", cex.lab=0.7, mgp=c(1.2,0,0), col.lab="gray30")#
title(main="Alignment for S segment", cex.main=0.7, col.main="gray30", line=-1.7)#
dev.off(); # dev.copy2pdf(file=paste("Mismatch_distributions.pdf",sep=""))#
#
mismataches = mismataches_L; metadata  = read.csv("LASV_L_sequences_1.csv", header=T); fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
# mismataches = mismataches_S; metadata = read.csv("LASV_S_sequences_1.csv", header=T); fasta = scan("LASV_S_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
suspicous_pairs_list = list(); suspicous_pairs = c(); nS = list()#
for (m in 0:5)#
	{#
		n = 0#
		if (m == 0) suspicous_pairs = c(suspicous_pairs, paste0(m," NUCLEOTIDE MISMATCH ##############################"), " ")#
		if (m == 1) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHE #############################"), " ")#
		if (m >= 2) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHES ############################"), " ")#
		for (i in 2:dim(mismataches_L)[1])#
			{#
				for (j in 1:(i-1))#
					{#
						if (mismataches_L[i,j] == m)#
							{#
								if (m == 0) suspicous_pairs_list[[length(suspicous_pairs_list)+1]] = c(row.names(mismataches)[i],row.names(mismataches)[j])#
								suspicous_pairs = c(suspicous_pairs, row.names(mismataches)[i]); # cat(paste0(row.names(mismataches)[i],"\n"))#
								suspicous_pairs = c(suspicous_pairs, row.names(mismataches)[j]); # cat(paste0(row.names(mismataches)[j],"\n"))#
								suspicous_pairs = c(suspicous_pairs, " "); n = n + 1; # cat("\n")#
							}#
					}#
			}#
		nS[[m+1]] = n#
	}#
write(suspicous_pairs, "LASV_L_alignment_1.txt"); print(nS)#
# write(suspicous_pairs, "LASV_S_alignment_1.txt"); print(nS)#
sequences_to_remove = c(); sequences_to_keep = c()#
for (i in 1:length(suspicous_pairs_list))#
	{#
		seqIDs = c(); datasets = rep(0,length(suspicous_pairs_list[[i]]))#
		for (j in 1:length(suspicous_pairs_list[[i]]))#
			{#
				if (grepl("_NGA-",suspicous_pairs_list[[i]][j]))#
					{#
						seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"NGA-"))[1]); datasets[j] = 1#
					}#
				if (grepl("\\|",suspicous_pairs_list[[i]][j]))#
					{#
						seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"\\|"))[1]); datasets[j] = 2#
					}#
			}#
		precisionScores = rep(0,length(seqIDs))#
		for (j in 1:length(seqIDs))#
			{#
				index = which(grepl(seqIDs[j], metadata[,"trait"])); # print(metadata[index,])#
				if (length(index) == 1)#
					{#
						if (!is.na(metadata[index,"country"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"district"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"location"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"lat"])) precisionScores[j] = precisionScores[j] + 10#
					}	else		{#
						precisionScores[j] = 0; print(seqIDs[j])#
					}#
			}#
		index = NA#
		if (length(unique(datasets)) == 2) index = which(datasets!=1)#
		if (length(unique(datasets)) == 1)#
			{#
				if (length(unique(precisionScores)) == 2) index = which(precisionScores!=max(precisionScores))#
				if (length(unique(precisionScores)) == 1) index = sample(1:2,1)#
			}#
		sequences_to_remove = c(sequences_to_remove, suspicous_pairs_list[[i]][index])#
		sequences_to_keep = c(sequences_to_keep, suspicous_pairs_list[[i]][-index])#
	}#
metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]#
sequences = c(); sequences_to_remove = c()#
for (i in 1:dim(metadata)[1])#
	{#
		seqID = NA#
		if (grepl("_NGA-",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"NGA-"))[1]#
		if (grepl("\\|",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"\\|"))[1]#
		index = which(grepl(seqID ,fasta))#
		if (length(index) != 1)#
			{#
				print(i); sequences_to_remove = c(sequences_to_remove, as.character(metadata[i,"trait"]))#
			}	else	{#
				nchar1 = nchar(as.character(metadata[i,"district"])); if (is.na(nchar1)) nchar1 = 0#
				nchar2 = nchar(as.character(metadata[i,"location"])); if (is.na(nchar2)) nchar2 = 0#
				nchar3 = nchar(as.character(metadata[i,"lat"])); if (is.na(nchar3)) nchar3 = 0#
				nchar4 = nchar(as.character(metadata[i,"lon"])); if (is.na(nchar4)) nchar4 = 0#
				if ((nchar1+nchar2+nchar3+nchar4) != 0)#
					{#
						sequences = c(sequences, fasta[index], fasta[index+1])#
					}	else	{#
						sequences_to_remove = c(sequences_to_remove, as.character(metadata[i,"trait"]))#
					}#
			}#
	}#
metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]#
write.csv(metadata, "LASV_L_alignment_2.csv", row.names=F, quote=F); write(sequences, "LASV_L_alignment_2.fasta")#
# write.csv(metadata, "LASV_S_alignment_2.csv", row.names=F, quote=F); write(sequences, "LASV_S_alignment_2.fasta")#
#
for (i in 1:length(analyses))#
	{#
		segment = unlist(strsplit(analyses[i],"_"))[length(unlist(strsplit(analyses[i],"_")))]#
		metadata = read.csv(paste0("LASV_",segment,"_alignment_2.csv"), header=T)#
		sequences = scan(paste0("LASV_",segment,"_alignment_2.fasta"), what="", sep="\n", quiet=TRUE)#
		indices1a = which(metadata[,"country"]=="NGA"); indices1b = which(metadata[,"country"]!="NGA")#
		indices2a = which(grepl("_NGA_",sequences)); indices2b = which(!grepl("_NGA_",sequences))#
		write.csv(metadata[indices1a,], paste0("LASV_NGA_segment",segment,".csv"), row.names=F, quote=F)#
		write.csv(metadata[indices1b,], paste0("LASV_MRU_segment",segment,".csv"), row.names=F, quote=F)		#
		sequencesNGA = c(); sequencesMRU = c()#
		for (j in 1:length(indices2a))#
			{#
				sequencesNGA = c(sequencesNGA, sequences[indices2a[i]], sequences[indices2a[i]+1])#
			}#
		for (j in 1:length(indices2b))#
			{#
				sequencesMRU = c(sequencesMRU, sequences[indices2b[i]], sequences[indices2b[i]+1])#
			}#
		write(sequencesNGA, paste0("LASV_NGA_segment",segment,".fasta"))#
		write(sequencesMRU, paste0("LASV_MRU_segment",segment,".fasta"))#
	}
library(rgeos)#
library(diagram)#
library(seraphim)#
library(lubridate)#
library(OutbreakTools)#
#
analyses = c("LASV_segment_L", "LASV_segment_S")#
# admins0_NGA = getData("GADM", country="NGA", level=0)#
# admins1_NGA = getData("GADM", country="NGA", level=1)#
# admins2_NGA = getData("GADM", country="NGA", level=2)#
# admins0_SLE = getData("GADM", country="SLE", level=0)#
# admins1_SLE = getData("GADM", country="SLE", level=1)#
# admins2_SLE = getData("GADM", country="SLE", level=2)#
#
# 1. Merging the two data sets --> "..._sequences_1.csv"#
#
L_all_metadata = read.csv("Dataset_Nigerian_study/LASV_segment_L.csv", header=T)#
S_all_metadata = read.csv("Dataset_Nigerian_study/LASV_segment_S.csv", header=T)#
L_all_metadata[which(L_all_metadata[,"location"]=="COORDINATES"),"location"] = NA#
S_all_metadata[which(S_all_metadata[,"location"]=="COORDINATES"),"location"] = NA#
metadata = read.csv("Dataset_of_Gytis_Dudas/LASV_metadata.csv", header=T); metadata_L = c()#
for (i in 1:dim(metadata)[1])#
	{#
		if (nchar(as.character(metadata[i,"L"])) > 0)#
			{#
				metadata_line = matrix(nrow=1, ncol=dim(L_all_metadata)[2])#
				colnames(metadata_line) = colnames(L_all_metadata)#
				metadata_line = as.data.frame(metadata_line)#
				metadata_line[1,"trait"] = as.character(metadata[i,"L"])#
				metadata_line[1,"country"] = as.character(metadata[i,"country"])#
				metadata_line[1,"district"] = as.character(metadata[i,"district"])#
				metadata_line[1,"location"] = as.character( metadata[i,"location"])#
				metadata_line[1,"lat"] = metadata[i,"lat"]#
				metadata_line[1,"lon"] = metadata[i,"lon"]#
				metadata_line[1,which(metadata_line[1,]=="")] = NA#
				L_all_metadata = rbind(L_all_metadata, metadata_line)#
			}#
	}#
write.csv(L_all_metadata, "LASV_L_sequences_1.csv", quote=F, row.names=F)#
metadata = read.csv("Dataset_of_Gytis_Dudas/LASV_metadata.csv", header=T); metadata_S = c()#
for (i in 1:dim(metadata)[1])#
	{#
		if (nchar(as.character(metadata[i,"S"])) > 0)#
			{#
				metadata_line = matrix(nrow=1, ncol=dim(S_all_metadata)[2])#
				colnames(metadata_line) = colnames(S_all_metadata)#
				metadata_line = as.data.frame(metadata_line)#
				metadata_line[1,"trait"] = as.character(metadata[i,"S"])#
				metadata_line[1,"country"] = as.character(metadata[i,"country"])#
				metadata_line[1,"district"] = as.character(metadata[i,"district"])#
				metadata_line[1,"location"] = as.character( metadata[i,"location"])#
				metadata_line[1,"lat"] = metadata[i,"lat"]#
				metadata_line[1,"lon"] = metadata[i,"lon"]#
				metadata_line[1,which(metadata_line[1,]=="")] = NA#
				S_all_metadata = rbind(S_all_metadata, metadata_line)#
			}#
	}#
write.csv(S_all_metadata, "LASV_S_sequences_1.csv", quote=F, row.names=F)
mismatchesMatrix = function(sequences)#
	{#
		mmd = matrix(nrow=length(sequences), ncol=length(sequences))#
		for (i in 1:length(sequences))#
			{#
				for (j in 1:i)#
					{#
						if (i == j)#
							{#
								mmd[j,i] = 0#
							}	else	{#
								seq1 = unlist(strsplit(sequences[j],""))#
								seq2 = unlist(strsplit(sequences[i],""))#
								seq2 = seq2[which((seq1=="A")|(seq1=="C")|(seq1=="G")|(seq1=="T")|(seq1=="a")|(seq1=="c")|(seq1=="g")|(seq1=="t"))]#
								seq1 = seq1[which((seq1=="A")|(seq1=="C")|(seq1=="G")|(seq1=="T")|(seq1=="a")|(seq1=="c")|(seq1=="g")|(seq1=="t"))]#
								seq1 = seq1[which((seq2=="A")|(seq2=="C")|(seq2=="G")|(seq2=="T")|(seq2=="a")|(seq2=="c")|(seq2=="g")|(seq2=="t"))]#
								seq2 = seq2[which((seq2=="A")|(seq2=="C")|(seq2=="G")|(seq2=="T")|(seq2=="a")|(seq2=="c")|(seq2=="g")|(seq2=="t"))]#
								mm = sum(seq1!=seq2)#
								mmd[j,i] = mm; mmd[i,j] = mm#
							}#
					}#
			}#
		return(mmd)#
	}
library(rgeos)#
library(diagram)#
library(seraphim)#
library(lubridate)#
library(OutbreakTools)#
#
analyses = c("LASV_segment_L", "LASV_segment_S")#
# admins0_NGA = getData("GADM", country="NGA", level=0)#
# admins1_NGA = getData("GADM", country="NGA", level=1)#
# admins2_NGA = getData("GADM", country="NGA", level=2)#
# admins0_SLE = getData("GADM", country="SLE", level=0)#
# admins1_SLE = getData("GADM", country="SLE", level=1)#
# admins2_SLE = getData("GADM", country="SLE", level=2)#
#
# 1. Merging the two data sets --> "..._sequences_1.csv"#
#
L_all_metadata = read.csv("Dataset_Nigerian_study/LASV_segment_L.csv", header=T)#
S_all_metadata = read.csv("Dataset_Nigerian_study/LASV_segment_S.csv", header=T)#
L_all_metadata[which(L_all_metadata[,"location"]=="COORDINATES"),"location"] = NA#
S_all_metadata[which(S_all_metadata[,"location"]=="COORDINATES"),"location"] = NA#
metadata = read.csv("Dataset_of_Gytis_Dudas/LASV_metadata.csv", header=T); metadata_L = c()#
for (i in 1:dim(metadata)[1])#
	{#
		if (nchar(as.character(metadata[i,"L"])) > 0)#
			{#
				metadata_line = matrix(nrow=1, ncol=dim(L_all_metadata)[2])#
				colnames(metadata_line) = colnames(L_all_metadata)#
				metadata_line = as.data.frame(metadata_line)#
				metadata_line[1,"trait"] = as.character(metadata[i,"L"])#
				metadata_line[1,"country"] = as.character(metadata[i,"country"])#
				metadata_line[1,"district"] = as.character(metadata[i,"district"])#
				metadata_line[1,"location"] = as.character( metadata[i,"location"])#
				metadata_line[1,"lat"] = metadata[i,"lat"]#
				metadata_line[1,"lon"] = metadata[i,"lon"]#
				metadata_line[1,which(metadata_line[1,]=="")] = NA#
				L_all_metadata = rbind(L_all_metadata, metadata_line)#
			}#
	}#
write.csv(L_all_metadata, "LASV_L_sequences_1.csv", quote=F, row.names=F)#
metadata = read.csv("Dataset_of_Gytis_Dudas/LASV_metadata.csv", header=T); metadata_S = c()#
for (i in 1:dim(metadata)[1])#
	{#
		if (nchar(as.character(metadata[i,"S"])) > 0)#
			{#
				metadata_line = matrix(nrow=1, ncol=dim(S_all_metadata)[2])#
				colnames(metadata_line) = colnames(S_all_metadata)#
				metadata_line = as.data.frame(metadata_line)#
				metadata_line[1,"trait"] = as.character(metadata[i,"S"])#
				metadata_line[1,"country"] = as.character(metadata[i,"country"])#
				metadata_line[1,"district"] = as.character(metadata[i,"district"])#
				metadata_line[1,"location"] = as.character( metadata[i,"location"])#
				metadata_line[1,"lat"] = metadata[i,"lat"]#
				metadata_line[1,"lon"] = metadata[i,"lon"]#
				metadata_line[1,which(metadata_line[1,]=="")] = NA#
				S_all_metadata = rbind(S_all_metadata, metadata_line)#
			}#
	}#
write.csv(S_all_metadata, "LASV_S_sequences_1.csv", quote=F, row.names=F)#
#
# 2. Checking for potentially suspicious, i.e. identical, sequence to remove --> "..._2.fasta" and "..._2.csv"#
#
mismatchesMatrix = function(sequences)#
	{#
		mmd = matrix(nrow=length(sequences), ncol=length(sequences))#
		for (i in 1:length(sequences))#
			{#
				for (j in 1:i)#
					{#
						if (i == j)#
							{#
								mmd[j,i] = 0#
							}	else	{#
								seq1 = unlist(strsplit(sequences[j],""))#
								seq2 = unlist(strsplit(sequences[i],""))#
								seq2 = seq2[which((seq1=="A")|(seq1=="C")|(seq1=="G")|(seq1=="T")|(seq1=="a")|(seq1=="c")|(seq1=="g")|(seq1=="t"))]#
								seq1 = seq1[which((seq1=="A")|(seq1=="C")|(seq1=="G")|(seq1=="T")|(seq1=="a")|(seq1=="c")|(seq1=="g")|(seq1=="t"))]#
								seq1 = seq1[which((seq2=="A")|(seq2=="C")|(seq2=="G")|(seq2=="T")|(seq2=="a")|(seq2=="c")|(seq2=="g")|(seq2=="t"))]#
								seq2 = seq2[which((seq2=="A")|(seq2=="C")|(seq2=="G")|(seq2=="T")|(seq2=="a")|(seq2=="c")|(seq2=="g")|(seq2=="t"))]#
								mm = sum(seq1!=seq2)#
								mmd[j,i] = mm; mmd[i,j] = mm#
							}#
					}#
			}#
		return(mmd)#
	}#
#
fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = fasta[which(grepl(">",fasta))]; sequences = fasta[which(!grepl(">",fasta))]#
mismataches = mismatchesMatrix(sequences); row.names(mismtaches) = gsub(">","",seq_IDs)#
write.csv(mismataches, "LASV_L_alignment_1.csv", quote=F)#
#
fasta = scan("LASV_S_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = fasta[which(grepl(">",fasta))]; sequences = fasta[which(!grepl(">",fasta))]#
mismtaches = mismatchesMatrix(sequences); row.names(mismtaches) = gsub(">","",seq_IDs)#
write.csv(mismtaches, "LASV_S_alignment_1.csv", quote=F)#
#
mismataches_L = read.csv("LASV_L_alignment_1.csv", header=T)#
mismataches_S = read.csv("LASV_S_alignment_1.csv", header=T)#
pdf("Mismatch_distributions_NEW.pdf", width=8, height=4); datasets = c(); # dev.new(width=8, height=4)#
par(mfrow=c(1,2), mgp=c(1,0.35,0), oma=c(1,0.5,1,2), mar=c(2.0,3,0,0))#
hist(mismataches_L[lower.tri(mismataches_L)], breaks=1000, col="gray50", border=NA, axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.0,0), lwd=0.2, tck=-0.013, col.axis="gray30")#
axis(side=2, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.25,0), lwd=0.2, tck=-0.014, col.axis="gray30")#
title(xlab="mismatches", cex.lab=0.7, mgp=c(0.8,0,0), col.lab="gray30")#
title(ylab="frequency", cex.lab=0.7, mgp=c(1.2,0,0), col.lab="gray30")#
title(main="Alignment for L segment", cex.main=0.7, col.main="gray30", line=-1.7)#
hist(mismataches_S[lower.tri(mismataches_S)], breaks=1000, col="gray50", border=NA, axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.0,0), lwd=0.2, tck=-0.013, col.axis="gray30")#
axis(side=2, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.25,0), lwd=0.2, tck=-0.014, col.axis="gray30")#
title(xlab="mismatches", cex.lab=0.7, mgp=c(0.8,0,0), col.lab="gray30")#
title(ylab="frequency", cex.lab=0.7, mgp=c(1.2,0,0), col.lab="gray30")#
title(main="Alignment for S segment", cex.main=0.7, col.main="gray30", line=-1.7)#
dev.off(); # dev.copy2pdf(file=paste("Mismatch_distributions.pdf",sep=""))#
#
mismataches = mismataches_L; metadata  = read.csv("LASV_L_sequences_1.csv", header=T); fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
# mismataches = mismataches_S; metadata = read.csv("LASV_S_sequences_1.csv", header=T); fasta = scan("LASV_S_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
suspicous_pairs_list = list(); suspicous_pairs = c(); nS = list()#
for (m in 0:5)#
	{#
		n = 0#
		if (m == 0) suspicous_pairs = c(suspicous_pairs, paste0(m," NUCLEOTIDE MISMATCH ##############################"), " ")#
		if (m == 1) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHE #############################"), " ")#
		if (m >= 2) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHES ############################"), " ")#
		for (i in 2:dim(mismataches_L)[1])#
			{#
				for (j in 1:(i-1))#
					{#
						if (mismataches_L[i,j] == m)#
							{#
								if (m == 0) suspicous_pairs_list[[length(suspicous_pairs_list)+1]] = c(row.names(mismataches)[i],row.names(mismataches)[j])#
								suspicous_pairs = c(suspicous_pairs, row.names(mismataches)[i]); # cat(paste0(row.names(mismataches)[i],"\n"))#
								suspicous_pairs = c(suspicous_pairs, row.names(mismataches)[j]); # cat(paste0(row.names(mismataches)[j],"\n"))#
								suspicous_pairs = c(suspicous_pairs, " "); n = n + 1; # cat("\n")#
							}#
					}#
			}#
		nS[[m+1]] = n#
	}#
write(suspicous_pairs, "LASV_L_alignment_1.txt"); print(nS)#
# write(suspicous_pairs, "LASV_S_alignment_1.txt"); print(nS)#
sequences_to_remove = c(); sequences_to_keep = c()#
for (i in 1:length(suspicous_pairs_list))#
	{#
		seqIDs = c(); datasets = rep(0,length(suspicous_pairs_list[[i]]))#
		for (j in 1:length(suspicous_pairs_list[[i]]))#
			{#
				if (grepl("_NGA-",suspicous_pairs_list[[i]][j]))#
					{#
						seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"NGA-"))[1]); datasets[j] = 1#
					}#
				if (grepl("\\|",suspicous_pairs_list[[i]][j]))#
					{#
						seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"\\|"))[1]); datasets[j] = 2#
					}#
			}#
		precisionScores = rep(0,length(seqIDs))#
		for (j in 1:length(seqIDs))#
			{#
				index = which(grepl(seqIDs[j], metadata[,"trait"])); # print(metadata[index,])#
				if (length(index) == 1)#
					{#
						if (!is.na(metadata[index,"country"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"district"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"location"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"lat"])) precisionScores[j] = precisionScores[j] + 10#
					}	else		{#
						precisionScores[j] = 0; print(seqIDs[j])#
					}#
			}#
		index = NA#
		if (length(unique(datasets)) == 2) index = which(datasets!=1)#
		if (length(unique(datasets)) == 1)#
			{#
				if (length(unique(precisionScores)) == 2) index = which(precisionScores!=max(precisionScores))#
				if (length(unique(precisionScores)) == 1) index = sample(1:2,1)#
			}#
		sequences_to_remove = c(sequences_to_remove, suspicous_pairs_list[[i]][index])#
		sequences_to_keep = c(sequences_to_keep, suspicous_pairs_list[[i]][-index])#
	}#
metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]#
sequences = c(); sequences_to_remove = c()#
for (i in 1:dim(metadata)[1])#
	{#
		seqID = NA#
		if (grepl("_NGA-",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"NGA-"))[1]#
		if (grepl("\\|",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"\\|"))[1]#
		index = which(grepl(seqID ,fasta))#
		if (length(index) != 1)#
			{#
				print(i); sequences_to_remove = c(sequences_to_remove, as.character(metadata[i,"trait"]))#
			}	else	{#
				nchar1 = nchar(as.character(metadata[i,"district"])); if (is.na(nchar1)) nchar1 = 0#
				nchar2 = nchar(as.character(metadata[i,"location"])); if (is.na(nchar2)) nchar2 = 0#
				nchar3 = nchar(as.character(metadata[i,"lat"])); if (is.na(nchar3)) nchar3 = 0#
				nchar4 = nchar(as.character(metadata[i,"lon"])); if (is.na(nchar4)) nchar4 = 0#
				if ((nchar1+nchar2+nchar3+nchar4) != 0)#
					{#
						sequences = c(sequences, fasta[index], fasta[index+1])#
					}	else	{#
						sequences_to_remove = c(sequences_to_remove, as.character(metadata[i,"trait"]))#
					}#
			}#
	}#
metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]#
write.csv(metadata, "LASV_L_alignment_2.csv", row.names=F, quote=F); write(sequences, "LASV_L_alignment_2.fasta")#
# write.csv(metadata, "LASV_S_alignment_2.csv", row.names=F, quote=F); write(sequences, "LASV_S_alignment_2.fasta")#
#
for (i in 1:length(analyses))#
	{#
		segment = unlist(strsplit(analyses[i],"_"))[length(unlist(strsplit(analyses[i],"_")))]#
		metadata = read.csv(paste0("LASV_",segment,"_alignment_2.csv"), header=T)#
		sequences = scan(paste0("LASV_",segment,"_alignment_2.fasta"), what="", sep="\n", quiet=TRUE)#
		indices1a = which(metadata[,"country"]=="NGA"); indices1b = which(metadata[,"country"]!="NGA")#
		indices2a = which(grepl("_NGA_",sequences)); indices2b = which(!grepl("_NGA_",sequences))#
		write.csv(metadata[indices1a,], paste0("LASV_NGA_segment",segment,".csv"), row.names=F, quote=F)#
		write.csv(metadata[indices1b,], paste0("LASV_MRU_segment",segment,".csv"), row.names=F, quote=F)		#
		sequencesNGA = c(); sequencesMRU = c()#
		for (j in 1:length(indices2a))#
			{#
				sequencesNGA = c(sequencesNGA, sequences[indices2a[i]], sequences[indices2a[i]+1])#
			}#
		for (j in 1:length(indices2b))#
			{#
				sequencesMRU = c(sequencesMRU, sequences[indices2b[i]], sequences[indices2b[i]+1])#
			}#
		write(sequencesNGA, paste0("LASV_NGA_segment",segment,".fasta"))#
		write(sequencesMRU, paste0("LASV_MRU_segment",segment,".fasta"))#
	}
library(rgeos)#
library(diagram)#
library(seraphim)#
library(lubridate)#
library(OutbreakTools)#
#
analyses = c("LASV_segment_L", "LASV_segment_S")#
# admins0_NGA = getData("GADM", country="NGA", level=0)#
# admins1_NGA = getData("GADM", country="NGA", level=1)#
# admins2_NGA = getData("GADM", country="NGA", level=2)#
# admins0_SLE = getData("GADM", country="SLE", level=0)#
# admins1_SLE = getData("GADM", country="SLE", level=1)#
# admins2_SLE = getData("GADM", country="SLE", level=2)#
#
# 1. Merging the two data sets --> "..._sequences_1.csv"#
#
L_all_metadata = read.csv("Dataset_Nigerian_study/LASV_segment_L.csv", header=T)#
S_all_metadata = read.csv("Dataset_Nigerian_study/LASV_segment_S.csv", header=T)#
L_all_metadata[which(L_all_metadata[,"location"]=="COORDINATES"),"location"] = NA#
S_all_metadata[which(S_all_metadata[,"location"]=="COORDINATES"),"location"] = NA#
metadata = read.csv("Dataset_of_Gytis_Dudas/LASV_metadata.csv", header=T); metadata_L = c()#
for (i in 1:dim(metadata)[1])#
	{#
		if (nchar(as.character(metadata[i,"L"])) > 0)#
			{#
				metadata_line = matrix(nrow=1, ncol=dim(L_all_metadata)[2])#
				colnames(metadata_line) = colnames(L_all_metadata)#
				metadata_line = as.data.frame(metadata_line)#
				metadata_line[1,"trait"] = as.character(metadata[i,"L"])#
				metadata_line[1,"country"] = as.character(metadata[i,"country"])#
				metadata_line[1,"district"] = as.character(metadata[i,"district"])#
				metadata_line[1,"location"] = as.character( metadata[i,"location"])#
				metadata_line[1,"lat"] = metadata[i,"lat"]#
				metadata_line[1,"lon"] = metadata[i,"lon"]#
				metadata_line[1,which(metadata_line[1,]=="")] = NA#
				L_all_metadata = rbind(L_all_metadata, metadata_line)#
			}#
	}#
write.csv(L_all_metadata, "LASV_L_sequences_1.csv", quote=F, row.names=F)#
metadata = read.csv("Dataset_of_Gytis_Dudas/LASV_metadata.csv", header=T); metadata_S = c()#
for (i in 1:dim(metadata)[1])#
	{#
		if (nchar(as.character(metadata[i,"S"])) > 0)#
			{#
				metadata_line = matrix(nrow=1, ncol=dim(S_all_metadata)[2])#
				colnames(metadata_line) = colnames(S_all_metadata)#
				metadata_line = as.data.frame(metadata_line)#
				metadata_line[1,"trait"] = as.character(metadata[i,"S"])#
				metadata_line[1,"country"] = as.character(metadata[i,"country"])#
				metadata_line[1,"district"] = as.character(metadata[i,"district"])#
				metadata_line[1,"location"] = as.character( metadata[i,"location"])#
				metadata_line[1,"lat"] = metadata[i,"lat"]#
				metadata_line[1,"lon"] = metadata[i,"lon"]#
				metadata_line[1,which(metadata_line[1,]=="")] = NA#
				S_all_metadata = rbind(S_all_metadata, metadata_line)#
			}#
	}#
write.csv(S_all_metadata, "LASV_S_sequences_1.csv", quote=F, row.names=F)#
#
# 2. Checking for potentially suspicious, i.e. identical, sequence to remove --> "..._2.fasta" and "..._2.csv"#
#
mismatchesMatrix = function(sequences)#
	{#
		mmd = matrix(nrow=length(sequences), ncol=length(sequences))#
		for (i in 1:length(sequences))#
			{#
				for (j in 1:i)#
					{#
						if (i == j)#
							{#
								mmd[j,i] = 0#
							}	else	{#
								seq1 = unlist(strsplit(sequences[j],""))#
								seq2 = unlist(strsplit(sequences[i],""))#
								seq2 = seq2[which((seq1=="A")|(seq1=="C")|(seq1=="G")|(seq1=="T")|(seq1=="a")|(seq1=="c")|(seq1=="g")|(seq1=="t"))]#
								seq1 = seq1[which((seq1=="A")|(seq1=="C")|(seq1=="G")|(seq1=="T")|(seq1=="a")|(seq1=="c")|(seq1=="g")|(seq1=="t"))]#
								seq1 = seq1[which((seq2=="A")|(seq2=="C")|(seq2=="G")|(seq2=="T")|(seq2=="a")|(seq2=="c")|(seq2=="g")|(seq2=="t"))]#
								seq2 = seq2[which((seq2=="A")|(seq2=="C")|(seq2=="G")|(seq2=="T")|(seq2=="a")|(seq2=="c")|(seq2=="g")|(seq2=="t"))]#
								mm = sum(seq1!=seq2)#
								mmd[j,i] = mm; mmd[i,j] = mm#
							}#
					}#
			}#
		return(mmd)#
	}#
#
fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = fasta[which(grepl(">",fasta))]; sequences = fasta[which(!grepl(">",fasta))]#
mismataches = mismatchesMatrix(sequences); row.names(mismatches) = gsub(">","",seq_IDs)#
write.csv(mismataches, "LASV_L_alignment_1.csv", quote=F)#
#
fasta = scan("LASV_S_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = fasta[which(grepl(">",fasta))]; sequences = fasta[which(!grepl(">",fasta))]#
mismtaches = mismatchesMatrix(sequences); row.names(mismatches) = gsub(">","",seq_IDs)#
write.csv(mismtaches, "LASV_S_alignment_1.csv", quote=F)
fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = fasta[which(grepl(">",fasta))]; sequences = fasta[which(!grepl(">",fasta))]#
mismatches = mismatchesMatrix(sequences); row.names(mismatches) = gsub(">","",seq_IDs)#
write.csv(mismatches, "LASV_L_alignment_1.csv", quote=F)#
#
fasta = scan("LASV_S_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = fasta[which(grepl(">",fasta))]; sequences = fasta[which(!grepl(">",fasta))]#
mismtaches = mismatchesMatrix(sequences); row.names(mismatches) = gsub(">","",seq_IDs)#
write.csv(mismtaches, "LASV_S_alignment_1.csv", quote=F)
library(rgeos)#
library(diagram)#
library(seraphim)#
library(lubridate)#
library(OutbreakTools)#
#
analyses = c("LASV_segment_L", "LASV_segment_S")#
# admins0_NGA = getData("GADM", country="NGA", level=0)#
# admins1_NGA = getData("GADM", country="NGA", level=1)#
# admins2_NGA = getData("GADM", country="NGA", level=2)#
# admins0_SLE = getData("GADM", country="SLE", level=0)#
# admins1_SLE = getData("GADM", country="SLE", level=1)#
# admins2_SLE = getData("GADM", country="SLE", level=2)#
#
# 1. Merging the two data sets --> "..._sequences_1.csv"#
#
L_all_metadata = read.csv("Dataset_Nigerian_study/LASV_segment_L.csv", header=T)#
S_all_metadata = read.csv("Dataset_Nigerian_study/LASV_segment_S.csv", header=T)#
L_all_metadata[which(L_all_metadata[,"location"]=="COORDINATES"),"location"] = NA#
S_all_metadata[which(S_all_metadata[,"location"]=="COORDINATES"),"location"] = NA#
metadata = read.csv("Dataset_of_Gytis_Dudas/LASV_metadata.csv", header=T); metadata_L = c()#
for (i in 1:dim(metadata)[1])#
	{#
		if (nchar(as.character(metadata[i,"L"])) > 0)#
			{#
				metadata_line = matrix(nrow=1, ncol=dim(L_all_metadata)[2])#
				colnames(metadata_line) = colnames(L_all_metadata)#
				metadata_line = as.data.frame(metadata_line)#
				metadata_line[1,"trait"] = as.character(metadata[i,"L"])#
				metadata_line[1,"country"] = as.character(metadata[i,"country"])#
				metadata_line[1,"district"] = as.character(metadata[i,"district"])#
				metadata_line[1,"location"] = as.character( metadata[i,"location"])#
				metadata_line[1,"lat"] = metadata[i,"lat"]#
				metadata_line[1,"lon"] = metadata[i,"lon"]#
				metadata_line[1,which(metadata_line[1,]=="")] = NA#
				L_all_metadata = rbind(L_all_metadata, metadata_line)#
			}#
	}#
write.csv(L_all_metadata, "LASV_L_sequences_1.csv", quote=F, row.names=F)#
metadata = read.csv("Dataset_of_Gytis_Dudas/LASV_metadata.csv", header=T); metadata_S = c()#
for (i in 1:dim(metadata)[1])#
	{#
		if (nchar(as.character(metadata[i,"S"])) > 0)#
			{#
				metadata_line = matrix(nrow=1, ncol=dim(S_all_metadata)[2])#
				colnames(metadata_line) = colnames(S_all_metadata)#
				metadata_line = as.data.frame(metadata_line)#
				metadata_line[1,"trait"] = as.character(metadata[i,"S"])#
				metadata_line[1,"country"] = as.character(metadata[i,"country"])#
				metadata_line[1,"district"] = as.character(metadata[i,"district"])#
				metadata_line[1,"location"] = as.character( metadata[i,"location"])#
				metadata_line[1,"lat"] = metadata[i,"lat"]#
				metadata_line[1,"lon"] = metadata[i,"lon"]#
				metadata_line[1,which(metadata_line[1,]=="")] = NA#
				S_all_metadata = rbind(S_all_metadata, metadata_line)#
			}#
	}#
write.csv(S_all_metadata, "LASV_S_sequences_1.csv", quote=F, row.names=F)#
#
# 2. Checking for potentially suspicious, i.e. identical, sequence to remove --> "..._2.fasta" and "..._2.csv"#
#
mismatchesMatrix = function(sequences)#
	{#
		mmd = matrix(nrow=length(sequences), ncol=length(sequences))#
		for (i in 1:length(sequences))#
			{#
				for (j in 1:i)#
					{#
						if (i == j)#
							{#
								mmd[j,i] = 0#
							}	else	{#
								seq1 = unlist(strsplit(sequences[j],""))#
								seq2 = unlist(strsplit(sequences[i],""))#
								seq2 = seq2[which((seq1=="A")|(seq1=="C")|(seq1=="G")|(seq1=="T")|(seq1=="a")|(seq1=="c")|(seq1=="g")|(seq1=="t"))]#
								seq1 = seq1[which((seq1=="A")|(seq1=="C")|(seq1=="G")|(seq1=="T")|(seq1=="a")|(seq1=="c")|(seq1=="g")|(seq1=="t"))]#
								seq1 = seq1[which((seq2=="A")|(seq2=="C")|(seq2=="G")|(seq2=="T")|(seq2=="a")|(seq2=="c")|(seq2=="g")|(seq2=="t"))]#
								seq2 = seq2[which((seq2=="A")|(seq2=="C")|(seq2=="G")|(seq2=="T")|(seq2=="a")|(seq2=="c")|(seq2=="g")|(seq2=="t"))]#
								mm = sum(seq1!=seq2)#
								mmd[j,i] = mm; mmd[i,j] = mm#
							}#
					}#
			}#
		return(mmd)#
	}#
#
fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = fasta[which(grepl(">",fasta))]; sequences = fasta[which(!grepl(">",fasta))]#
mismatches = mismatchesMatrix(sequences); row.names(mismatches) = gsub(">","",seq_IDs)#
write.csv(mismatches, "LASV_L_alignment_1.csv", quote=F)#
#
fasta = scan("LASV_S_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = fasta[which(grepl(">",fasta))]; sequences = fasta[which(!grepl(">",fasta))]#
mismtaches = mismatchesMatrix(sequences); row.names(mismatches) = gsub(">","",seq_IDs)#
write.csv(mismtaches, "LASV_S_alignment_1.csv", quote=F)
dim(mismatches)
str(seq_IDs)
fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = fasta[which(grepl(">",fasta))]; sequences = fasta[which(!grepl(">",fasta))]
length(seqIDs)
length(seq_IDs)
fasta = scan("LASV_S_alignment_1.fasta", what="", sep="\n", quiet=TRUE)
seq_IDs = fasta[which(grepl(">",fasta))]; sequences = fasta[which(!grepl(">",fasta))]
seq_IDs
row.names(mismatches) = gsub(">","",seq_IDs)
seq_IDs
row.names(mismatches)
gsub(">","",seq_IDs)
row.names(mismtaches) = gsub(">","",seq_IDs)
write.csv(mismtaches, "LASV_S_alignment_1.csv", quote=F)
write.csv(mismatches, "LASV_S_alignment_1.csv", quote=F)
write.csv(mismtaches, "LASV_S_alignment_1.csv", quote=F)
mismatches_L = read.csv("LASV_L_alignment_1.csv", header=T)#
mismatches_S = read.csv("LASV_S_alignment_1.csv", header=T)#
pdf("Mismatch_distributions_NEW.pdf", width=8, height=4); datasets = c(); # dev.new(width=8, height=4)#
par(mfrow=c(1,2), mgp=c(1,0.35,0), oma=c(1,0.5,1,2), mar=c(2.0,3,0,0))#
hist(mismatches_L[lower.tri(mismatches_L)], breaks=1000, col="gray50", border=NA, axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.0,0), lwd=0.2, tck=-0.013, col.axis="gray30")#
axis(side=2, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.25,0), lwd=0.2, tck=-0.014, col.axis="gray30")#
title(xlab="mismatches", cex.lab=0.7, mgp=c(0.8,0,0), col.lab="gray30")#
title(ylab="frequency", cex.lab=0.7, mgp=c(1.2,0,0), col.lab="gray30")#
title(main="Alignment for L segment", cex.main=0.7, col.main="gray30", line=-1.7)#
hist(mismatches_S[lower.tri(mismatches_S)], breaks=1000, col="gray50", border=NA, axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.0,0), lwd=0.2, tck=-0.013, col.axis="gray30")#
axis(side=2, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.25,0), lwd=0.2, tck=-0.014, col.axis="gray30")#
title(xlab="mismatches", cex.lab=0.7, mgp=c(0.8,0,0), col.lab="gray30")#
title(ylab="frequency", cex.lab=0.7, mgp=c(1.2,0,0), col.lab="gray30")#
title(main="Alignment for S segment", cex.main=0.7, col.main="gray30", line=-1.7)#
dev.off(); # dev.copy2pdf(file=paste("Mismatch_distributions.pdf",sep=""))
mismatches_L = read.csv("LASV_L_alignment_1.csv", header=T)
mismatches_S = read.csv("LASV_S_alignment_1.csv", header=T)
pdf("Mismatch_distributions_NEW.pdf", width=8, height=4); datasets = c(); # dev.new(width=8, height=4)#
par(mfrow=c(1,2), mgp=c(1,0.35,0), oma=c(1,0.5,1,2), mar=c(2.0,3,0,0))#
hist(mismatches_L[lower.tri(mismatches_L)], breaks=1000, col="gray50", border=NA, axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.0,0), lwd=0.2, tck=-0.013, col.axis="gray30")#
axis(side=2, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.25,0), lwd=0.2, tck=-0.014, col.axis="gray30")#
title(xlab="mismatches", cex.lab=0.7, mgp=c(0.8,0,0), col.lab="gray30")#
title(ylab="frequency", cex.lab=0.7, mgp=c(1.2,0,0), col.lab="gray30")#
title(main="Alignment for L segment", cex.main=0.7, col.main="gray30", line=-1.7)#
hist(mismatches_S[lower.tri(mismatches_S)], breaks=1000, col="gray50", border=NA, axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.0,0), lwd=0.2, tck=-0.013, col.axis="gray30")#
axis(side=2, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.25,0), lwd=0.2, tck=-0.014, col.axis="gray30")#
title(xlab="mismatches", cex.lab=0.7, mgp=c(0.8,0,0), col.lab="gray30")#
title(ylab="frequency", cex.lab=0.7, mgp=c(1.2,0,0), col.lab="gray30")#
title(main="Alignment for S segment", cex.main=0.7, col.main="gray30", line=-1.7)#
dev.off(); # dev.copy2pdf(file=paste("Mismatch_distributions.pdf",sep=""))
mismatches = mismatches_L; metadata  = read.csv("LASV_L_sequences_1.csv", header=T); fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
# mismatches = mismatches_S; metadata = read.csv("LASV_S_sequences_1.csv", header=T); fasta = scan("LASV_S_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
suspicous_pairs_list = list(); suspicous_pairs = c(); nS = list()#
for (m in 0:5)#
	{#
		n = 0#
		if (m == 0) suspicous_pairs = c(suspicous_pairs, paste0(m," NUCLEOTIDE MISMATCH ##############################"), " ")#
		if (m == 1) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHE #############################"), " ")#
		if (m >= 2) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHES ############################"), " ")#
		for (i in 2:dim(mismatches_L)[1])#
			{#
				for (j in 1:(i-1))#
					{#
						if (mismatches_L[i,j] == m)#
							{#
								if (m == 0) suspicous_pairs_list[[length(suspicous_pairs_list)+1]] = c(row.names(mismatches)[i],row.names(mismatches)[j])#
								suspicous_pairs = c(suspicous_pairs, row.names(mismatches)[i]); # cat(paste0(row.names(mismatches)[i],"\n"))#
								suspicous_pairs = c(suspicous_pairs, row.names(mismatches)[j]); # cat(paste0(row.names(mismatches)[j],"\n"))#
								suspicous_pairs = c(suspicous_pairs, " "); n = n + 1; # cat("\n")#
							}#
					}#
			}#
		nS[[m+1]] = n#
	}#
write(suspicous_pairs, "LASV_L_alignment_1.txt"); print(nS)#
# write(suspicous_pairs, "LASV_S_alignment_1.txt"); print(nS)#
sequences_to_remove = c(); sequences_to_keep = c()#
for (i in 1:length(suspicous_pairs_list))#
	{#
		seqIDs = c(); datasets = rep(0,length(suspicous_pairs_list[[i]]))#
		for (j in 1:length(suspicous_pairs_list[[i]]))#
			{#
				if (grepl("_NGA-",suspicous_pairs_list[[i]][j]))#
					{#
						seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"NGA-"))[1]); datasets[j] = 1#
					}#
				if (grepl("\\|",suspicous_pairs_list[[i]][j]))#
					{#
						seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"\\|"))[1]); datasets[j] = 2#
					}#
			}#
		precisionScores = rep(0,length(seqIDs))#
		for (j in 1:length(seqIDs))#
			{#
				index = which(grepl(seqIDs[j], metadata[,"trait"])); # print(metadata[index,])#
				if (length(index) == 1)#
					{#
						if (!is.na(metadata[index,"country"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"district"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"location"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"lat"])) precisionScores[j] = precisionScores[j] + 10#
					}	else		{#
						precisionScores[j] = 0; print(seqIDs[j])#
					}#
			}#
		index = NA#
		if (length(unique(datasets)) == 2) index = which(datasets!=1)#
		if (length(unique(datasets)) == 1)#
			{#
				if (length(unique(precisionScores)) == 2) index = which(precisionScores!=max(precisionScores))#
				if (length(unique(precisionScores)) == 1) index = sample(1:2,1)#
			}#
		sequences_to_remove = c(sequences_to_remove, suspicous_pairs_list[[i]][index])#
		sequences_to_keep = c(sequences_to_keep, suspicous_pairs_list[[i]][-index])#
	}#
metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]#
sequences = c(); sequences_to_remove = c()#
for (i in 1:dim(metadata)[1])#
	{#
		seqID = NA#
		if (grepl("_NGA-",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"NGA-"))[1]#
		if (grepl("\\|",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"\\|"))[1]#
		index = which(grepl(seqID ,fasta))#
		if (length(index) != 1)#
			{#
				print(i); sequences_to_remove = c(sequences_to_remove, as.character(metadata[i,"trait"]))#
			}	else	{#
				nchar1 = nchar(as.character(metadata[i,"district"])); if (is.na(nchar1)) nchar1 = 0#
				nchar2 = nchar(as.character(metadata[i,"location"])); if (is.na(nchar2)) nchar2 = 0#
				nchar3 = nchar(as.character(metadata[i,"lat"])); if (is.na(nchar3)) nchar3 = 0#
				nchar4 = nchar(as.character(metadata[i,"lon"])); if (is.na(nchar4)) nchar4 = 0#
				if ((nchar1+nchar2+nchar3+nchar4) != 0)#
					{#
						sequences = c(sequences, fasta[index], fasta[index+1])#
					}	else	{#
						sequences_to_remove = c(sequences_to_remove, as.character(metadata[i,"trait"]))#
					}#
			}#
	}#
metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]#
write.csv(metadata, "LASV_L_alignment_2.csv", row.names=F, quote=F); write(sequences, "LASV_L_alignment_2.fasta")#
# write.csv(metadata, "LASV_S_alignment_2.csv", row.names=F, quote=F); write(sequences, "LASV_S_alignment_2.fasta")
mismatches = mismatches_L; metadata  = read.csv("LASV_L_sequences_1.csv", header=T); fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
# mismatches = mismatches_S; metadata = read.csv("LASV_S_sequences_1.csv", header=T); fasta = scan("LASV_S_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
suspicous_pairs_list = list(); suspicous_pairs = c(); nS = list()#
for (m in 0:5)#
	{#
		n = 0#
		if (m == 0) suspicous_pairs = c(suspicous_pairs, paste0(m," NUCLEOTIDE MISMATCH ##############################"), " ")#
		if (m == 1) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHE #############################"), " ")#
		if (m >= 2) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHES ############################"), " ")#
		for (i in 2:dim(mismatches_L)[1])#
			{#
				for (j in 1:(i-1))#
					{#
						if (mismatches_L[i,j] == m)#
							{#
								if (m == 0) suspicous_pairs_list[[length(suspicous_pairs_list)+1]] = c(row.names(mismatches)[i],row.names(mismatches)[j])#
								suspicous_pairs = c(suspicous_pairs, row.names(mismatches)[i]); # cat(paste0(row.names(mismatches)[i],"\n"))#
								suspicous_pairs = c(suspicous_pairs, row.names(mismatches)[j]); # cat(paste0(row.names(mismatches)[j],"\n"))#
								suspicous_pairs = c(suspicous_pairs, " "); n = n + 1; # cat("\n")#
							}#
					}#
			}#
		nS[[m+1]] = n#
	}#
write(suspicous_pairs, "LASV_L_alignment_1.txt"); print(nS)
sequences_to_remove = c(); sequences_to_keep = c()#
for (i in 1:length(suspicous_pairs_list))#
	{#
		seqIDs = c(); datasets = rep(0,length(suspicous_pairs_list[[i]]))#
		for (j in 1:length(suspicous_pairs_list[[i]]))#
			{#
				if (grepl("_NGA-",suspicous_pairs_list[[i]][j]))#
					{#
						seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"NGA-"))[1]); datasets[j] = 1#
					}#
				if (grepl("\\|",suspicous_pairs_list[[i]][j]))#
					{#
						seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"\\|"))[1]); datasets[j] = 2#
					}#
			}#
		precisionScores = rep(0,length(seqIDs))#
		for (j in 1:length(seqIDs))#
			{#
				index = which(grepl(seqIDs[j], metadata[,"trait"])); # print(metadata[index,])#
				if (length(index) == 1)#
					{#
						if (!is.na(metadata[index,"country"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"district"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"location"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"lat"])) precisionScores[j] = precisionScores[j] + 10#
					}	else		{#
						precisionScores[j] = 0; print(seqIDs[j])#
					}#
			}#
		index = NA#
		if (length(unique(datasets)) == 2) index = which(datasets!=1)#
		if (length(unique(datasets)) == 1)#
			{#
				if (length(unique(precisionScores)) == 2) index = which(precisionScores!=max(precisionScores))#
				if (length(unique(precisionScores)) == 1) index = sample(1:2,1)#
			}#
		sequences_to_remove = c(sequences_to_remove, suspicous_pairs_list[[i]][index])#
		sequences_to_keep = c(sequences_to_keep, suspicous_pairs_list[[i]][-index])#
	}
L_all_metadata = read.csv("LASV_L_sequences_1.csv", header=T)
L_all_metadata
sequences = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)
metadata = read.csv("LASV_L_sequences_1.csv", header=T)
fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = fasta[which(grepl(">",fasta))]; sequences = fasta[which(!grepl(">",fasta))]#
metadata = read.csv("LASV_L_sequences_1.csv", header=T)
fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = fasta[which(grepl(">",fasta))]; sequences = fasta[which(!grepl(">",fasta))]#
metadata = read.csv("LASV_L_sequences_1.csv", header=T)#
for (i in 1:length(seq_IDs))#
	{#
		if (!seq_IDs[i]%in%metadata[,"trait"]) print(seq_IDs[i])#
	}
fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = fasta[which(grepl(">",fasta))]; sequences = fasta[which(!grepl(">",fasta))]#
metadata = read.csv("LASV_L_sequences_1.csv", header=T)#
for (i in 1:length(seq_IDs))#
	{#
		if (!gsub(">","",seq_IDs[i])%in%metadata[,"trait"]) print(seq_IDs[i])#
	}
seq_ID = unlist(strsplit(seq_IDs[i],"_NGA-"))[1]
seq_ID
if (grepl("|",seq_IDs[i])) seq_ID = gsub(">","",unlist(strsplit(seq_IDs[i],"|"))[1])
seq_ID
if (grepl("\\|",seq_IDs[i])) seq_ID = gsub(">","",unlist(strsplit(seq_IDs[i],"\\|"))[1])
seq_ID
print(seq_IDs[i]); seq_ID = NA; indices = c()#
				if (grepl("_NGA-",seq_IDs[i])) seq_ID = gsub(">","",unlist(strsplit(seq_IDs[i],"_NGA-"))[1])#
				if (grepl("\\|",seq_IDs[i])) seq_ID = gsub(">","",unlist(strsplit(seq_IDs[i],"\\|"))[1])#
				for (j in 1:dim(metadata)[1])#
					{#
						if (grepl(seqID,metadata[j,"trait"])) indices = c(indices, j)#
					}
indices
fasta = scan("LASV_L_alignment_0.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = fasta[which(grepl(">",fasta))]; sequences = fasta[which(!grepl(">",fasta))]#
metadata = read.csv("LASV_L_sequences_1.csv", header=T); sequences_without_metadata = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!gsub(">","",seq_IDs[i])%in%metadata[,"trait"])#
			{#
				print(seq_IDs[i]); seq_ID = NA; indices = c()#
				if (grepl("_NGA-",seq_IDs[i])) seq_ID = gsub(">","",unlist(strsplit(seq_IDs[i],"_NGA-"))[1])#
				if (grepl("\\|",seq_IDs[i])) seq_ID = gsub(">","",unlist(strsplit(seq_IDs[i],"\\|"))[1])#
				for (j in 1:dim(metadata)[1])#
					{#
						if (grepl(seqID,metadata[j,"trait"])) indices = c(indices, j)#
					}#
				if (length(indices) == 0) sequences_without_metadata = c(sequences_without_metadata,seq_IDs[i])#
				if (length(indices) == 1) seq_IDs[i] = metadata[indices,"trait"]#
				if (length(indices) >= 2) print(paste0("Problem with ",seq_IDs[i]))#
			}#
	}
fasta = scan("LASV_L_alignment_0.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = gsub(">","",fasta[which(grepl(">",fasta))]); sequences = fasta[which(!grepl(">",fasta))]#
metadata = read.csv("LASV_L_sequences_1.csv", header=T); sequences_without_metadata = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!gsub(">","",seq_IDs[i])%in%metadata[,"trait"])#
			{#
				seq_ID = NA; indices = c(); # print(seq_IDs[i])#
				if (grepl("_NGA-",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"_NGA-"))[1]#
				if (grepl("\\|",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"\\|"))[1]#
				for (j in 1:dim(metadata)[1])#
					{#
						if (grepl(seqID,metadata[j,"trait"])) indices = c(indices, j)#
					}#
				if (length(indices) == 0) sequences_without_metadata = c(sequences_without_metadata,seq_IDs[i])#
				if (length(indices) == 1) seq_IDs[i] = metadata[indices,"trait"]#
				if (length(indices) >= 2) print(paste0("Problem with ",seq_IDs[i]))#
			}#
	}#
updated_alignment = c()
sequences_without_metadata
fasta = scan("LASV_L_alignment_0.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = gsub(">","",fasta[which(grepl(">",fasta))]); sequences = fasta[which(!grepl(">",fasta))]#
metadata = read.csv("LASV_L_sequences_1.csv", header=T); sequences_without_metadata = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!gsub(">","",seq_IDs[i])%in%metadata[,"trait"])#
			{#
				seq_ID = NA; indices = c(); # print(seq_IDs[i])#
				if (grepl("_NGA-",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"_NGA-"))[1]#
				if (grepl("\\|",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"\\|"))[1]#
				for (j in 1:dim(metadata)[1])#
					{#
						if (grepl(seqID,metadata[j,"trait"])) indices = c(indices, j)#
					}#
				if (length(indices) == 0) sequences_without_metadata = c(sequences_without_metadata,seq_IDs[i])#
				if (length(indices) == 1) seq_IDs[i] = metadata[indices,"trait"]#
				if (length(indices) >= 2) print(paste0("Problem with ",seq_IDs[i]))#
			}#
	}#
updated_alignment = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!seq_IDs[i]%in%sequences_without_metadata)#
			{#
				updated_alignment = c(updated_alignment, paste0(">",seq_IDs[i]), sequences[i])#
			}#
	}#
write(updated_alignment, "LASV_L_alignment_1.fasta")#
fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = gsub(">","",fasta[which(grepl(">",fasta))]); sequences = fasta[which(!grepl(">",fasta))]#
metadata = read.csv("LASV_L_sequences_1.csv", header=T); sequences_without_metadata = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!gsub(">","",seq_IDs[i])%in%metadata[,"trait"])  print(seq_IDs[i])#
	}
seq_IDs[i]
fasta = scan("LASV_L_alignment_0.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = gsub(">","",fasta[which(grepl(">",fasta))]); sequences = fasta[which(!grepl(">",fasta))]#
metadata = read.csv("LASV_L_sequences_1.csv", header=T); sequences_without_metadata = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!gsub(">","",seq_IDs[i])%in%metadata[,"trait"])#
			{#
				seq_ID = NA; indices = c(); # print(seq_IDs[i])#
				if (grepl("_NGA-",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"_NGA-"))[1]#
				if (grepl("\\|",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"\\|"))[1]#
				for (j in 1:dim(metadata)[1])#
					{#
						if (grepl(seqID,metadata[j,"trait"])) indices = c(indices, j)#
					}#
				if (length(indices) == 0) sequences_without_metadata = c(sequences_without_metadata,seq_IDs[i])#
				if (length(indices) == 1) seq_IDs[i] = metadata[indices,"trait"]#
				if (length(indices) >= 2) print(paste0("Problem with ",seq_IDs[i]))#
			}#
	}#
updated_alignment = c()
seq_IDs
metadata[indices,"trait"]
fasta = scan("LASV_L_alignment_0.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = gsub(">","",fasta[which(grepl(">",fasta))]); sequences = fasta[which(!grepl(">",fasta))]#
metadata = read.csv("LASV_L_sequences_1.csv", header=T); sequences_without_metadata = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!gsub(">","",seq_IDs[i])%in%metadata[,"trait"])#
			{#
				seq_ID = NA; indices = c(); # print(seq_IDs[i])#
				if (grepl("_NGA-",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"_NGA-"))[1]#
				if (grepl("\\|",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"\\|"))[1]#
				for (j in 1:dim(metadata)[1])#
					{#
						if (grepl(seqID,metadata[j,"trait"])) indices = c(indices, j)#
					}#
				if (length(indices) == 0) sequences_without_metadata = c(sequences_without_metadata,seq_IDs[i])#
				if (length(indices) == 1) seq_IDs[i] = as.character(metadata[indices,"trait"])#
				if (length(indices) >= 2) print(paste0("Problem with ",seq_IDs[i]))#
			}#
	}#
updated_alignment = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!seq_IDs[i]%in%sequences_without_metadata)#
			{#
				updated_alignment = c(updated_alignment, paste0(">",seq_IDs[i]), sequences[i])#
			}#
	}#
write(updated_alignment, "LASV_L_alignment_1.fasta")#
fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = gsub(">","",fasta[which(grepl(">",fasta))]); sequences = fasta[which(!grepl(">",fasta))]#
metadata = read.csv("LASV_L_sequences_1.csv", header=T); sequences_without_metadata = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!gsub(">","",seq_IDs[i])%in%metadata[,"trait"]) print(seq_IDs[i])#
	}
fasta = scan("LASV_L_alignment_0.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = gsub(">","",fasta[which(grepl(">",fasta))]); sequences = fasta[which(!grepl(">",fasta))]#
metadata = read.csv("LASV_L_sequences_1.csv", header=T); sequences_without_metadata = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!gsub(">","",seq_IDs[i])%in%metadata[,"trait"])#
			{#
				seq_ID = NA; indices = c(); # print(seq_IDs[i])#
				if (grepl("_NGA-",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"_NGA-"))[1]#
				if (grepl("\\|",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"\\|"))[1]#
				for (j in 1:dim(metadata)[1])#
					{#
						if (grepl(seqID,metadata[j,"trait"])) indices = c(indices, j)#
					}#
				if (length(indices) == 0) sequences_without_metadata = c(sequences_without_metadata,seq_IDs[i])#
				if (length(indices) == 1) seq_IDs[i] = as.character(metadata[indices,"trait"])#
				if (length(indices) >= 2) print(paste0("Problem with ",seq_IDs[i]))#
			}#
	}#
updated_alignment = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!seq_IDs[i]%in%sequences_without_metadata)#
			{#
				updated_alignment = c(updated_alignment, paste0(">",seq_IDs[i]), sequences[i])#
			}#
	}#
write(updated_alignment, "LASV_L_alignment_1.fasta")#
fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = gsub(">","",fasta[which(grepl(">",fasta))]); sequences = fasta[which(!grepl(">",fasta))]#
metadata = read.csv("LASV_L_sequences_1.csv", header=T); sequences_without_metadata = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!gsub(">","",seq_IDs[i])%in%metadata[,"trait"]) print(seq_IDs[i])#
	}#
#
fasta = scan("LASV_S_alignment_0.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = gsub(">","",fasta[which(grepl(">",fasta))]); sequences = fasta[which(!grepl(">",fasta))]#
metadata = read.csv("LASV_S_sequences_1.csv", header=T); sequences_without_metadata = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!gsub(">","",seq_IDs[i])%in%metadata[,"trait"])#
			{#
				seq_ID = NA; indices = c(); # print(seq_IDs[i])#
				if (grepl("_NGA-",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"_NGA-"))[1]#
				if (grepl("\\|",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"\\|"))[1]#
				for (j in 1:dim(metadata)[1])#
					{#
						if (grepl(seqID,metadata[j,"trait"])) indices = c(indices, j)#
					}#
				if (length(indices) == 0) sequences_without_metadata = c(sequences_without_metadata,seq_IDs[i])#
				if (length(indices) == 1) seq_IDs[i] = as.character(metadata[indices,"trait"])#
				if (length(indices) >= 2) print(paste0("Problem with ",seq_IDs[i]))#
			}#
	}#
updated_alignment = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!seq_IDs[i]%in%sequences_without_metadata)#
			{#
				updated_alignment = c(updated_alignment, paste0(">",seq_IDs[i]), sequences[i])#
			}#
	}#
write(updated_alignment, "LASV_S_alignment_1.fasta")#
fasta = scan("LASV_S_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = gsub(">","",fasta[which(grepl(">",fasta))]); sequences = fasta[which(!grepl(">",fasta))]#
metadata = read.csv("LASV_S_sequences_1.csv", header=T); sequences_without_metadata = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!gsub(">","",seq_IDs[i])%in%metadata[,"trait"]) print(seq_IDs[i])#
	}
fasta = scan("LASV_S_alignment_0.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = gsub(">","",fasta[which(grepl(">",fasta))]); sequences = fasta[which(!grepl(">",fasta))]#
metadata = read.csv("LASV_S_sequences_1.csv", header=T); sequences_without_metadata = c()
for (i in 1:length(seq_IDs))#
	{#
		if (!gsub(">","",seq_IDs[i])%in%metadata[,"trait"])#
			{#
				seq_ID = NA; indices = c(); # print(seq_IDs[i])#
				if (grepl("_NGA-",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"_NGA-"))[1]#
				if (grepl("\\|",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"\\|"))[1]#
				for (j in 1:dim(metadata)[1])#
					{#
						if (grepl(seqID,metadata[j,"trait"])) indices = c(indices, j)#
					}#
				if (length(indices) == 0) sequences_without_metadata = c(sequences_without_metadata,seq_IDs[i])#
				if (length(indices) == 1) seq_IDs[i] = as.character(metadata[indices,"trait"])#
				if (length(indices) >= 2) print(paste0("Problem with ",seq_IDs[i]))#
			}#
	}
sequences_without_metadata
seq_IDs
i=674
!gsub(">","",seq_IDs[i])%in%metadata[,"trait"]
seq_ID = NA; indices = c(); # print(seq_IDs[i])
grepl("\\|",seq_IDs[i])
seq_ID = unlist(strsplit(seq_IDs[i],"\\|"))[1]
seq_ID
metadata[j,"trait"]
fasta = scan("LASV_S_alignment_0.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = gsub(">","",fasta[which(grepl(">",fasta))]); sequences = fasta[which(!grepl(">",fasta))]#
metadata = read.csv("LASV_S_sequences_1.csv", header=T); sequences_without_metadata = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!gsub(">","",seq_IDs[i])%in%metadata[,"trait"])#
			{#
				seq_ID = NA; indices = c(); # print(seq_IDs[i])#
				if (grepl("_NGA-",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"_NGA-"))[1]#
				if (grepl("\\|",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"\\|"))[1]#
				for (j in 1:dim(metadata)[1])#
					{#
						if (grepl(seqID,as.character(metadata[j,"trait"]))) indices = c(indices, j)#
					}#
				if (length(indices) == 0) sequences_without_metadata = c(sequences_without_metadata,seq_IDs[i])#
				if (length(indices) == 1) seq_IDs[i] = as.character(metadata[indices,"trait"])#
				if (length(indices) >= 2) print(paste0("Problem with ",seq_IDs[i]))#
			}#
	}
sequences_without_metadata
library(rgeos)#
library(diagram)#
library(seraphim)#
library(lubridate)#
library(OutbreakTools)#
#
analyses = c("LASV_segment_L", "LASV_segment_S")#
# admins0_NGA = getData("GADM", country="NGA", level=0)#
# admins1_NGA = getData("GADM", country="NGA", level=1)#
# admins2_NGA = getData("GADM", country="NGA", level=2)#
# admins0_SLE = getData("GADM", country="SLE", level=0)#
# admins1_SLE = getData("GADM", country="SLE", level=1)#
# admins2_SLE = getData("GADM", country="SLE", level=2)#
#
# 1. Merging the two data sets --> "..._sequences_1.csv"#
#
L_all_metadata = read.csv("Dataset_Nigerian_study/LASV_segment_L.csv", header=T)#
S_all_metadata = read.csv("Dataset_Nigerian_study/LASV_segment_S.csv", header=T)#
L_all_metadata[which(L_all_metadata[,"location"]=="COORDINATES"),"location"] = NA#
S_all_metadata[which(S_all_metadata[,"location"]=="COORDINATES"),"location"] = NA#
metadata = read.csv("Dataset_of_Gytis_Dudas/LASV_metadata.csv", header=T); metadata_L = c()#
for (i in 1:dim(metadata)[1])#
	{#
		if (nchar(as.character(metadata[i,"L"])) > 0)#
			{#
				metadata_line = matrix(nrow=1, ncol=dim(L_all_metadata)[2])#
				colnames(metadata_line) = colnames(L_all_metadata)#
				metadata_line = as.data.frame(metadata_line)#
				metadata_line[1,"trait"] = as.character(metadata[i,"L"])#
				metadata_line[1,"country"] = as.character(metadata[i,"country"])#
				metadata_line[1,"district"] = as.character(metadata[i,"district"])#
				metadata_line[1,"location"] = as.character( metadata[i,"location"])#
				metadata_line[1,"lat"] = metadata[i,"lat"]#
				metadata_line[1,"lon"] = metadata[i,"lon"]#
				metadata_line[1,which(metadata_line[1,]=="")] = NA#
				L_all_metadata = rbind(L_all_metadata, metadata_line)#
			}#
	}#
write.csv(L_all_metadata, "LASV_L_sequences_1.csv", quote=F, row.names=F)#
metadata = read.csv("Dataset_of_Gytis_Dudas/LASV_metadata.csv", header=T); metadata_S = c()#
for (i in 1:dim(metadata)[1])#
	{#
		if (nchar(as.character(metadata[i,"S"])) > 0)#
			{#
				metadata_line = matrix(nrow=1, ncol=dim(S_all_metadata)[2])#
				colnames(metadata_line) = colnames(S_all_metadata)#
				metadata_line = as.data.frame(metadata_line)#
				metadata_line[1,"trait"] = as.character(metadata[i,"S"])#
				metadata_line[1,"country"] = as.character(metadata[i,"country"])#
				metadata_line[1,"district"] = as.character(metadata[i,"district"])#
				metadata_line[1,"location"] = as.character( metadata[i,"location"])#
				metadata_line[1,"lat"] = metadata[i,"lat"]#
				metadata_line[1,"lon"] = metadata[i,"lon"]#
				metadata_line[1,which(metadata_line[1,]=="")] = NA#
				S_all_metadata = rbind(S_all_metadata, metadata_line)#
			}#
	}#
write.csv(S_all_metadata, "LASV_S_sequences_1.csv", quote=F, row.names=F)
fasta = scan("LASV_S_alignment_0.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = gsub(">","",fasta[which(grepl(">",fasta))]); sequences = fasta[which(!grepl(">",fasta))]#
metadata = read.csv("LASV_S_sequences_1.csv", header=T); sequences_without_metadata = c()
metadata
for (i in 1:length(seq_IDs))#
	{#
		if (!gsub(">","",seq_IDs[i])%in%metadata[,"trait"])#
			{#
				seq_ID = NA; indices = c(); # print(seq_IDs[i])#
				if (grepl("_NGA-",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"_NGA-"))[1]#
				if (grepl("\\|",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"\\|"))[1]#
				for (j in 1:dim(metadata)[1])#
					{#
						if (grepl(seqID,as.character(metadata[j,"trait"]))) indices = c(indices, j)#
					}#
				if (length(indices) == 0) sequences_without_metadata = c(sequences_without_metadata,seq_IDs[i])#
				if (length(indices) == 1) seq_IDs[i] = as.character(metadata[indices,"trait"])#
				if (length(indices) >= 2) print(paste0("Problem with ",seq_IDs[i]))#
			}#
	}
sequences_without_metadata
!gsub(">","",seq_IDs[i])%in%metadata[,"trait"]
seq_ID = NA; indices = c(); # print(seq_IDs[i])
if (grepl("_NGA-",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"_NGA-"))[1]
if (grepl("\\|",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"\\|"))[1]
seq_ID
metadata
fasta = scan("LASV_L_alignment_0.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = gsub(">","",fasta[which(grepl(">",fasta))]); sequences = fasta[which(!grepl(">",fasta))]#
metadata = read.csv("LASV_L_sequences_1.csv", header=T); sequences_without_metadata = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!gsub(">","",seq_IDs[i])%in%metadata[,"trait"])#
			{#
				seq_ID = NA; indices = c(); # print(seq_IDs[i])#
				if (grepl("_NGA-",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"_NGA-"))[1]#
				if (grepl("\\|",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"\\|"))[1]#
				for (j in 1:dim(metadata)[1])#
					{#
						if (grepl(seq_ID,as.character(metadata[j,"trait"]))) indices = c(indices, j)#
					}#
				if (length(indices) == 0) sequences_without_metadata = c(sequences_without_metadata,seq_IDs[i])#
				if (length(indices) == 1) seq_IDs[i] = as.character(metadata[indices,"trait"])#
				if (length(indices) >= 2) print(paste0("Problem with ",seq_IDs[i]))#
			}#
	}#
updated_alignment = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!seq_IDs[i]%in%sequences_without_metadata)#
			{#
				updated_alignment = c(updated_alignment, paste0(">",seq_IDs[i]), sequences[i])#
			}#
	}#
write(updated_alignment, "LASV_L_alignment_1.fasta")#
fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = gsub(">","",fasta[which(grepl(">",fasta))]); sequences = fasta[which(!grepl(">",fasta))]#
metadata = read.csv("LASV_L_sequences_1.csv", header=T); sequences_without_metadata = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!gsub(">","",seq_IDs[i])%in%metadata[,"trait"]) print(seq_IDs[i])#
	}#
#
fasta = scan("LASV_S_alignment_0.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = gsub(">","",fasta[which(grepl(">",fasta))]); sequences = fasta[which(!grepl(">",fasta))]#
metadata = read.csv("LASV_S_sequences_1.csv", header=T); sequences_without_metadata = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!gsub(">","",seq_IDs[i])%in%metadata[,"trait"])#
			{#
				seq_ID = NA; indices = c(); # print(seq_IDs[i])#
				if (grepl("_NGA-",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"_NGA-"))[1]#
				if (grepl("\\|",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"\\|"))[1]#
				for (j in 1:dim(metadata)[1])#
					{#
						if (grepl(seq_ID,as.character(metadata[j,"trait"]))) indices = c(indices, j)#
					}#
				if (length(indices) == 0) sequences_without_metadata = c(sequences_without_metadata,seq_IDs[i])#
				if (length(indices) == 1) seq_IDs[i] = as.character(metadata[indices,"trait"])#
				if (length(indices) >= 2) print(paste0("Problem with ",seq_IDs[i]))#
			}#
	}#
updated_alignment = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!seq_IDs[i]%in%sequences_without_metadata)#
			{#
				updated_alignment = c(updated_alignment, paste0(">",seq_IDs[i]), sequences[i])#
			}#
	}#
write(updated_alignment, "LASV_S_alignment_1.fasta")#
fasta = scan("LASV_S_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = gsub(">","",fasta[which(grepl(">",fasta))]); sequences = fasta[which(!grepl(">",fasta))]#
metadata = read.csv("LASV_S_sequences_1.csv", header=T); sequences_without_metadata = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!gsub(">","",seq_IDs[i])%in%metadata[,"trait"]) print(seq_IDs[i])#
	}
fasta = scan("LASV_L_alignment_0.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = gsub(">","",fasta[which(grepl(">",fasta))]); sequences = fasta[which(!grepl(">",fasta))]#
metadata = read.csv("LASV_L_sequences_1.csv", header=T); sequences_without_metadata = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!gsub(">","",seq_IDs[i])%in%metadata[,"trait"])#
			{#
				seq_ID = NA; indices = c(); # print(seq_IDs[i])#
				if (grepl("_NGA-",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"NGA-"))[1]#
				if (grepl("\\|",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"\\|"))[1]#
				for (j in 1:dim(metadata)[1])#
					{#
						if (grepl(seq_ID,as.character(metadata[j,"trait"]))) indices = c(indices, j)#
					}#
				if (length(indices) == 0) sequences_without_metadata = c(sequences_without_metadata,seq_IDs[i])#
				if (length(indices) == 1) seq_IDs[i] = as.character(metadata[indices,"trait"])#
				if (length(indices) >= 2) print(paste0("Problem with ",seq_IDs[i]))#
			}#
	}#
updated_alignment = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!seq_IDs[i]%in%sequences_without_metadata)#
			{#
				updated_alignment = c(updated_alignment, paste0(">",seq_IDs[i]), sequences[i])#
			}#
	}#
write(updated_alignment, "LASV_L_alignment_1.fasta")#
fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = gsub(">","",fasta[which(grepl(">",fasta))]); sequences = fasta[which(!grepl(">",fasta))]#
metadata = read.csv("LASV_L_sequences_1.csv", header=T); sequences_without_metadata = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!gsub(">","",seq_IDs[i])%in%metadata[,"trait"]) print(seq_IDs[i])#
	}
fasta = scan("LASV_S_alignment_0.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = gsub(">","",fasta[which(grepl(">",fasta))]); sequences = fasta[which(!grepl(">",fasta))]#
metadata = read.csv("LASV_S_sequences_1.csv", header=T); sequences_without_metadata = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!gsub(">","",seq_IDs[i])%in%metadata[,"trait"])#
			{#
				seq_ID = NA; indices = c(); # print(seq_IDs[i])#
				if (grepl("_NGA-",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"NGA-"))[1]#
				if (grepl("\\|",seq_IDs[i])) seq_ID = unlist(strsplit(seq_IDs[i],"\\|"))[1]#
				for (j in 1:dim(metadata)[1])#
					{#
						if (grepl(seq_ID,as.character(metadata[j,"trait"]))) indices = c(indices, j)#
					}#
				if (length(indices) == 0) sequences_without_metadata = c(sequences_without_metadata,seq_IDs[i])#
				if (length(indices) == 1) seq_IDs[i] = as.character(metadata[indices,"trait"])#
				if (length(indices) >= 2) print(paste0("Problem with ",seq_IDs[i]))#
			}#
	}#
updated_alignment = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!seq_IDs[i]%in%sequences_without_metadata)#
			{#
				updated_alignment = c(updated_alignment, paste0(">",seq_IDs[i]), sequences[i])#
			}#
	}#
write(updated_alignment, "LASV_S_alignment_1.fasta")#
fasta = scan("LASV_S_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = gsub(">","",fasta[which(grepl(">",fasta))]); sequences = fasta[which(!grepl(">",fasta))]#
metadata = read.csv("LASV_S_sequences_1.csv", header=T); sequences_without_metadata = c()#
for (i in 1:length(seq_IDs))#
	{#
		if (!gsub(">","",seq_IDs[i])%in%metadata[,"trait"]) print(seq_IDs[i])#
	}
mismatchesMatrix = function(sequences)#
	{#
		mmd = matrix(nrow=length(sequences), ncol=length(sequences))#
		for (i in 1:length(sequences))#
			{#
				for (j in 1:i)#
					{#
						if (i == j)#
							{#
								mmd[j,i] = 0#
							}	else	{#
								seq1 = unlist(strsplit(sequences[j],""))#
								seq2 = unlist(strsplit(sequences[i],""))#
								seq2 = seq2[which((seq1=="A")|(seq1=="C")|(seq1=="G")|(seq1=="T")|(seq1=="a")|(seq1=="c")|(seq1=="g")|(seq1=="t"))]#
								seq1 = seq1[which((seq1=="A")|(seq1=="C")|(seq1=="G")|(seq1=="T")|(seq1=="a")|(seq1=="c")|(seq1=="g")|(seq1=="t"))]#
								seq1 = seq1[which((seq2=="A")|(seq2=="C")|(seq2=="G")|(seq2=="T")|(seq2=="a")|(seq2=="c")|(seq2=="g")|(seq2=="t"))]#
								seq2 = seq2[which((seq2=="A")|(seq2=="C")|(seq2=="G")|(seq2=="T")|(seq2=="a")|(seq2=="c")|(seq2=="g")|(seq2=="t"))]#
								mm = sum(seq1!=seq2)#
								mmd[j,i] = mm; mmd[i,j] = mm#
							}#
					}#
			}#
		return(mmd)#
	}#
#
fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = fasta[which(grepl(">",fasta))]; sequences = fasta[which(!grepl(">",fasta))]#
mismatches = mismatchesMatrix(sequences); row.names(mismatches) = gsub(">","",seq_IDs)#
write.csv(mismatches, "LASV_L_alignment_1.csv", quote=F)#
#
fasta = scan("LASV_S_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
seq_IDs = fasta[which(grepl(">",fasta))]; sequences = fasta[which(!grepl(">",fasta))]#
mismatches = mismatchesMatrix(sequences); row.names(mismatches) = gsub(">","",seq_IDs)#
write.csv(mismatches, "LASV_S_alignment_1.csv", quote=F)#
#
mismatches_L = read.csv("LASV_L_alignment_1.csv", header=T)#
mismatches_S = read.csv("LASV_S_alignment_1.csv", header=T)#
pdf("Mismatch_distributions_NEW.pdf", width=8, height=4); datasets = c(); # dev.new(width=8, height=4)#
par(mfrow=c(1,2), mgp=c(1,0.35,0), oma=c(1,0.5,1,2), mar=c(2.0,3,0,0))#
hist(mismatches_L[lower.tri(mismatches_L)], breaks=1000, col="gray50", border=NA, axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.0,0), lwd=0.2, tck=-0.013, col.axis="gray30")#
axis(side=2, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.25,0), lwd=0.2, tck=-0.014, col.axis="gray30")#
title(xlab="mismatches", cex.lab=0.7, mgp=c(0.8,0,0), col.lab="gray30")#
title(ylab="frequency", cex.lab=0.7, mgp=c(1.2,0,0), col.lab="gray30")#
title(main="Alignment for L segment", cex.main=0.7, col.main="gray30", line=-1.7)#
hist(mismatches_S[lower.tri(mismatches_S)], breaks=1000, col="gray50", border=NA, axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.0,0), lwd=0.2, tck=-0.013, col.axis="gray30")#
axis(side=2, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.25,0), lwd=0.2, tck=-0.014, col.axis="gray30")#
title(xlab="mismatches", cex.lab=0.7, mgp=c(0.8,0,0), col.lab="gray30")#
title(ylab="frequency", cex.lab=0.7, mgp=c(1.2,0,0), col.lab="gray30")#
title(main="Alignment for S segment", cex.main=0.7, col.main="gray30", line=-1.7)#
dev.off(); # dev.copy2pdf(file=paste("Mismatch_distributions.pdf",sep=""))#
#
mismatches = mismatches_L; metadata  = read.csv("LASV_L_sequences_1.csv", header=T); fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
# mismatches = mismatches_S; metadata = read.csv("LASV_S_sequences_1.csv", header=T); fasta = scan("LASV_S_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
suspicous_pairs_list = list(); suspicous_pairs = c(); nS = list()#
for (m in 0:5)#
	{#
		n = 0#
		if (m == 0) suspicous_pairs = c(suspicous_pairs, paste0(m," NUCLEOTIDE MISMATCH ##############################"), " ")#
		if (m == 1) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHE #############################"), " ")#
		if (m >= 2) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHES ############################"), " ")#
		for (i in 2:dim(mismatches_L)[1])#
			{#
				for (j in 1:(i-1))#
					{#
						if (mismatches_L[i,j] == m)#
							{#
								if (m == 0) suspicous_pairs_list[[length(suspicous_pairs_list)+1]] = c(row.names(mismatches)[i],row.names(mismatches)[j])#
								suspicous_pairs = c(suspicous_pairs, row.names(mismatches)[i]); # cat(paste0(row.names(mismatches)[i],"\n"))#
								suspicous_pairs = c(suspicous_pairs, row.names(mismatches)[j]); # cat(paste0(row.names(mismatches)[j],"\n"))#
								suspicous_pairs = c(suspicous_pairs, " "); n = n + 1; # cat("\n")#
							}#
					}#
			}#
		nS[[m+1]] = n#
	}#
write(suspicous_pairs, "LASV_L_alignment_1.txt"); print(nS)#
# write(suspicous_pairs, "LASV_S_alignment_1.txt"); print(nS)#
sequences_to_remove = c(); sequences_to_keep = c()#
for (i in 1:length(suspicous_pairs_list))#
	{#
		seqIDs = c(); datasets = rep(0,length(suspicous_pairs_list[[i]]))#
		for (j in 1:length(suspicous_pairs_list[[i]]))#
			{#
				if (grepl("_NGA-",suspicous_pairs_list[[i]][j]))#
					{#
						seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"NGA-"))[1]); datasets[j] = 1#
					}#
				if (grepl("\\|",suspicous_pairs_list[[i]][j]))#
					{#
						seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"\\|"))[1]); datasets[j] = 2#
					}#
			}#
		precisionScores = rep(0,length(seqIDs))#
		for (j in 1:length(seqIDs))#
			{#
				index = which(grepl(seqIDs[j], metadata[,"trait"])); # print(metadata[index,])#
				if (length(index) == 1)#
					{#
						if (!is.na(metadata[index,"country"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"district"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"location"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"lat"])) precisionScores[j] = precisionScores[j] + 10#
					}	else		{#
						precisionScores[j] = 0; print(seqIDs[j])#
					}#
			}#
		index = NA#
		if (length(unique(datasets)) == 2) index = which(datasets!=1)#
		if (length(unique(datasets)) == 1)#
			{#
				if (length(unique(precisionScores)) == 2) index = which(precisionScores!=max(precisionScores))#
				if (length(unique(precisionScores)) == 1) index = sample(1:2,1)#
			}#
		sequences_to_remove = c(sequences_to_remove, suspicous_pairs_list[[i]][index])#
		sequences_to_keep = c(sequences_to_keep, suspicous_pairs_list[[i]][-index])#
	}#
metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]#
sequences = c(); sequences_to_remove = c()#
for (i in 1:dim(metadata)[1])#
	{#
		seqID = NA#
		if (grepl("_NGA-",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"NGA-"))[1]#
		if (grepl("\\|",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"\\|"))[1]#
		index = which(grepl(seqID ,fasta))#
		if (length(index) != 1)#
			{#
				print(i); sequences_to_remove = c(sequences_to_remove, as.character(metadata[i,"trait"]))#
			}	else	{#
				nchar1 = nchar(as.character(metadata[i,"district"])); if (is.na(nchar1)) nchar1 = 0#
				nchar2 = nchar(as.character(metadata[i,"location"])); if (is.na(nchar2)) nchar2 = 0#
				nchar3 = nchar(as.character(metadata[i,"lat"])); if (is.na(nchar3)) nchar3 = 0#
				nchar4 = nchar(as.character(metadata[i,"lon"])); if (is.na(nchar4)) nchar4 = 0#
				if ((nchar1+nchar2+nchar3+nchar4) != 0)#
					{#
						sequences = c(sequences, fasta[index], fasta[index+1])#
					}	else	{#
						sequences_to_remove = c(sequences_to_remove, as.character(metadata[i,"trait"]))#
					}#
			}#
	}#
metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]#
write.csv(metadata, "LASV_L_alignment_2.csv", row.names=F, quote=F); write(sequences, "LASV_L_alignment_2.fasta")#
# write.csv(metadata, "LASV_S_alignment_2.csv", row.names=F, quote=F); write(sequences, "LASV_S_alignment_2.fasta")#
#
for (i in 1:length(analyses))#
	{#
		segment = unlist(strsplit(analyses[i],"_"))[length(unlist(strsplit(analyses[i],"_")))]#
		metadata = read.csv(paste0("LASV_",segment,"_alignment_2.csv"), header=T)#
		sequences = scan(paste0("LASV_",segment,"_alignment_2.fasta"), what="", sep="\n", quiet=TRUE)#
		indices1a = which(metadata[,"country"]=="NGA"); indices1b = which(metadata[,"country"]!="NGA")#
		indices2a = which(grepl("_NGA_",sequences)); indices2b = which(!grepl("_NGA_",sequences))#
		write.csv(metadata[indices1a,], paste0("LASV_NGA_segment",segment,".csv"), row.names=F, quote=F)#
		write.csv(metadata[indices1b,], paste0("LASV_MRU_segment",segment,".csv"), row.names=F, quote=F)		#
		sequencesNGA = c(); sequencesMRU = c()#
		for (j in 1:length(indices2a))#
			{#
				sequencesNGA = c(sequencesNGA, sequences[indices2a[i]], sequences[indices2a[i]+1])#
			}#
		for (j in 1:length(indices2b))#
			{#
				sequencesMRU = c(sequencesMRU, sequences[indices2b[i]], sequences[indices2b[i]+1])#
			}#
		write(sequencesNGA, paste0("LASV_NGA_segment",segment,".fasta"))#
		write(sequencesMRU, paste0("LASV_MRU_segment",segment,".fasta"))#
	}
mismatches_L = read.csv("LASV_L_alignment_1.csv", header=T)#
mismatches_S = read.csv("LASV_S_alignment_1.csv", header=T)#
pdf("Mismatch_distributions_NEW.pdf", width=8, height=4); datasets = c(); # dev.new(width=8, height=4)#
par(mfrow=c(1,2), mgp=c(1,0.35,0), oma=c(1,0.5,1,2), mar=c(2.0,3,0,0))#
hist(mismatches_L[lower.tri(mismatches_L)], breaks=1000, col="gray50", border=NA, axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.0,0), lwd=0.2, tck=-0.013, col.axis="gray30")#
axis(side=2, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.25,0), lwd=0.2, tck=-0.014, col.axis="gray30")#
title(xlab="mismatches", cex.lab=0.7, mgp=c(0.8,0,0), col.lab="gray30")#
title(ylab="frequency", cex.lab=0.7, mgp=c(1.2,0,0), col.lab="gray30")#
title(main="Alignment for L segment", cex.main=0.7, col.main="gray30", line=-1.7)#
hist(mismatches_S[lower.tri(mismatches_S)], breaks=1000, col="gray50", border=NA, axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.0,0), lwd=0.2, tck=-0.013, col.axis="gray30")#
axis(side=2, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.25,0), lwd=0.2, tck=-0.014, col.axis="gray30")#
title(xlab="mismatches", cex.lab=0.7, mgp=c(0.8,0,0), col.lab="gray30")#
title(ylab="frequency", cex.lab=0.7, mgp=c(1.2,0,0), col.lab="gray30")#
title(main="Alignment for S segment", cex.main=0.7, col.main="gray30", line=-1.7)#
dev.off(); # dev.copy2pdf(file=paste("Mismatch_distributions.pdf",sep=""))
mismatches = mismatches_L; metadata  = read.csv("LASV_L_sequences_1.csv", header=T); fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
# mismatches = mismatches_S; metadata = read.csv("LASV_S_sequences_1.csv", header=T); fasta = scan("LASV_S_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
suspicous_pairs_list = list(); suspicous_pairs = c(); nS = list()#
for (m in 0:5)#
	{#
		n = 0#
		if (m == 0) suspicous_pairs = c(suspicous_pairs, paste0(m," NUCLEOTIDE MISMATCH ##############################"), " ")#
		if (m == 1) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHE #############################"), " ")#
		if (m >= 2) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHES ############################"), " ")#
		for (i in 2:dim(mismatches_L)[1])#
			{#
				for (j in 1:(i-1))#
					{#
						if (mismatches_L[i,j] == m)#
							{#
								if (m == 0) suspicous_pairs_list[[length(suspicous_pairs_list)+1]] = c(row.names(mismatches)[i],row.names(mismatches)[j])#
								suspicous_pairs = c(suspicous_pairs, row.names(mismatches)[i]); # cat(paste0(row.names(mismatches)[i],"\n"))#
								suspicous_pairs = c(suspicous_pairs, row.names(mismatches)[j]); # cat(paste0(row.names(mismatches)[j],"\n"))#
								suspicous_pairs = c(suspicous_pairs, " "); n = n + 1; # cat("\n")#
							}#
					}#
			}#
		nS[[m+1]] = n#
	}#
write(suspicous_pairs, "LASV_L_alignment_1.txt"); print(nS)
sequences_to_remove = c(); sequences_to_keep = c()#
for (i in 1:length(suspicous_pairs_list))#
	{#
		seqIDs = c(); datasets = rep(0,length(suspicous_pairs_list[[i]]))#
		for (j in 1:length(suspicous_pairs_list[[i]]))#
			{#
				if (grepl("_NGA-",suspicous_pairs_list[[i]][j]))#
					{#
						seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"NGA-"))[1]); datasets[j] = 1#
					}#
				if (grepl("\\|",suspicous_pairs_list[[i]][j]))#
					{#
						seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"\\|"))[1]); datasets[j] = 2#
					}#
			}#
		precisionScores = rep(0,length(seqIDs))#
		for (j in 1:length(seqIDs))#
			{#
				index = which(grepl(seqIDs[j], metadata[,"trait"])); # print(metadata[index,])#
				if (length(index) == 1)#
					{#
						if (!is.na(metadata[index,"country"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"district"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"location"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"lat"])) precisionScores[j] = precisionScores[j] + 10#
					}	else		{#
						precisionScores[j] = 0; print(seqIDs[j])#
					}#
			}#
		index = NA#
		if (length(unique(datasets)) == 2) index = which(datasets!=1)#
		if (length(unique(datasets)) == 1)#
			{#
				if (length(unique(precisionScores)) == 2) index = which(precisionScores!=max(precisionScores))#
				if (length(unique(precisionScores)) == 1) index = sample(1:2,1)#
			}#
		sequences_to_remove = c(sequences_to_remove, suspicous_pairs_list[[i]][index])#
		sequences_to_keep = c(sequences_to_keep, suspicous_pairs_list[[i]][-index])#
	}#
metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]#
sequences = c(); sequences_to_remove = c()#
for (i in 1:dim(metadata)[1])#
	{#
		seqID = NA#
		if (grepl("_NGA-",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"NGA-"))[1]#
		if (grepl("\\|",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"\\|"))[1]#
		index = which(grepl(seqID ,fasta))#
		if (length(index) != 1)#
			{#
				print(i); sequences_to_remove = c(sequences_to_remove, as.character(metadata[i,"trait"]))#
			}	else	{#
				nchar1 = nchar(as.character(metadata[i,"district"])); if (is.na(nchar1)) nchar1 = 0#
				nchar2 = nchar(as.character(metadata[i,"location"])); if (is.na(nchar2)) nchar2 = 0#
				nchar3 = nchar(as.character(metadata[i,"lat"])); if (is.na(nchar3)) nchar3 = 0#
				nchar4 = nchar(as.character(metadata[i,"lon"])); if (is.na(nchar4)) nchar4 = 0#
				if ((nchar1+nchar2+nchar3+nchar4) != 0)#
					{#
						sequences = c(sequences, fasta[index], fasta[index+1])#
					}	else	{#
						sequences_to_remove = c(sequences_to_remove, as.character(metadata[i,"trait"]))#
					}#
			}#
	}#
metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]#
write.csv(metadata, "LASV_L_alignment_2.csv", row.names=F, quote=F); write(sequences, "LASV_L_alignment_2.fasta")#
# write.csv(metadata, "LASV_S_alignment_2.csv", row.names=F, quote=F); write(sequences, "LASV_S_alignment_2.fasta")
i=420
seqID = NA
if (grepl("_NGA-",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"NGA-"))[1]
if (grepl("\\|",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"\\|"))[1]
seqID
metadata[i,"trait"]
metadata
i
metadata[i,"trait"]
metadata[,"trait"]
dim(metadata)
dim(metadata)[1]
sequences = c(); sequences_to_remove = c()#
for (i in 1:dim(metadata)[1])#
	{#
		seqID = NA#
		if (grepl("_NGA-",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"NGA-"))[1]#
		if (grepl("\\|",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"\\|"))[1]#
		index = which(grepl(seqID ,fasta))#
		if (length(index) != 1)#
			{#
				print(i); sequences_to_remove = c(sequences_to_remove, as.character(metadata[i,"trait"]))#
			}	else	{#
				nchar1 = nchar(as.character(metadata[i,"district"])); if (is.na(nchar1)) nchar1 = 0#
				nchar2 = nchar(as.character(metadata[i,"location"])); if (is.na(nchar2)) nchar2 = 0#
				nchar3 = nchar(as.character(metadata[i,"lat"])); if (is.na(nchar3)) nchar3 = 0#
				nchar4 = nchar(as.character(metadata[i,"lon"])); if (is.na(nchar4)) nchar4 = 0#
				if ((nchar1+nchar2+nchar3+nchar4) != 0)#
					{#
						sequences = c(sequences, fasta[index], fasta[index+1])#
					}	else	{#
						sequences_to_remove = c(sequences_to_remove, as.character(metadata[i,"trait"]))#
					}#
			}#
	}#
metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]#
write.csv(metadata, "LASV_L_alignment_2.csv", row.names=F, quote=F); write(sequences, "LASV_L_alignment_2.fasta")
mismatches = mismatches_L; metadata  = read.csv("LASV_L_sequences_1.csv", header=T); fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
# mismatches = mismatches_S; metadata = read.csv("LASV_S_sequences_1.csv", header=T); fasta = scan("LASV_S_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
suspicous_pairs_list = list(); suspicous_pairs = c(); nS = list()#
for (m in 0:5)#
	{#
		n = 0#
		if (m == 0) suspicous_pairs = c(suspicous_pairs, paste0(m," NUCLEOTIDE MISMATCH ##############################"), " ")#
		if (m == 1) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHE #############################"), " ")#
		if (m >= 2) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHES ############################"), " ")#
		for (i in 2:dim(mismatches_L)[1])#
			{#
				for (j in 1:(i-1))#
					{#
						if (mismatches_L[i,j] == m)#
							{#
								if (m == 0) suspicous_pairs_list[[length(suspicous_pairs_list)+1]] = c(row.names(mismatches)[i],row.names(mismatches)[j])#
								suspicous_pairs = c(suspicous_pairs, row.names(mismatches)[i]); # cat(paste0(row.names(mismatches)[i],"\n"))#
								suspicous_pairs = c(suspicous_pairs, row.names(mismatches)[j]); # cat(paste0(row.names(mismatches)[j],"\n"))#
								suspicous_pairs = c(suspicous_pairs, " "); n = n + 1; # cat("\n")#
							}#
					}#
			}#
		nS[[m+1]] = n#
	}#
write(suspicous_pairs, "LASV_L_alignment_1.txt"); # print(nS)#
# write(suspicous_pairs, "LASV_S_alignment_1.txt"); # print(nS)#
sequences_to_remove = c(); sequences_to_keep = c()#
for (i in 1:length(suspicous_pairs_list))#
	{#
		seqIDs = c(); datasets = rep(0,length(suspicous_pairs_list[[i]]))#
		for (j in 1:length(suspicous_pairs_list[[i]]))#
			{#
				if (grepl("_NGA-",suspicous_pairs_list[[i]][j]))#
					{#
						seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"NGA-"))[1]); datasets[j] = 1#
					}#
				if (grepl("\\|",suspicous_pairs_list[[i]][j]))#
					{#
						seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"\\|"))[1]); datasets[j] = 2#
					}#
			}#
		precisionScores = rep(0,length(seqIDs))#
		for (j in 1:length(seqIDs))#
			{#
				index = which(grepl(seqIDs[j], metadata[,"trait"])); # print(metadata[index,])#
				if (length(index) == 1)#
					{#
						if (!is.na(metadata[index,"country"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"district"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"location"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"lat"])) precisionScores[j] = precisionScores[j] + 10#
					}	else		{#
						precisionScores[j] = 0; print(seqIDs[j])#
					}#
			}#
		index = NA#
		if (length(unique(datasets)) == 2) index = which(datasets!=1)#
		if (length(unique(datasets)) == 1)#
			{#
				if (length(unique(precisionScores)) == 2) index = which(precisionScores!=max(precisionScores))#
				if (length(unique(precisionScores)) == 1) index = sample(1:2,1)#
			}#
		sequences_to_remove = c(sequences_to_remove, suspicous_pairs_list[[i]][index])#
		sequences_to_keep = c(sequences_to_keep, suspicous_pairs_list[[i]][-index])#
	}#
metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]#
sequences = c(); sequences_to_remove = c()#
for (i in 1:dim(metadata)[1])#
	{#
		seqID = NA#
		if (grepl("_NGA-",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"NGA-"))[1]#
		if (grepl("\\|",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"\\|"))[1]#
		index = which(grepl(seqID ,fasta))#
		if (length(index) != 1)#
			{#
				print(i); sequences_to_remove = c(sequences_to_remove, as.character(metadata[i,"trait"]))#
			}	else	{#
				nchar1 = nchar(as.character(metadata[i,"district"])); if (is.na(nchar1)) nchar1 = 0#
				nchar2 = nchar(as.character(metadata[i,"location"])); if (is.na(nchar2)) nchar2 = 0#
				nchar3 = nchar(as.character(metadata[i,"lat"])); if (is.na(nchar3)) nchar3 = 0#
				nchar4 = nchar(as.character(metadata[i,"lon"])); if (is.na(nchar4)) nchar4 = 0#
				if ((nchar1+nchar2+nchar3+nchar4) != 0)#
					{#
						sequences = c(sequences, fasta[index], fasta[index+1])#
					}	else	{#
						sequences_to_remove = c(sequences_to_remove, as.character(metadata[i,"trait"]))#
					}#
			}#
	}#
metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]#
write.csv(metadata, "LASV_L_alignment_2.csv", row.names=F, quote=F); write(sequences, "LASV_L_alignment_2.fasta")#
# write.csv(metadata, "LASV_S_alignment_2.csv", row.names=F, quote=F); write(sequences, "LASV_S_alignment_2.fasta")
mismatches = mismatches_L; metadata  = read.csv("LASV_L_sequences_1.csv", header=T); fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
# mismatches = mismatches_S; metadata = read.csv("LASV_S_sequences_1.csv", header=T); fasta = scan("LASV_S_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
suspicous_pairs_list = list(); suspicous_pairs = c(); nS = list()#
for (m in 0:5)#
	{#
		n = 0#
		if (m == 0) suspicous_pairs = c(suspicous_pairs, paste0(m," NUCLEOTIDE MISMATCH ##############################"), " ")#
		if (m == 1) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHE #############################"), " ")#
		if (m >= 2) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHES ############################"), " ")#
		for (i in 2:dim(mismatches_L)[1])#
			{#
				for (j in 1:(i-1))#
					{#
						if (mismatches_L[i,j] == m)#
							{#
								if (m == 0) suspicous_pairs_list[[length(suspicous_pairs_list)+1]] = c(row.names(mismatches)[i],row.names(mismatches)[j])#
								suspicous_pairs = c(suspicous_pairs, row.names(mismatches)[i]); # cat(paste0(row.names(mismatches)[i],"\n"))#
								suspicous_pairs = c(suspicous_pairs, row.names(mismatches)[j]); # cat(paste0(row.names(mismatches)[j],"\n"))#
								suspicous_pairs = c(suspicous_pairs, " "); n = n + 1; # cat("\n")#
							}#
					}#
			}#
		nS[[m+1]] = n#
	}#
write(suspicous_pairs, "LASV_L_alignment_1.txt"); # print(nS)#
# write(suspicous_pairs, "LASV_S_alignment_1.txt"); # print(nS)#
sequences_to_remove = c(); sequences_to_keep = c()#
for (i in 1:length(suspicous_pairs_list))#
	{#
		seqIDs = c(); datasets = rep(0,length(suspicous_pairs_list[[i]]))#
		for (j in 1:length(suspicous_pairs_list[[i]]))#
			{#
				if (grepl("_NGA-",suspicous_pairs_list[[i]][j]))#
					{#
						seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"NGA-"))[1]); datasets[j] = 1#
					}#
				if (grepl("\\|",suspicous_pairs_list[[i]][j]))#
					{#
						seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"\\|"))[1]); datasets[j] = 2#
					}#
			}#
		precisionScores = rep(0,length(seqIDs))#
		for (j in 1:length(seqIDs))#
			{#
				index = which(grepl(seqIDs[j], metadata[,"trait"])); # print(metadata[index,])#
				if (length(index) == 1)#
					{#
						if (!is.na(metadata[index,"country"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"district"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"location"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"lat"])) precisionScores[j] = precisionScores[j] + 10#
					}	else		{#
						precisionScores[j] = 0; print(seqIDs[j])#
					}#
			}#
		index = NA#
		if (length(unique(datasets)) == 2) index = which(datasets!=1)#
		if (length(unique(datasets)) == 1)#
			{#
				if (length(unique(precisionScores)) == 2) index = which(precisionScores!=max(precisionScores))#
				if (length(unique(precisionScores)) == 1) index = sample(1:2,1)#
			}#
		sequences_to_remove = c(sequences_to_remove, suspicous_pairs_list[[i]][index])#
		sequences_to_keep = c(sequences_to_keep, suspicous_pairs_list[[i]][-index])#
	}#
metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]#
sequences = c(); sequences_to_remove = c()
i=420
seqID = NA#
		if (grepl("_NGA-",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"NGA-"))[1]#
		if (grepl("\\|",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"\\|"))[1]#
		index = which(grepl(seqID ,fasta))
index
metadata[i,"trait"]
grepl("\\|",as.character(metadata[i,"trait"]))
unlist(strsplit(as.character(metadata[i,"trait"]),"\\|"))[1]
metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]#
write.csv(metadata, "LASV_L_alignment_2.csv", row.names=F, quote=F); write(sequences, "LASV_L_alignment_2.fasta")#
# write.csv(metadata, "LASV_S_alignment_2.csv", row.names=F, quote=F); write(sequences, "LASV_S_alignment_2.fasta")
# mismatches = mismatches_L; metadata  = read.csv("LASV_L_sequences_1.csv", header=T); fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
mismatches = mismatches_S; metadata = read.csv("LASV_S_sequences_1.csv", header=T); fasta = scan("LASV_S_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
suspicous_pairs_list = list(); suspicous_pairs = c(); nS = list()#
for (m in 0:5)#
	{#
		n = 0#
		if (m == 0) suspicous_pairs = c(suspicous_pairs, paste0(m," NUCLEOTIDE MISMATCH ##############################"), " ")#
		if (m == 1) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHE #############################"), " ")#
		if (m >= 2) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHES ############################"), " ")#
		for (i in 2:dim(mismatches_L)[1])#
			{#
				for (j in 1:(i-1))#
					{#
						if (mismatches_L[i,j] == m)#
							{#
								if (m == 0) suspicous_pairs_list[[length(suspicous_pairs_list)+1]] = c(row.names(mismatches)[i],row.names(mismatches)[j])#
								suspicous_pairs = c(suspicous_pairs, row.names(mismatches)[i]); # cat(paste0(row.names(mismatches)[i],"\n"))#
								suspicous_pairs = c(suspicous_pairs, row.names(mismatches)[j]); # cat(paste0(row.names(mismatches)[j],"\n"))#
								suspicous_pairs = c(suspicous_pairs, " "); n = n + 1; # cat("\n")#
							}#
					}#
			}#
		nS[[m+1]] = n#
	}#
# write(suspicous_pairs, "LASV_L_alignment_1.txt"); # print(nS)#
write(suspicous_pairs, "LASV_S_alignment_1.txt"); # print(nS)#
sequences_to_remove = c(); sequences_to_keep = c()#
for (i in 1:length(suspicous_pairs_list))#
	{#
		seqIDs = c(); datasets = rep(0,length(suspicous_pairs_list[[i]]))#
		for (j in 1:length(suspicous_pairs_list[[i]]))#
			{#
				if (grepl("_NGA-",suspicous_pairs_list[[i]][j]))#
					{#
						seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"NGA-"))[1]); datasets[j] = 1#
					}#
				if (grepl("\\|",suspicous_pairs_list[[i]][j]))#
					{#
						seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"\\|"))[1]); datasets[j] = 2#
					}#
			}#
		precisionScores = rep(0,length(seqIDs))#
		for (j in 1:length(seqIDs))#
			{#
				index = which(grepl(seqIDs[j], metadata[,"trait"])); # print(metadata[index,])#
				if (length(index) == 1)#
					{#
						if (!is.na(metadata[index,"country"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"district"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"location"])) precisionScores[j] = precisionScores[j] + 1#
						if (!is.na(metadata[index,"lat"])) precisionScores[j] = precisionScores[j] + 10#
					}	else		{#
						precisionScores[j] = 0; print(seqIDs[j])#
					}#
			}#
		index = NA#
		if (length(unique(datasets)) == 2) index = which(datasets!=1)#
		if (length(unique(datasets)) == 1)#
			{#
				if (length(unique(precisionScores)) == 2) index = which(precisionScores!=max(precisionScores))#
				if (length(unique(precisionScores)) == 1) index = sample(1:2,1)#
			}#
		sequences_to_remove = c(sequences_to_remove, suspicous_pairs_list[[i]][index])#
		sequences_to_keep = c(sequences_to_keep, suspicous_pairs_list[[i]][-index])#
	}#
metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]#
sequences = c(); sequences_to_remove = c()#
for (i in 1:dim(metadata)[1])#
	{#
		seqID = NA#
		if (grepl("_NGA-",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"NGA-"))[1]#
		if (grepl("\\|",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"\\|"))[1]#
		index = which(grepl(seqID ,fasta))#
		if (length(index) != 1)#
			{#
				print(i); sequences_to_remove = c(sequences_to_remove, as.character(metadata[i,"trait"]))#
			}	else	{#
				nchar1 = nchar(as.character(metadata[i,"district"])); if (is.na(nchar1)) nchar1 = 0#
				nchar2 = nchar(as.character(metadata[i,"location"])); if (is.na(nchar2)) nchar2 = 0#
				nchar3 = nchar(as.character(metadata[i,"lat"])); if (is.na(nchar3)) nchar3 = 0#
				nchar4 = nchar(as.character(metadata[i,"lon"])); if (is.na(nchar4)) nchar4 = 0#
				if ((nchar1+nchar2+nchar3+nchar4) != 0)#
					{#
						sequences = c(sequences, fasta[index], fasta[index+1])#
					}	else	{#
						sequences_to_remove = c(sequences_to_remove, as.character(metadata[i,"trait"]))#
					}#
			}#
	}#
metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]#
# write.csv(metadata, "LASV_L_alignment_2.csv", row.names=F, quote=F); write(sequences, "LASV_L_alignment_2.fasta")#
write.csv(metadata, "LASV_S_alignment_2.csv", row.names=F, quote=F); write(sequences, "LASV_S_alignment_2.fasta")
for (i in 1:length(analyses))#
	{#
		segment = unlist(strsplit(analyses[i],"_"))[length(unlist(strsplit(analyses[i],"_")))]#
		metadata = read.csv(paste0("LASV_",segment,"_alignment_2.csv"), header=T)#
		sequences = scan(paste0("LASV_",segment,"_alignment_2.fasta"), what="", sep="\n", quiet=TRUE)#
		indices1a = which(metadata[,"country"]=="NGA"); indices1b = which(metadata[,"country"]!="NGA")#
		indices2a = which(grepl("_NGA_",sequences)); indices2b = which(!grepl("_NGA_",sequences))#
		write.csv(metadata[indices1a,], paste0("LASV_NGA_segment",segment,".csv"), row.names=F, quote=F)#
		write.csv(metadata[indices1b,], paste0("LASV_MRU_segment",segment,".csv"), row.names=F, quote=F)		#
		sequencesNGA = c(); sequencesMRU = c()#
		for (j in 1:length(indices2a))#
			{#
				sequencesNGA = c(sequencesNGA, sequences[indices2a[i]], sequences[indices2a[i]+1])#
			}#
		for (j in 1:length(indices2b))#
			{#
				sequencesMRU = c(sequencesMRU, sequences[indices2b[i]], sequences[indices2b[i]+1])#
			}#
		write(sequencesNGA, paste0("LASV_NGA_segment",segment,".fasta"))#
		write(sequencesMRU, paste0("LASV_MRU_segment",segment,".fasta"))#
	}
library(rgeos)#
library(diagram)#
library(seraphim)#
library(lubridate)#
library(OutbreakTools)#
#
analyses = c("LASV_segment_L", "LASV_segment_S")#
# admins0_NGA = getData("GADM", country="NGA", level=0)#
# admins1_NGA = getData("GADM", country="NGA", level=1)#
# admins2_NGA = getData("GADM", country="NGA", level=2)#
# admins0_SLE = getData("GADM", country="SLE", level=0)#
# admins1_SLE = getData("GADM", country="SLE", level=1)#
# admins2_SLE = getData("GADM", country="SLE", level=2)
segments = c("L","S")
s=1
if (segments[s] == "L") mismatches = mismatches_L; metadata  = read.csv("LASV_L_sequences_1.csv", header=T); fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
		if (segments[s] == "S") mismatches = mismatches_S; metadata = read.csv("LASV_S_sequences_1.csv", header=T); fasta = scan("LASV_S_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
		suspicous_pairs_list = list(); suspicous_pairs = c(); nS = list()#
		for (m in 0:5)#
			{#
				n = 0#
				if (m == 0) suspicous_pairs = c(suspicous_pairs, paste0(m," NUCLEOTIDE MISMATCH ##############################"), " ")#
				if (m == 1) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHE #############################"), " ")#
				if (m >= 2) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHES ############################"), " ")#
				for (i in 2:dim(mismatches_L)[1])#
					{#
						for (j in 1:(i-1))#
							{#
								if (mismatches_L[i,j] == m)#
									{#
										if (m == 0) suspicous_pairs_list[[length(suspicous_pairs_list)+1]] = c(row.names(mismatches)[i],row.names(mismatches)[j])#
										suspicous_pairs = c(suspicous_pairs, row.names(mismatches)[i]); # cat(paste0(row.names(mismatches)[i],"\n"))#
										suspicous_pairs = c(suspicous_pairs, row.names(mismatches)[j]); # cat(paste0(row.names(mismatches)[j],"\n"))#
										suspicous_pairs = c(suspicous_pairs, " "); n = n + 1; # cat("\n")#
									}#
							}#
					}#
				nS[[m+1]] = n#
			}#
		if (segments[s] == "L") write(suspicous_pairs, "LASV_L_alignment_1.txt"); # print(nS)#
		if (segments[s] == "S") write(suspicous_pairs, "LASV_S_alignment_1.txt"); # print(nS)
mismatches_L = read.csv("LASV_L_alignment_1.csv", header=T)#
mismatches_S = read.csv("LASV_S_alignment_1.csv", header=T)
if (segments[s] == "L") mismatches = mismatches_L; metadata  = read.csv("LASV_L_sequences_1.csv", header=T); fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
		if (segments[s] == "S") mismatches = mismatches_S; metadata = read.csv("LASV_S_sequences_1.csv", header=T); fasta = scan("LASV_S_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
		suspicous_pairs_list = list(); suspicous_pairs = c(); nS = list()#
		for (m in 0:5)#
			{#
				n = 0#
				if (m == 0) suspicous_pairs = c(suspicous_pairs, paste0(m," NUCLEOTIDE MISMATCH ##############################"), " ")#
				if (m == 1) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHE #############################"), " ")#
				if (m >= 2) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHES ############################"), " ")#
				for (i in 2:dim(mismatches_L)[1])#
					{#
						for (j in 1:(i-1))#
							{#
								if (mismatches_L[i,j] == m)#
									{#
										if (m == 0) suspicous_pairs_list[[length(suspicous_pairs_list)+1]] = c(row.names(mismatches)[i],row.names(mismatches)[j])#
										suspicous_pairs = c(suspicous_pairs, row.names(mismatches)[i]); # cat(paste0(row.names(mismatches)[i],"\n"))#
										suspicous_pairs = c(suspicous_pairs, row.names(mismatches)[j]); # cat(paste0(row.names(mismatches)[j],"\n"))#
										suspicous_pairs = c(suspicous_pairs, " "); n = n + 1; # cat("\n")#
									}#
							}#
					}#
				nS[[m+1]] = n#
			}#
		if (segments[s] == "L") write(suspicous_pairs, "LASV_L_alignment_1.txt"); # print(nS)#
		if (segments[s] == "S") write(suspicous_pairs, "LASV_S_alignment_1.txt"); # print(nS)
for (i in 1:length(suspicous_pairs_list))#
			{#
				seqIDs = c(); datasets = rep(0,length(suspicous_pairs_list[[i]]))#
				for (j in 1:length(suspicous_pairs_list[[i]]))#
					{#
						if (grepl("_NGA-",suspicous_pairs_list[[i]][j]))#
							{#
								seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"NGA-"))[1]); datasets[j] = 1#
							}#
						if (grepl("\\|",suspicous_pairs_list[[i]][j]))#
							{#
								seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"\\|"))[1]); datasets[j] = 2#
							}#
					}#
				precisionScores = rep(0,length(seqIDs))#
				for (j in 1:length(seqIDs))#
					{#
						index = which(grepl(seqIDs[j], metadata[,"trait"])); # print(metadata[index,])#
						if (length(index) == 1)#
							{#
								if (!is.na(metadata[index,"country"])) precisionScores[j] = precisionScores[j] + 1#
								if (!is.na(metadata[index,"district"])) precisionScores[j] = precisionScores[j] + 1#
								if (!is.na(metadata[index,"location"])) precisionScores[j] = precisionScores[j] + 1#
								if (!is.na(metadata[index,"lat"])) precisionScores[j] = precisionScores[j] + 10#
							}	else		{#
								precisionScores[j] = 0; print(seqIDs[j])#
							}#
					}#
				index = NA#
				if (length(unique(datasets)) == 2) index = which(datasets!=1)#
				if (length(unique(datasets)) == 1)#
					{#
						if (length(unique(precisionScores)) == 2) index = which(precisionScores!=max(precisionScores))#
						if (length(unique(precisionScores)) == 1) index = sample(1:2,1)#
					}#
				sequences_to_remove = c(sequences_to_remove, suspicous_pairs_list[[i]][index])#
				sequences_to_keep = c(sequences_to_keep, suspicous_pairs_list[[i]][-index])#
			}
if (segments[s] == "L") write(suspicous_pairs, "LASV_L_alignment_1.txt"); # print(nS)#
		if (segments[s] == "S") write(suspicous_pairs, "LASV_S_alignment_1.txt"); # print(nS)#
		sequences_to_remove = c(); sequences_to_keep = c()#
		for (i in 1:length(suspicous_pairs_list))#
			{#
				seqIDs = c(); datasets = rep(0,length(suspicous_pairs_list[[i]]))#
				for (j in 1:length(suspicous_pairs_list[[i]]))#
					{#
						if (grepl("_NGA-",suspicous_pairs_list[[i]][j]))#
							{#
								seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"NGA-"))[1]); datasets[j] = 1#
							}#
						if (grepl("\\|",suspicous_pairs_list[[i]][j]))#
							{#
								seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"\\|"))[1]); datasets[j] = 2#
							}#
					}#
				precisionScores = rep(0,length(seqIDs))#
				for (j in 1:length(seqIDs))#
					{#
						index = which(grepl(seqIDs[j], metadata[,"trait"])); # print(metadata[index,])#
						if (length(index) == 1)#
							{#
								if (!is.na(metadata[index,"country"])) precisionScores[j] = precisionScores[j] + 1#
								if (!is.na(metadata[index,"district"])) precisionScores[j] = precisionScores[j] + 1#
								if (!is.na(metadata[index,"location"])) precisionScores[j] = precisionScores[j] + 1#
								if (!is.na(metadata[index,"lat"])) precisionScores[j] = precisionScores[j] + 10#
							}	else		{#
								precisionScores[j] = 0; print(seqIDs[j])#
							}#
					}#
				index = NA#
				if (length(unique(datasets)) == 2) index = which(datasets!=1)#
				if (length(unique(datasets)) == 1)#
					{#
						if (length(unique(precisionScores)) == 2) index = which(precisionScores!=max(precisionScores))#
						if (length(unique(precisionScores)) == 1) index = sample(1:2,1)#
					}#
				sequences_to_remove = c(sequences_to_remove, suspicous_pairs_list[[i]][index])#
				sequences_to_keep = c(sequences_to_keep, suspicous_pairs_list[[i]][-index])#
			}#
		metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]#
		sequences = c(); sequences_to_remove = c()#
		for (i in 1:dim(metadata)[1])#
			{#
				seqID = NA#
				if (grepl("_NGA-",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"NGA-"))[1]#
				if (grepl("\\|",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"\\|"))[1]#
				index = which(grepl(seqID ,fasta))#
				if (length(index) != 1)#
					{#
						print(i); sequences_to_remove = c(sequences_to_remove, as.character(metadata[i,"trait"]))#
					}	else	{#
						nchar1 = nchar(as.character(metadata[i,"district"])); if (is.na(nchar1)) nchar1 = 0#
						nchar2 = nchar(as.character(metadata[i,"location"])); if (is.na(nchar2)) nchar2 = 0#
						nchar3 = nchar(as.character(metadata[i,"lat"])); if (is.na(nchar3)) nchar3 = 0#
						nchar4 = nchar(as.character(metadata[i,"lon"])); if (is.na(nchar4)) nchar4 = 0#
						if ((nchar1+nchar2+nchar3+nchar4) != 0)#
							{#
								sequences = c(sequences, fasta[index], fasta[index+1])#
							}	else	{#
								sequences_to_remove = c(sequences_to_remove, as.character(metadata[i,"trait"]))#
							}#
					}#
			}#
		metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]#
		if (segments[s] == "L") write.csv(metadata, "LASV_L_alignment_2.csv", row.names=F, quote=F); write(sequences, "LASV_L_alignment_2.fasta")#
		if (segments[s] == "S") write.csv(metadata, "LASV_S_alignment_2.csv", row.names=F, quote=F); write(sequences, "LASV_S_alignment_2.fasta")
segments = c("L","S")#
mismatches_L = read.csv("LASV_L_alignment_1.csv", header=T)#
mismatches_S = read.csv("LASV_S_alignment_1.csv", header=T)
s=1
segments[s] == "L"
segments[s] == "S"
if (segments[s] == "L") mismatches = mismatches_L; metadata  = read.csv("LASV_L_sequences_1.csv", header=T); fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
		if (segments[s] == "S") mismatches = mismatches_S; metadata = read.csv("LASV_S_sequences_1.csv", header=T); fasta = scan("LASV_S_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
		suspicous_pairs_list = list(); suspicous_pairs = c(); nS = list()#
		for (m in 0:5)#
			{#
				n = 0#
				if (m == 0) suspicous_pairs = c(suspicous_pairs, paste0(m," NUCLEOTIDE MISMATCH ##############################"), " ")#
				if (m == 1) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHE #############################"), " ")#
				if (m >= 2) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHES ############################"), " ")#
				for (i in 2:dim(mismatches_L)[1])#
					{#
						for (j in 1:(i-1))#
							{#
								if (mismatches_L[i,j] == m)#
									{#
										if (m == 0) suspicous_pairs_list[[length(suspicous_pairs_list)+1]] = c(row.names(mismatches)[i],row.names(mismatches)[j])#
										suspicous_pairs = c(suspicous_pairs, row.names(mismatches)[i]); # cat(paste0(row.names(mismatches)[i],"\n"))#
										suspicous_pairs = c(suspicous_pairs, row.names(mismatches)[j]); # cat(paste0(row.names(mismatches)[j],"\n"))#
										suspicous_pairs = c(suspicous_pairs, " "); n = n + 1; # cat("\n")#
									}#
							}#
					}#
				nS[[m+1]] = n#
			}#
		if (segments[s] == "L") write(suspicous_pairs, "LASV_L_alignment_1.txt"); # print(nS)#
		if (segments[s] == "S") write(suspicous_pairs, "LASV_S_alignment_1.txt"); # print(nS)
if (segments[s] == "L") mismatches = mismatches_L; metadata  = read.csv("LASV_L_sequences_1.csv", header=T); fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
		if (segments[s] == "S") mismatches = mismatches_S; metadata = read.csv("LASV_S_sequences_1.csv", header=T); fasta = scan("LASV_S_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
		suspicous_pairs_list = list(); suspicous_pairs = c(); nS = list()#
		for (m in 0:5)#
			{#
				n = 0#
				if (m == 0) suspicous_pairs = c(suspicous_pairs, paste0(m," NUCLEOTIDE MISMATCH ##############################"), " ")#
				if (m == 1) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHE #############################"), " ")#
				if (m >= 2) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHES ############################"), " ")#
				for (i in 2:dim(mismatches_L)[1])#
					{#
						for (j in 1:(i-1))#
							{#
								if (mismatches_L[i,j] == m)#
									{#
										if (m == 0) suspicous_pairs_list[[length(suspicous_pairs_list)+1]] = c(row.names(mismatches)[i],row.names(mismatches)[j])#
										suspicous_pairs = c(suspicous_pairs, row.names(mismatches)[i]); # cat(paste0(row.names(mismatches)[i],"\n"))#
										suspicous_pairs = c(suspicous_pairs, row.names(mismatches)[j]); # cat(paste0(row.names(mismatches)[j],"\n"))#
										suspicous_pairs = c(suspicous_pairs, " "); n = n + 1; # cat("\n")#
									}#
							}#
					}#
				nS[[m+1]] = n#
			}#
		if (segments[s] == "L") write(suspicous_pairs, "LASV_L_alignment_1.txt"); # print(nS)#
		if (segments[s] == "S") write(suspicous_pairs, "LASV_S_alignment_1.txt"); # print(nS)#
		sequences_to_remove = c(); sequences_to_keep = c()#
		for (i in 1:length(suspicous_pairs_list))#
			{#
				seqIDs = c(); datasets = rep(0,length(suspicous_pairs_list[[i]]))#
				for (j in 1:length(suspicous_pairs_list[[i]]))#
					{#
						if (grepl("_NGA-",suspicous_pairs_list[[i]][j]))#
							{#
								seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"NGA-"))[1]); datasets[j] = 1#
							}#
						if (grepl("\\|",suspicous_pairs_list[[i]][j]))#
							{#
								seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"\\|"))[1]); datasets[j] = 2#
							}#
					}#
				precisionScores = rep(0,length(seqIDs))#
				for (j in 1:length(seqIDs))#
					{#
						index = which(grepl(seqIDs[j], metadata[,"trait"])); # print(metadata[index,])#
						if (length(index) == 1)#
							{#
								if (!is.na(metadata[index,"country"])) precisionScores[j] = precisionScores[j] + 1#
								if (!is.na(metadata[index,"district"])) precisionScores[j] = precisionScores[j] + 1#
								if (!is.na(metadata[index,"location"])) precisionScores[j] = precisionScores[j] + 1#
								if (!is.na(metadata[index,"lat"])) precisionScores[j] = precisionScores[j] + 10#
							}	else		{#
								precisionScores[j] = 0; print(seqIDs[j])#
							}#
					}#
				index = NA#
				if (length(unique(datasets)) == 2) index = which(datasets!=1)#
				if (length(unique(datasets)) == 1)#
					{#
						if (length(unique(precisionScores)) == 2) index = which(precisionScores!=max(precisionScores))#
						if (length(unique(precisionScores)) == 1) index = sample(1:2,1)#
					}#
				sequences_to_remove = c(sequences_to_remove, suspicous_pairs_list[[i]][index])#
				sequences_to_keep = c(sequences_to_keep, suspicous_pairs_list[[i]][-index])#
			}#
		metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]#
		sequences = c(); sequences_to_remove = c()#
		for (i in 1:dim(metadata)[1])#
			{#
				seqID = NA#
				if (grepl("_NGA-",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"NGA-"))[1]#
				if (grepl("\\|",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"\\|"))[1]#
				index = which(grepl(seqID ,fasta))#
				if (length(index) != 1)#
					{#
						print(i); sequences_to_remove = c(sequences_to_remove, as.character(metadata[i,"trait"]))#
					}	else	{#
						nchar1 = nchar(as.character(metadata[i,"district"])); if (is.na(nchar1)) nchar1 = 0#
						nchar2 = nchar(as.character(metadata[i,"location"])); if (is.na(nchar2)) nchar2 = 0#
						nchar3 = nchar(as.character(metadata[i,"lat"])); if (is.na(nchar3)) nchar3 = 0#
						nchar4 = nchar(as.character(metadata[i,"lon"])); if (is.na(nchar4)) nchar4 = 0#
						if ((nchar1+nchar2+nchar3+nchar4) != 0)#
							{#
								sequences = c(sequences, fasta[index], fasta[index+1])#
							}	else	{#
								sequences_to_remove = c(sequences_to_remove, as.character(metadata[i,"trait"]))#
							}#
					}#
			}#
		metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]#
		if (segments[s] == "L") write.csv(metadata, "LASV_L_alignment_2.csv", row.names=F, quote=F); write(sequences, "LASV_L_alignment_2.fasta")#
		if (segments[s] == "S") write.csv(metadata, "LASV_S_alignment_2.csv", row.names=F, quote=F); write(sequences, "LASV_S_alignment_2.fasta")
segments = c("L","S")#
mismatches_L = read.csv("LASV_L_alignment_1.csv", header=T)#
mismatches_S = read.csv("LASV_S_alignment_1.csv", header=T)#
for (s in 1:length(segments))#
	{#
		if (segments[s] == "L")#
			{#
				mismatches = mismatches_L; metadata  = read.csv("LASV_L_sequences_1.csv", header=T)#
				fasta = scan("LASV_L_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
			}#
		if (segments[s] == "S")#
			{#
				mismatches = mismatches_S; metadata = read.csv("LASV_S_sequences_1.csv", header=T)#
				fasta = scan("LASV_S_alignment_1.fasta", what="", sep="\n", quiet=TRUE)#
			}#
		suspicous_pairs_list = list(); suspicous_pairs = c(); nS = list()#
		for (m in 0:5)#
			{#
				n = 0#
				if (m == 0) suspicous_pairs = c(suspicous_pairs, paste0(m," NUCLEOTIDE MISMATCH ##############################"), " ")#
				if (m == 1) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHE #############################"), " ")#
				if (m >= 2) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHES ############################"), " ")#
				for (i in 2:dim(mismatches_L)[1])#
					{#
						for (j in 1:(i-1))#
							{#
								if (mismatches_L[i,j] == m)#
									{#
										if (m == 0) suspicous_pairs_list[[length(suspicous_pairs_list)+1]] = c(row.names(mismatches)[i],row.names(mismatches)[j])#
										suspicous_pairs = c(suspicous_pairs, row.names(mismatches)[i]); # cat(paste0(row.names(mismatches)[i],"\n"))#
										suspicous_pairs = c(suspicous_pairs, row.names(mismatches)[j]); # cat(paste0(row.names(mismatches)[j],"\n"))#
										suspicous_pairs = c(suspicous_pairs, " "); n = n + 1; # cat("\n")#
									}#
							}#
					}#
				nS[[m+1]] = n#
			}#
		if (segments[s] == "L") write(suspicous_pairs, "LASV_L_alignment_1.txt")#
		if (segments[s] == "S") write(suspicous_pairs, "LASV_S_alignment_1.txt")#
		sequences_to_remove = c(); sequences_to_keep = c()#
		for (i in 1:length(suspicous_pairs_list))#
			{#
				seqIDs = c(); datasets = rep(0,length(suspicous_pairs_list[[i]]))#
				for (j in 1:length(suspicous_pairs_list[[i]]))#
					{#
						if (grepl("_NGA-",suspicous_pairs_list[[i]][j]))#
							{#
								seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"NGA-"))[1]); datasets[j] = 1#
							}#
						if (grepl("\\|",suspicous_pairs_list[[i]][j]))#
							{#
								seqIDs = c(seqIDs, unlist(strsplit(suspicous_pairs_list[[i]][j],"\\|"))[1]); datasets[j] = 2#
							}#
					}#
				precisionScores = rep(0,length(seqIDs))#
				for (j in 1:length(seqIDs))#
					{#
						index = which(grepl(seqIDs[j], metadata[,"trait"])); # print(metadata[index,])#
						if (length(index) == 1)#
							{#
								if (!is.na(metadata[index,"country"])) precisionScores[j] = precisionScores[j] + 1#
								if (!is.na(metadata[index,"district"])) precisionScores[j] = precisionScores[j] + 1#
								if (!is.na(metadata[index,"location"])) precisionScores[j] = precisionScores[j] + 1#
								if (!is.na(metadata[index,"lat"])) precisionScores[j] = precisionScores[j] + 10#
							}	else		{#
								precisionScores[j] = 0; print(seqIDs[j])#
							}#
					}#
				index = NA#
				if (length(unique(datasets)) == 2) index = which(datasets!=1)#
				if (length(unique(datasets)) == 1)#
					{#
						if (length(unique(precisionScores)) == 2) index = which(precisionScores!=max(precisionScores))#
						if (length(unique(precisionScores)) == 1) index = sample(1:2,1)#
					}#
				sequences_to_remove = c(sequences_to_remove, suspicous_pairs_list[[i]][index])#
				sequences_to_keep = c(sequences_to_keep, suspicous_pairs_list[[i]][-index])#
			}#
		metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]#
		sequences = c(); sequences_to_remove = c()#
		for (i in 1:dim(metadata)[1])#
			{#
				seqID = NA#
				if (grepl("_NGA-",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"NGA-"))[1]#
				if (grepl("\\|",as.character(metadata[i,"trait"]))) seqID = unlist(strsplit(as.character(metadata[i,"trait"]),"\\|"))[1]#
				index = which(grepl(seqID ,fasta))#
				if (length(index) != 1)#
					{#
						print(i); sequences_to_remove = c(sequences_to_remove, as.character(metadata[i,"trait"]))#
					}	else	{#
						nchar1 = nchar(as.character(metadata[i,"district"])); if (is.na(nchar1)) nchar1 = 0#
						nchar2 = nchar(as.character(metadata[i,"location"])); if (is.na(nchar2)) nchar2 = 0#
						nchar3 = nchar(as.character(metadata[i,"lat"])); if (is.na(nchar3)) nchar3 = 0#
						nchar4 = nchar(as.character(metadata[i,"lon"])); if (is.na(nchar4)) nchar4 = 0#
						if ((nchar1+nchar2+nchar3+nchar4) != 0)#
							{#
								sequences = c(sequences, fasta[index], fasta[index+1])#
							}	else	{#
								sequences_to_remove = c(sequences_to_remove, as.character(metadata[i,"trait"]))#
							}#
					}#
			}#
		metadata = metadata[which(!metadata[,"trait"]%in%sequences_to_remove),]#
		if (segments[s] == "L") #
			{#
				write.csv(metadata, "LASV_L_alignment_2.csv", row.names=F, quote=F)#
				write(sequences, "LASV_L_alignment_2.fasta")#
			}#
		if (segments[s] == "S")#
			{#
				write.csv(metadata, "LASV_S_alignment_2.csv", row.names=F, quote=F)#
				write(sequences, "LASV_S_alignment_2.fasta")#
			}#
	}
i=1
segment = unlist(strsplit(analyses[i],"_"))[length(unlist(strsplit(analyses[i],"_")))]
metadata = read.csv(paste0("LASV_",segment,"_alignment_2.csv"), header=T)
sequences = scan(paste0("LASV_",segment,"_alignment_2.fasta"), what="", sep="\n", quiet=TRUE)
indices1a = which(metadata[,"country"]=="NGA"); indices1b = which(metadata[,"country"]!="NGA")
segment = unlist(strsplit(analyses[i],"_"))[length(unlist(strsplit(analyses[i],"_")))]#
		metadata = read.csv(paste0("LASV_",segment,"_alignment_2.csv"), header=T)#
		sequences = scan(paste0("LASV_",segment,"_alignment_2.fasta"), what="", sep="\n", quiet=TRUE)#
		indices1a = which(metadata[,"country"]=="NGA"); indices1b = which(metadata[,"country"]!="NGA")#
		indices2a = which((grepl("NGA",sequences)|grepl("Nigeria",sequences))&grepl(">",sequences))#
		indices2b = which((!grepl("NGA",sequences))(!grepl("Nigeria",sequences))&grepl(">",sequences))#
		write.csv(metadata[indices1a,], paste0("LASV_NGA_segment",segment,".csv"), row.names=F, quote=F)#
		write.csv(metadata[indices1b,], paste0("LASV_MRU_segment",segment,".csv"), row.names=F, quote=F)
indices2b = which((!grepl("NGA",sequences))&(!grepl("Nigeria",sequences))&grepl(">",sequences))
segment = unlist(strsplit(analyses[i],"_"))[length(unlist(strsplit(analyses[i],"_")))]#
		metadata = read.csv(paste0("LASV_",segment,"_alignment_2.csv"), header=T)#
		sequences = scan(paste0("LASV_",segment,"_alignment_2.fasta"), what="", sep="\n", quiet=TRUE)#
		indices1a = which(metadata[,"country"]=="NGA"); indices1b = which(metadata[,"country"]!="NGA")#
		indices2a = which((grepl("NGA",sequences)|grepl("Nigeria",sequences))&grepl(">",sequences))#
		indices2b = which((!grepl("NGA",sequences))&(!grepl("Nigeria",sequences))&grepl(">",sequences))#
		write.csv(metadata[indices1a,], paste0("LASV_NGA_segment",segment,".csv"), row.names=F, quote=F)#
		write.csv(metadata[indices1b,], paste0("LASV_MRU_segment",segment,".csv"), row.names=F, quote=F)
sequencesNGA = c(); sequencesMRU = c()#
		for (j in 1:length(indices2a))#
			{#
				sequencesNGA = c(sequencesNGA, sequences[indices2a[i]], sequences[indices2a[i]+1])#
			}#
		for (j in 1:length(indices2b))#
			{#
				sequencesMRU = c(sequencesMRU, sequences[indices2b[i]], sequences[indices2b[i]+1])#
			}#
		write(sequencesNGA, paste0("LASV_NGA_segment",segment,".fasta"))#
		write(sequencesMRU, paste0("LASV_MRU_segment",segment,".fasta"))
for (i in 1:length(analyses))#
	{#
		segment = unlist(strsplit(analyses[i],"_"))[length(unlist(strsplit(analyses[i],"_")))]#
		metadata = read.csv(paste0("LASV_",segment,"_alignment_2.csv"), header=T)#
		sequences = scan(paste0("LASV_",segment,"_alignment_2.fasta"), what="", sep="\n", quiet=TRUE)#
		indices1a = which(metadata[,"country"]=="NGA"); indices1b = which(metadata[,"country"]!="NGA")#
		indices2a = which((grepl("NGA",sequences)|grepl("Nigeria",sequences))&grepl(">",sequences))#
		indices2b = which((!grepl("NGA",sequences))&(!grepl("Nigeria",sequences))&grepl(">",sequences))#
		write.csv(metadata[indices1a,], paste0("LASV_NGA_segment",segment,".csv"), row.names=F, quote=F)#
		write.csv(metadata[indices1b,], paste0("LASV_MRU_segment",segment,".csv"), row.names=F, quote=F)		#
		sequencesNGA = c(); sequencesMRU = c()#
		for (j in 1:length(indices2a))#
			{#
				sequencesNGA = c(sequencesNGA, sequences[indices2a[i]], sequences[indices2a[i]+1])#
			}#
		for (j in 1:length(indices2b))#
			{#
				sequencesMRU = c(sequencesMRU, sequences[indices2b[i]], sequences[indices2b[i]+1])#
			}#
		write(sequencesNGA, paste0("LASV_NGA_segment",segment,".fasta"))#
		write(sequencesMRU, paste0("LASV_MRU_segment",segment,".fasta"))#
	}
for (i in 1:length(analyses))#
	{#
		segment = unlist(strsplit(analyses[i],"_"))[length(unlist(strsplit(analyses[i],"_")))]#
		metadata = read.csv(paste0("LASV_",segment,"_alignment_2.csv"), header=T)#
		sequences = scan(paste0("LASV_",segment,"_alignment_2.fasta"), what="", sep="\n", quiet=TRUE)#
		indices1a = which(metadata[,"country"]=="NGA"); indices1b = which(metadata[,"country"]!="NGA")#
		indices2a = which((grepl("NGA",sequences)|grepl("Nigeria",sequences))&grepl(">",sequences))#
		indices2b = which((!grepl("NGA",sequences))&(!grepl("Nigeria",sequences))&grepl(">",sequences))#
		write.csv(metadata[indices1a,], paste0("LASV_NGA_segment",segment,".csv"), row.names=F, quote=F)#
		write.csv(metadata[indices1b,], paste0("LASV_MRU_segment",segment,".csv"), row.names=F, quote=F)		#
		sequencesNGA = c(); sequencesMRU = c()#
		for (j in 1:length(indices2a))#
			{#
				sequencesNGA = c(sequencesNGA, sequences[indices2a[j]], sequences[indices2a[j]+1])#
			}#
		for (j in 1:length(indices2b))#
			{#
				sequencesMRU = c(sequencesMRU, sequences[indices2b[j]], sequences[indices2b[j]+1])#
			}#
		write(sequencesNGA, paste0("LASV_NGA_segment",segment,".fasta"))#
		write(sequencesMRU, paste0("LASV_MRU_segment",segment,".fasta"))#
	}
library(rgeos)#
library(diagram)#
library(seraphim)#
library(lubridate)#
library(OutbreakTools)#
#
analyses = c("LASV_segment_L", "LASV_segment_S")
admins2_NGA = getData("GADM", country="NGA", level=2)
admins2_NGA
admins2_NGA@data
admins2_NGA@data$NAME_2
admins2_NGA@data$NAME_2[order(admins2_NGA@data$NAME_2)]
library(rgeos)#
library(diagram)#
library(seraphim)#
library(lubridate)#
library(OutbreakTools)#
#
analyses = c("LASV_segment_L", "LASV_segment_S")
admins2_NGA = getData("GADM", country="NGA", level=2)
admins2_NGA@data$NAME_2[order(admins2_NGA@data$NAME_2)]
admins2_SLE = getData("GADM", country="SLE", level=2)
admins0_SLE = getData("GADM", country="SLE", level=0)#
admins1_SLE = getData("GADM", country="SLE", level=1)#
admins2_SLE = getData("GADM", country="SLE", level=2)#
admins0_NGA = getData("GADM", country="NGA", level=0)#
admins1_NGA = getData("GADM", country="NGA", level=1)#
admins2_NGA = getData("GADM", country="NGA", level=2)
admins1_SLE@data$NAME_1
admins2_SLE@data$NAME_2
admins3_SLE = getData("GADM", country="SLE", level=3)
admins3_SLE@data$NAME_3[order(admins3_SLE@data$NAME_3)]
library(lubridate)
library(lubridate)
library(seraphim)
library(raster)
segments = c("L","S"); test = decimal_date(ymd("1986-01-26"))
metadata = read.csv("Original_sequence_files/LASV_all_metadata.csv", head=T, colClasses="character")
metadata = read.csv("Original_sequence_files/LASV_all_the_metadata.csv", head=T, colClasses="character")
i=1
fasta = scan(paste0("Original_sequence_files/LASV_",segments[i],"_alignment_RK.fasta"), what="", sep="\n", quiet=T)
colNames = c(paste0("segment_",segments[i]),paste0("accession_",segments[i]),"country","admin1","location","latitude","longitude")
colNames
tab1 = metadata[,colNames]; tab1 = tab1[which(tab1[,paste0("segment_",segments[i])]!=""),]
head(metadata)
tab1 = metadata[,colNames]; tab1 = tab1[which(tab1[,paste0("segment_",segments[i])]!=""),]
sequenceIDs = gsub(">","",fasta[which(grepl(">",fasta))])
sequenceIDs
dim(tab1)
tab1 = tab1[which(tab1[,paste0("accession_",segments[i])]%in%sequenceIDs),]
dim(tab1)
sequenceIDs[which(sequenceIDs%in%tab1[,paste0("accession_",segments[i])])]
sequenceIDs[which(!sequenceIDs%in%tab1[,paste0("accession_",segments[i])])]
i=2
fasta = scan(paste0("Original_sequence_files/LASV_",segments[i],"_alignment_RK.fasta"), what="", sep="\n", quiet=T)#
		colNames = c(paste0("segment_",segments[i]),paste0("accession_",segments[i]),"country","admin1","location","latitude","longitude")#
		tab1 = metadata[,colNames]; tab1 = tab1[which(tab1[,paste0("segment_",segments[i])]!=""),]#
		sequenceIDs = gsub(">","",fasta[which(grepl(">",fasta))])#
		sequenceIDs[which(!sequenceIDs%in%tab1[,paste0("accession_",segments[i])])]
fasta = scan(paste0("Original_sequence_files/LASV_",segments[i],"_alignment_RK.fasta"), what="", sep="\n", quiet=T)
colNames = c(paste0("segment_",segments[i]),paste0("accession_",segments[i]),"country","admin1","location","latitude","longitude")
tab1 = metadata[,colNames]; tab1 = tab1[which(tab1[,paste0("segment_",segments[i])]!=""),]
sequenceIDs = gsub(">","",fasta[which(grepl(">",fasta))])
sequenceIDs
sequenceIDs[which(!sequenceIDs%in%tab1[,paste0("accession_",segments[i])])]
length(sequenceIDs[which(sequenceIDs%in%tab1[,paste0("accession_",segments[i])])])
cat(sequenceIDs[which(sequenceIDs%in%tab1[,paste0("accession_",segments[i])])])
cat(sequenceIDs[which(sequenceIDs%in%tab1[,paste0("accession_",segments[i])])],sep="\n")
library(lubridate)#
#
segments = c("L","S"); test = decimal_date(ymd("1986-01-26"))#
metadata = read.csv("Original_sequence_files/LASV_all_the_metadata.csv", head=T, colClasses="character")
i=1
fasta = scan(paste0("Original_sequence_files/LASV_",segments[i],"_alignment_SD.fasta"), what="", sep="\n", quiet=T)#
		colNames = c(paste0("segment_",segments[i]),paste0("accession_",segments[i]),"country","admin1","location","latitude","longitude")#
		tab1 = metadata[,colNames]; tab1 = tab1[which(tab1[,paste0("segment_",segments[i])]!=""),]#
		sequenceIDs = gsub(">","",fasta[which(grepl(">",fasta))])#
		if (length(sequenceIDs[which(sequenceIDs%in%tab1[,paste0("accession_",segments[i])])]) > 0)#
			{#
				cat(sequenceIDs[which!sequenceIDs%in%tab1[,paste0("accession_",segments[i])])],sep="\n")#
			}
cat(sequenceIDs[which(!sequenceIDs%in%tab1[,paste0("accession_",segments[i])])],sep="\n")
fasta = scan(paste0("Original_sequence_files/LASV_",segments[i],"_alignment_SD.fasta"), what="", sep="\n", quiet=T)#
		colNames = c(paste0("segment_",segments[i]),paste0("accession_",segments[i]),"country","admin1","location","latitude","longitude")#
		tab1 = metadata[,colNames]; tab1 = tab1[which(tab1[,paste0("segment_",segments[i])]!=""),]#
		sequenceIDs = gsub(">","",fasta[which(grepl(">",fasta))])#
		if (length(sequenceIDs[which(sequenceIDs%in%tab1[,paste0("accession_",segments[i])])]) > 0)#
			{#
				cat(sequenceIDs[which(!sequenceIDs%in%tab1[,paste0("accession_",segments[i])])],sep="\n")#
			}
tab1 = tab1[which(tab1[,paste0("accession_",segments[i])]%in%sequenceIDs),]
row.names(tab1) = tab1[,paste0("accession_",segments[i])]; tab1 = tab1[sequenceIDs,]#
		write.csv(tab1, paste0("LASV_",segments[i],"_alignment_1.csv"), quote=F, row.names=F)
fasta = scan(paste0("Original_sequence_files/LASV_",segments[i],"_alignment_SD.fasta"), what="", sep="\n", quiet=T)#
		colNames = c(paste0("segment_",segments[i]),paste0("accession_",segments[i]),"country","admin1","location","latitude","longitude")#
		tab1 = metadata[,colNames]; tab1 = tab1[which(tab1[,paste0("segment_",segments[i])]!=""),]#
		sequenceIDs = gsub(">","",fasta[which(grepl(">",fasta))])#
		if (length(sequenceIDs[which(sequenceIDs%in%tab1[,paste0("accession_",segments[i])])]) > 0)#
			{#
				cat(sequenceIDs[which(!sequenceIDs%in%tab1[,paste0("accession_",segments[i])])],sep="\n")#
			}#
		tab1 = tab1[which(tab1[,paste0("accession_",segments[i])]%in%sequenceIDs),]#
		row.names(tab1) = tab1[,paste0("accession_",segments[i])]; tab1 = tab1[sequenceIDs,]#
		write.csv(tab1, paste0("LASV_",segments[i],"_alignment_1.csv"), quote=F, row.names=F)#
		for (j in 1:length(fasta))#
			{#
				if (grepl(">",fasta[j]))#
					{#
						seqID = gsub(">","",fasta[j])#
						index = which(tab1[,paste0("accession_",segments[i])]==seqID)#
						if (length(index) != 1) print(c(i,j)) #
						fasta[j] = paste0(">",tab1[index,paste0("segment_",segments[i])])#
					}#
			}#
		write(fasta, paste0("LASV_",segments[i],"_alignment_1.fasta"))
library(lubridate)#
#
segments = c("L","S"); test = decimal_date(ymd("1986-01-26"))#
metadata = read.csv("Original_sequence_files/LASV_all_the_metadata.csv", head=T, colClasses="character")#
#
for (i in 1:length(segments))#
	{#
		fasta = scan(paste0("Original_sequence_files/LASV_",segments[i],"_alignment_SD.fasta"), what="", sep="\n", quiet=T)#
		colNames = c(paste0("segment_",segments[i]),paste0("accession_",segments[i]),"country","admin1","location","latitude","longitude")#
		tab1 = metadata[,colNames]; tab1 = tab1[which(tab1[,paste0("segment_",segments[i])]!=""),]#
		sequenceIDs = gsub(">","",fasta[which(grepl(">",fasta))])#
		if (length(sequenceIDs[which(sequenceIDs%in%tab1[,paste0("accession_",segments[i])])]) > 0)#
			{#
				cat(sequenceIDs[which(!sequenceIDs%in%tab1[,paste0("accession_",segments[i])])],sep="\n")#
			}#
		tab1 = tab1[which(tab1[,paste0("accession_",segments[i])]%in%sequenceIDs),]#
		row.names(tab1) = tab1[,paste0("accession_",segments[i])]; tab1 = tab1[sequenceIDs,]#
		write.csv(tab1, paste0("LASV_",segments[i],"_alignment_1.csv"), quote=F, row.names=F)#
		for (j in 1:length(fasta))#
			{#
				if (grepl(">",fasta[j]))#
					{#
						seqID = gsub(">","",fasta[j])#
						index = which(tab1[,paste0("accession_",segments[i])]==seqID)#
						if (length(index) != 1) print(c(i,j)) #
						fasta[j] = paste0(">",tab1[index,paste0("segment_",segments[i])])#
					}#
			}#
		write(fasta, paste0("LASV_",segments[i],"_alignment_1.fasta"))#
	}
mismatchesMatrix = function(sequences)#
	{#
		mmd = matrix(nrow=length(sequences), ncol=length(sequences))#
		for (i in 1:length(sequences))#
			{#
				for (j in 1:i)#
					{#
						if (i == j)#
							{#
								mmd[j,i] = 0#
							}	else	{#
								seq1 = unlist(strsplit(sequences[j],""))#
								seq2 = unlist(strsplit(sequences[i],""))#
								seq2 = seq2[which((seq1=="A")|(seq1=="C")|(seq1=="G")|(seq1=="T")|(seq1=="a")|(seq1=="c")|(seq1=="g")|(seq1=="t"))]#
								seq1 = seq1[which((seq1=="A")|(seq1=="C")|(seq1=="G")|(seq1=="T")|(seq1=="a")|(seq1=="c")|(seq1=="g")|(seq1=="t"))]#
								seq1 = seq1[which((seq2=="A")|(seq2=="C")|(seq2=="G")|(seq2=="T")|(seq2=="a")|(seq2=="c")|(seq2=="g")|(seq2=="t"))]#
								seq2 = seq2[which((seq2=="A")|(seq2=="C")|(seq2=="G")|(seq2=="T")|(seq2=="a")|(seq2=="c")|(seq2=="g")|(seq2=="t"))]#
								if (length(seq1) > 0)#
									{#
										mm = sum(seq1!=seq2)#
										mmd[j,i] = mm; mmd[i,j] = mm#
									}	else	{#
										mmd[j,i] = NA; mmd[i,j] = NA#
									}#
							}#
					}#
			}#
		return(mmd)#
	}#
for (i in 1:length(segments))#
	{#
		fasta = scan(paste0("LASV_",segments[i],"_alignment_1.fasta"), what="", sep="\n", quiet=T)#
		seqIDs = fasta[which(grepl(">",fasta))]; sequences = fasta[which(!grepl(">",fasta))]#
		mismatches = mismatchesMatrix(sequences); row.names(mismatches) = gsub(">","",seqIDs)#
		write.csv(mismatches, paste0("LASV_",segments[i],"_mismatches.csv"), quote=F)#
	}#
mismatches_L = read.csv("LASV_L_mismatches.csv", header=T)#
mismatches_S = read.csv("LASV_S_mismatches.csv", header=T)#
pdf("Mismatch_distributions_NEW.pdf", width=8, height=4); datasets = c(); # dev.new(width=8, height=4)#
par(mfrow=c(1,2), mgp=c(1,0.35,0), oma=c(1,0.5,1,2), mar=c(2.0,3,0,0))#
hist(mismatches_L[lower.tri(mismatches_L)], breaks=1000, col="gray50", border=NA, axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.0,0), lwd=0.2, tck=-0.013, col.axis="gray30")#
axis(side=2, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.25,0), lwd=0.2, tck=-0.014, col.axis="gray30")#
title(xlab="mismatches", cex.lab=0.7, mgp=c(0.8,0,0), col.lab="gray30")#
title(ylab="frequency", cex.lab=0.7, mgp=c(1.2,0,0), col.lab="gray30")#
title(main="Alignment for L segment", cex.main=0.7, col.main="gray30", line=-1.7)#
hist(mismatches_S[lower.tri(mismatches_S)], breaks=1000, col="gray50", border=NA, axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.0,0), lwd=0.2, tck=-0.013, col.axis="gray30")#
axis(side=2, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.25,0), lwd=0.2, tck=-0.014, col.axis="gray30")#
title(xlab="mismatches", cex.lab=0.7, mgp=c(0.8,0,0), col.lab="gray30")#
title(ylab="frequency", cex.lab=0.7, mgp=c(1.2,0,0), col.lab="gray30")#
title(main="Alignment for S segment", cex.main=0.7, col.main="gray30", line=-1.7)#
dev.off(); # dev.copy2pdf(file=paste("Mismatch_distributions.pdf",sep=""))
mismatches_L = read.csv("LASV_L_mismatches.csv", header=T)#
mismatches_S = read.csv("LASV_S_mismatches.csv", header=T)
pdf("Mismatch_distributions_NEW.pdf", width=8, height=4); datasets = c(); # dev.new(width=8, height=4)#
par(mfrow=c(1,2), mgp=c(1,0.35,0), oma=c(1,0.5,1,2), mar=c(2.0,3,0,0))#
hist(mismatches_L[lower.tri(mismatches_L)], breaks=1000, col="gray50", border=NA, axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.0,0), lwd=0.2, tck=-0.013, col.axis="gray30")#
axis(side=2, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.25,0), lwd=0.2, tck=-0.014, col.axis="gray30")#
title(xlab="mismatches", cex.lab=0.7, mgp=c(0.8,0,0), col.lab="gray30")#
title(ylab="frequency", cex.lab=0.7, mgp=c(1.2,0,0), col.lab="gray30")#
title(main="Alignment for L segment", cex.main=0.7, col.main="gray30", line=-1.7)#
hist(mismatches_S[lower.tri(mismatches_S)], breaks=1000, col="gray50", border=NA, axes=F, ann=F)#
axis(side=1, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.0,0), lwd=0.2, tck=-0.013, col.axis="gray30")#
axis(side=2, lwd.tick=0.2, cex.axis=0.6, mgp=c(0,0.25,0), lwd=0.2, tck=-0.014, col.axis="gray30")#
title(xlab="mismatches", cex.lab=0.7, mgp=c(0.8,0,0), col.lab="gray30")#
title(ylab="frequency", cex.lab=0.7, mgp=c(1.2,0,0), col.lab="gray30")#
title(main="Alignment for S segment", cex.main=0.7, col.main="gray30", line=-1.7)#
dev.off(); # dev.copy2pdf(file=paste("Mismatch_distributions.pdf",sep=""))
s=1
fasta = scan(paste0("LASV_",segments[s],"_alignment_1.fasta"), what="", sep="\n", quiet=T)#
		tab = read.csv(paste0("LASV_",segments[s],"_alignment_1.csv"), header=T)#
		remainingSuspiciousPairs = TRUE; N = 0
seqIDs = fasta[which(grepl(">",fasta))]; sequences = fasta[which(!grepl(">",fasta))]#
				mismatches = mismatchesMatrix(sequences); row.names(mismatches) = gsub(">","",seqIDs)#
				suspicous_pairs_list = list(); suspicous_pairs = c(); nS = list(); N = N+1#
				for (m in 0:5)#
					{#
						n = 0#
						if (m == 0) suspicous_pairs = c(suspicous_pairs, paste0(m," NUCLEOTIDE MISMATCH ##############################"), " ")#
						if (m == 1) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHE #############################"), " ")#
						if (m >= 2) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHES ############################"), " ")#
						for (i in 2:dim(mismatches)[1])#
							{#
								for (j in 1:(i-1))#
									{#
										if ((!is.na(mismatches[i,j]))&&(mismatches[i,j] == m))#
											{#
												if (m == 0) suspicous_pairs_list[[length(suspicous_pairs_list)+1]] = c(row.names(mismatches)[i],row.names(mismatches)[j])#
												if (m == 1) suspicous_pairs_list[[length(suspicous_pairs_list)+1]] = c(row.names(mismatches)[i],row.names(mismatches)[j])#
						suspicous_pairs = c(suspicous_pairs, paste(row.names(mismatches)[i],as.character(tab[which(tab[,1]==row.names(mismatches)[i]),"location"]),sep=" - "))#
						suspicous_pairs = c(suspicous_pairs, paste(row.names(mismatches)[j],as.character(tab[which(tab[,1]==row.names(mismatches)[j]),"location"]),sep=" - "))#
												suspicous_pairs = c(suspicous_pairs, " "); n = n + 1; # cat("\n")#
											}#
									}#
							}#
						nS[[m+1]] = n#
					}#
				if (N == 1) write(suspicous_pairs, paste0("LASV_",segments[s],"_alignment_1.txt"))
fasta = scan(paste0("LASV_",segments[s],"_alignment_1.fasta"), what="", sep="\n", quiet=T)#
		tab = read.csv(paste0("LASV_",segments[s],"_alignment_1.csv"), header=T)#
		remainingSuspiciousPairs = TRUE; N = 0
s
seqIDs = fasta[which(grepl(">",fasta))]; sequences = fasta[which(!grepl(">",fasta))]#
				mismatches = mismatchesMatrix(sequences); row.names(mismatches) = gsub(">","",seqIDs)#
				suspicous_pairs_list = list(); suspicous_pairs = c(); nS = list(); N = N+1#
				for (m in 0:5)#
					{#
						n = 0#
						if (m == 0) suspicous_pairs = c(suspicous_pairs, paste0(m," NUCLEOTIDE MISMATCH ##############################"), " ")#
						if (m == 1) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHE #############################"), " ")#
						if (m >= 2) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHES ############################"), " ")#
						for (i in 2:dim(mismatches)[1])#
							{#
								for (j in 1:(i-1))#
									{#
										if ((!is.na(mismatches[i,j]))&&(mismatches[i,j] == m))#
											{#
												if (m <= 5) suspicous_pairs_list[[length(suspicous_pairs_list)+1]] = c(row.names(mismatches)[i],row.names(mismatches)[j])#
						suspicous_pairs = c(suspicous_pairs, paste(row.names(mismatches)[i],as.character(tab[which(tab[,1]==row.names(mismatches)[i]),"location"]),sep=" - "))#
						suspicous_pairs = c(suspicous_pairs, paste(row.names(mismatches)[j],as.character(tab[which(tab[,1]==row.names(mismatches)[j]),"location"]),sep=" - "))#
												suspicous_pairs = c(suspicous_pairs, " "); n = n + 1; # cat("\n")#
											}#
									}#
							}#
						nS[[m+1]] = n#
					}#
				if (N == 1) write(suspicous_pairs, paste0("LASV_",segments[s],"_alignment_1.txt"))
remainingSuspiciousPairs
length(suspicous_pairs_list)
sequences_to_remove = c(); sequences_to_keep = c()#
						for (i in 1:length(suspicous_pairs_list))#
							{#
								seqIDs = c(); index = NA#
								if (sum(grepl("_NGA-",suspicous_pairs_list[[i]])) == 1) # 1 sequence from the "Science" data set#
									{#
										index = which(grepl("_NGA-",suspicous_pairs_list[[i]]))#
									}#
								if (sum(grepl("_NGA-",suspicous_pairs_list[[i]])) == 2) # 2 sequences from the "Science" data set#
									{#
										date1 = unlist(strsplit(suspicous_pairs_list[[i]][1],"_")); date1 = decimal_date(ymd(date1[length(date1)]))#
										date2 = unlist(strsplit(suspicous_pairs_list[[i]][2],"_")); date2 = decimal_date(ymd(date2[length(date2)]))#
										if (date1 == date2)#
											{#
												accession1 = unlist(strsplit(suspicous_pairs_list[[i]][1],"\\|"))[1]#
												accession2 = unlist(strsplit(suspicous_pairs_list[[i]][2],"\\|"))[1]#
												accessions = c(accession1, accession2); accessions = accessions[order(accessions)]#
												if (accession1 == accessions[1]) index = 1#
												if (accession2 == accessions[1]) index = 2#
											}	#
										if (date1 < date2) index = 1#
										if (date2 < date1) index = 2#
									}#
								if (sum(grepl("_NGA-",suspicous_pairs_list[[i]])) == 0) # no sequence from the "Science" data set#
									{#
										accession1 = unlist(strsplit(suspicous_pairs_list[[i]][1],"\\|"))[1]#
										accession2 = unlist(strsplit(suspicous_pairs_list[[i]][2],"\\|"))[1]#
										accessions = c(accession1, accession2); accessions = accessions[order(accessions)]#
										if (accession1 == accessions[1]) index = 1#
										if (accession2 == accessions[1]) index = 2#
									}#
								if (is.na(index)) print(i)#
								sequences_to_remove = c(sequences_to_remove, suspicous_pairs_list[[i]][-index])#
								sequences_to_keep = c(sequences_to_keep, suspicous_pairs_list[[i]][index])#
							}
buffer = c()#
						for (i in 1:length(fasta))#
							{#
								if (grepl(">",fasta[i]))#
									{#
										seqID = gsub(">","",fasta[i])#
										if (!seqID%in%sequences_to_remove)#
											{#
												buffer = c(buffer,fasta[i],fasta[i+1])#
											}#
									}	#
							}#
						fasta = buffer#
						tab = tab[which(!tab[,1]%in%sequences_to_remove),]
seqIDs = fasta[which(grepl(">",fasta))]; sequences = fasta[which(!grepl(">",fasta))]#
				mismatches = mismatchesMatrix(sequences); row.names(mismatches) = gsub(">","",seqIDs)#
				suspicous_pairs_list = list(); suspicous_pairs = c(); nS = list(); N = N+1#
				for (m in 0:5)#
					{#
						n = 0#
						if (m == 0) suspicous_pairs = c(suspicous_pairs, paste0(m," NUCLEOTIDE MISMATCH ##############################"), " ")#
						if (m == 1) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHE #############################"), " ")#
						if (m >= 2) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHES ############################"), " ")#
						for (i in 2:dim(mismatches)[1])#
							{#
								for (j in 1:(i-1))#
									{#
										if ((!is.na(mismatches[i,j]))&&(mismatches[i,j] == m))#
											{#
												if (m <= 5) suspicous_pairs_list[[length(suspicous_pairs_list)+1]] = c(row.names(mismatches)[i],row.names(mismatches)[j])#
						suspicous_pairs = c(suspicous_pairs, paste(row.names(mismatches)[i],as.character(tab[which(tab[,1]==row.names(mismatches)[i]),"location"]),sep=" - "))#
						suspicous_pairs = c(suspicous_pairs, paste(row.names(mismatches)[j],as.character(tab[which(tab[,1]==row.names(mismatches)[j]),"location"]),sep=" - "))#
												suspicous_pairs = c(suspicous_pairs, " "); n = n + 1; # cat("\n")#
											}#
									}#
							}#
						nS[[m+1]] = n#
					}#
				if (N == 1) write(suspicous_pairs, paste0("LASV_",segments[s],"_alignment_1.txt"))
length(suspicous_pairs_list)
remainingSuspiciousPairs = FALSE
write(fasta, paste0("LASV_",segments[s],"_alignment_2.fasta"))
write.csv(tab, paste0("LASV_",segments[s],"_alignment_2.csv"), quote=F, row.names=F)
s
s=2
fasta = scan(paste0("LASV_",segments[s],"_alignment_1.fasta"), what="", sep="\n", quiet=T)#
		tab = read.csv(paste0("LASV_",segments[s],"_alignment_1.csv"), header=T)#
		remainingSuspiciousPairs = TRUE; N = 0#
		while (remainingSuspiciousPairs == TRUE)#
			{#
				seqIDs = fasta[which(grepl(">",fasta))]; sequences = fasta[which(!grepl(">",fasta))]#
				mismatches = mismatchesMatrix(sequences); row.names(mismatches) = gsub(">","",seqIDs)#
				suspicous_pairs_list = list(); suspicous_pairs = c(); nS = list(); N = N+1#
				for (m in 0:5)#
					{#
						n = 0#
						if (m == 0) suspicous_pairs = c(suspicous_pairs, paste0(m," NUCLEOTIDE MISMATCH ##############################"), " ")#
						if (m == 1) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHE #############################"), " ")#
						if (m >= 2) suspicous_pairs = c(suspicous_pairs, " ", paste0(m," NUCLEOTIDE MISMATCHES ############################"), " ")#
						for (i in 2:dim(mismatches)[1])#
							{#
								for (j in 1:(i-1))#
									{#
										if ((!is.na(mismatches[i,j]))&&(mismatches[i,j] == m))#
											{#
												if (m <= 5) suspicous_pairs_list[[length(suspicous_pairs_list)+1]] = c(row.names(mismatches)[i],row.names(mismatches)[j])#
						suspicous_pairs = c(suspicous_pairs, paste(row.names(mismatches)[i],as.character(tab[which(tab[,1]==row.names(mismatches)[i]),"location"]),sep=" - "))#
						suspicous_pairs = c(suspicous_pairs, paste(row.names(mismatches)[j],as.character(tab[which(tab[,1]==row.names(mismatches)[j]),"location"]),sep=" - "))#
												suspicous_pairs = c(suspicous_pairs, " "); n = n + 1; # cat("\n")#
											}#
									}#
							}#
						nS[[m+1]] = n#
					}#
				if (N == 1) write(suspicous_pairs, paste0("LASV_",segments[s],"_alignment_1.txt"))#
				if (length(suspicous_pairs_list) == 0)#
					{#
						remainingSuspiciousPairs = FALSE#
					}	else	{#
						sequences_to_remove = c(); sequences_to_keep = c()#
						for (i in 1:length(suspicous_pairs_list))#
							{#
								seqIDs = c(); index = NA#
								if (sum(grepl("_NGA-",suspicous_pairs_list[[i]])) == 1) # 1 sequence from the "Science" data set#
									{#
										index = which(grepl("_NGA-",suspicous_pairs_list[[i]]))#
									}#
								if (sum(grepl("_NGA-",suspicous_pairs_list[[i]])) == 2) # 2 sequences from the "Science" data set#
									{#
										date1 = unlist(strsplit(suspicous_pairs_list[[i]][1],"_")); date1 = decimal_date(ymd(date1[length(date1)]))#
										date2 = unlist(strsplit(suspicous_pairs_list[[i]][2],"_")); date2 = decimal_date(ymd(date2[length(date2)]))#
										if (date1 == date2)#
											{#
												accession1 = unlist(strsplit(suspicous_pairs_list[[i]][1],"\\|"))[1]#
												accession2 = unlist(strsplit(suspicous_pairs_list[[i]][2],"\\|"))[1]#
												accessions = c(accession1, accession2); accessions = accessions[order(accessions)]#
												if (accession1 == accessions[1]) index = 1#
												if (accession2 == accessions[1]) index = 2#
											}	#
										if (date1 < date2) index = 1#
										if (date2 < date1) index = 2#
									}#
								if (sum(grepl("_NGA-",suspicous_pairs_list[[i]])) == 0) # no sequence from the "Science" data set#
									{#
										accession1 = unlist(strsplit(suspicous_pairs_list[[i]][1],"\\|"))[1]#
										accession2 = unlist(strsplit(suspicous_pairs_list[[i]][2],"\\|"))[1]#
										accessions = c(accession1, accession2); accessions = accessions[order(accessions)]#
										if (accession1 == accessions[1]) index = 1#
										if (accession2 == accessions[1]) index = 2#
									}#
								if (is.na(index)) print(i)#
								sequences_to_remove = c(sequences_to_remove, suspicous_pairs_list[[i]][-index])#
								sequences_to_keep = c(sequences_to_keep, suspicous_pairs_list[[i]][index])#
							}#
						buffer = c()#
						for (i in 1:length(fasta))#
							{#
								if (grepl(">",fasta[i]))#
									{#
										seqID = gsub(">","",fasta[i])#
										if (!seqID%in%sequences_to_remove)#
											{#
												buffer = c(buffer,fasta[i],fasta[i+1])#
											}#
									}	#
							}#
						fasta = buffer#
						tab = tab[which(!tab[,1]%in%sequences_to_remove),]#
					}#
			}#
		write(fasta, paste0("LASV_",segments[s],"_alignment_2.fasta"))#
		write.csv(tab, paste0("LASV_",segments[s],"_alignment_2.csv"), quote=F, row.names=F)
for (i in 1:length(segments))#
	{#
		fasta2 = scan(paste0("LASV_",segments[i],"_alignment_2.fasta"), what="", sep="\n", quiet=T)#
		tab2 = read.csv(paste0("LASV_",segments[i],"_alignment_2.csv"), header=T)#
		tab3 = tab2; tab3 = tab3[which(tab3[,"longitude"]!=""),]; fasta3 = c()#
		for (j in 1:length(fasta2))#
			{#
				if (grepl(">",fasta2[j]))#
					{#
						seqID = gsub(">","",fasta2[j])#
						if (seqID%in%tab3[,1])#
							{#
								fasta3 = c(fasta3,fasta2[j],fasta2[j+1])#
							}#
					}	#
			}		#
		write(fasta3, paste0("LASV_",segments[i],"_alignment_3.fasta"))#
		write.csv(tab3, paste0("LASV_",segments[i],"_alignment_3.csv"), quote=F, row.names=F)#
	}
